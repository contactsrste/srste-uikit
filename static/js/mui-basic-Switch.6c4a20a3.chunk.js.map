{"version":3,"file":"static/js/mui-basic-Switch.6c4a20a3.chunk.js","mappings":"uTAIMA,EAAmB,GAEnBC,EAAe,SAAUC,EAAOC,GACpC,OACEC,EAAAA,cAACC,EAAAA,EAAM,CACLC,QAASJ,EAAMI,QACfC,MAAOL,EAAMK,MACbC,SAAUN,EAAMM,SAChBC,SAAUP,EAAMO,SAChBC,MAAOR,EAAMS,UAGnB,EAEMC,EAAM,wDAINV,EAAQ,CACZ,CACEW,KAAM,UACNC,cAAc,EACdC,KAAM,WAER,CACEF,KAAM,QACNC,aAAc,UACdC,KAAM,UAER,CACEF,KAAM,WACNC,cAAc,EACdC,KAAM,WAER,CACEF,KAAM,WACNC,aAAc,KACdC,KAAM,YAER,CACEF,KAAM,KACNC,aAAc,CAAC,EACfC,KAAM,WAIJC,EAAQ,CACZ,CACEH,KAAM,UACNI,QAAS,KAIPC,GAAmBC,EAAAA,EAAAA,GACvBf,EAAAA,WAAiBH,GACjBC,EACA,M,4BCxDIkB,E,SAAkChB,mBAAoBiB,GAI5D,K,kFCNe,SAASC,IACtB,OAAOlB,EAAAA,WAAiBgB,EAAAA,EAC1B,C,uCCHA,IAAeG,EAAU,C,uCCAzB,IAAeC,EAAa,C,kFCCb,SAASA,EAAaC,GAKlC,IAJDC,EAAUD,EAAVC,WACSC,EAAWF,EAApBG,QAMWC,GALPJ,EAAJZ,KAAIY,EACJK,MAKI1B,EAAAA,YAA4BiB,IAAfK,GADfK,SAEFC,EAA+B5B,EAAAA,SAAeuB,GAAYM,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAAnDG,EAAUF,EAAA,GAAEG,EAAQH,EAAA,GAsB3B,MAAO,CArBOJ,EAAeH,EAAaS,EAgBX/B,EAAAA,aAAkB,SAAAiC,GAC1CR,GACHO,EAASC,EAEb,GAAG,IAEL,C","sources":["components/mui/basic/Switch.js","../node_modules/@mui/material/FormControl/FormControlContext.js","../node_modules/@mui/material/FormControl/useFormControl.js","../node_modules/@mui/material/utils/capitalize.js","../node_modules/@mui/material/utils/useControlled.js","../node_modules/@mui/utils/esm/useControlled.js"],"sourcesContent":["import React from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport Switch from \"@mui/material/Switch\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\nconst SrsMuiSwitch = function (props, ref) {\r\n  return (\r\n    <Switch\r\n      checked={props.checked}\r\n      color={props.color}\r\n      disabled={props.disabled}\r\n      onChange={props.onChange}\r\n      theme={props.muiTheme}\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = `\r\n  /* Custom styles for the MuiSwitch component */\r\n`;\r\n\r\nconst props = [\r\n  {\r\n    name: \"checked\",\r\n    defaultValue: false,\r\n    type: \"boolean\",\r\n  },\r\n  {\r\n    name: \"color\",\r\n    defaultValue: \"primary\",\r\n    type: \"string\",\r\n  },\r\n  {\r\n    name: \"disabled\",\r\n    defaultValue: false,\r\n    type: \"boolean\",\r\n  },\r\n  {\r\n    name: \"onChange\",\r\n    defaultValue: null,\r\n    type: \"function\",\r\n  },\r\n  {\r\n    name: \"sx\",\r\n    defaultValue: {},\r\n    type: \"object\"\r\n  }\r\n];\r\n\r\nconst slots = [\r\n  {\r\n    name: \"default\",\r\n    allowed: [],\r\n  },\r\n];\r\n\r\nconst WrappedComponent = wrapper(\r\n  React.forwardRef(SrsMuiSwitch),\r\n  props,\r\n  \"mui\"\r\n);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\n","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst FormControlContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\nexport default FormControlContext;","import * as React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","import { unstable_capitalize as capitalize } from '@mui/utils';\nexport default capitalize;","import { unstable_useControlled as useControlled } from '@mui/utils';\nexport default useControlled;","/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled({\n  controlled,\n  default: defaultProp,\n  name,\n  state = 'value'\n}) {\n  // isControlled is ignored in the hook dependency lists as it should never change.\n  const {\n    current: isControlled\n  } = React.useRef(controlled !== undefined);\n  const [valueState, setValue] = React.useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(() => {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [state, name, controlled]);\n    const {\n      current: defaultValue\n    } = React.useRef(defaultProp);\n    React.useEffect(() => {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n  const setValueIfUncontrolled = React.useCallback(newValue => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}"],"names":["dispatchedEvents","SrsMuiSwitch","props","ref","React","Switch","checked","color","disabled","onChange","theme","muiTheme","styles","name","defaultValue","type","slots","allowed","WrappedComponent","wrapper","FormControlContext","undefined","useFormControl","capitalize","useControlled","_ref","controlled","defaultProp","default","isControlled","state","current","_React$useState","_React$useState2","_slicedToArray","valueState","setValue","newValue"],"sourceRoot":""}