{"version":3,"file":"static/js/basic-JSONValuePicker.4126d821.chunk.js","mappings":"mjDAIA,IAAMA,EAAmB,GAKnBC,EAAqB,SAAUC,EAAOC,GACxC,IAAQC,EAAmBF,EAAnBE,KACgDC,GAD7BH,EAAbI,SAC0CC,GAAdC,EAAAA,EAAAA,UAAS,MAAK,IACNC,GAD9BJ,EAAA,GAAkBA,EAAA,GACYE,GAAZC,EAAAA,EAAAA,UAAS,IAAG,IAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAsB5BG,EAAa,SAACC,GAChB,OAAQ,WACJ,OAAQC,EAAAA,cAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,QAAS,aAC9DJ,EAAAA,cAAA,YAAUK,KAAK,MAAMC,KAAK,KAAKL,MAAO,CAACM,OAAQ,WAAYC,UAAWT,EAAY,SAClFC,EAAAA,cAAA,YAAUK,KAAK,WAAWC,KAAK,KAAKL,MAAO,CAACM,OAAQ,WAAYC,UAAWT,EAAY,eAEnG,CACJ,EAwBIU,EAtBgB,SAACnB,EAAMoB,GACvB,IAAMC,EAAcD,EAAKE,QAAO,SAACC,EAAKC,GAAG,OAAKD,EAAIC,EAAI,GAAExB,GAExD,OAAQU,EAAAA,cAACe,EAAAA,IAAQ,CAACC,MAAM,aAEhBC,OAAOC,KAAKP,GAAaQ,KAAI,SAACC,GAC1B,MAAkC,UAA/BC,EAAOV,EAAYS,IACVpB,EAAAA,cAACsB,EAAAA,IAAQ,CAACC,YAAY,EAAMP,MAAOI,GAEnCH,OAAOC,KAAKP,EAAYS,IAAUD,KAAI,SAACK,GACnC,OAAQxB,EAAAA,cAACsB,EAAAA,IAAQ,CAACC,YAAY,EAAMP,MAAOQ,EAAYC,WAAY3B,GACvE,KAIAE,EAAAA,cAACsB,EAAAA,IAAQ,CAACC,YAAY,EAAMP,MAAOI,EAASK,WAAY3B,GAExE,IAGZ,CAEY4B,CAAYpC,EAAMM,GAC9B,OACII,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAQ2B,QA9CK,WACjB9B,GAAe,SAACa,GAAI,OAAKA,EAAKkB,MAAM,GAAI,EAAE,GAC9C,EA4CuCC,SAAUjC,EAAYkC,QAAU,GAAG,WAGlE9B,EAAAA,cAAA,UAAQ2B,QA7CO,WACnB9B,EAAe,GACnB,GA2CyC,cAChCY,EAGb,EAEMsB,EAAM,WAGN3C,EAAQ,CAAC,CACXiB,KAAM,OACN2B,aAAc,CAAC,EACfC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQpC,EAAAA,WAAiBb,GAAqBC,E","sources":["components/basic/JSONValuePicker.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { TreeView, TreeNode } from \"carbon-components-react\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-json-value-picker></srs-json-value-picker>\r\n*/\r\nconst SrsJSONValuePicker = function (props, ref) {\r\n    const { data, onChange } = props;\r\n    const [selectedValue, setSelectedValue] = useState(null);\r\n    const [currentPath, setCurrentPath] = useState([]);\r\n\r\n    const handleSelectChange = (event) => {\r\n        const value = event.target.value;\r\n        setSelectedValue(value);\r\n        if (onChange) {\r\n            onChange(value);\r\n        }\r\n    };\r\n\r\n    const handleGoBack = () => {\r\n        setCurrentPath((path) => path.slice(0, -1));\r\n    };\r\n\r\n    const handleGoToRoot = () => {\r\n        setCurrentPath([]);\r\n    };\r\n\r\n    const handleGoToProperty = (key) => {\r\n        setCurrentPath((path) => [...path, key]);\r\n    };\r\n\r\n    const getActions = (elementId) => {\r\n        return  () => {\r\n            return (<div style={{ display: \"flex\", flexDirection: \"row\", padding: \"0px 10px\"}}>\r\n                    <srs-icon name=\"Add\" size=\"16\" style={{cursor: \"pointer\"}} elementid={elementId + \"-add\"}/>\r\n                    <srs-icon name=\"TrashCan\" size=\"16\" style={{cursor: \"pointer\"}} elementid={elementId + \"-drilldown\"}/>\r\n                </div>)\r\n        };  \r\n    }\r\n\r\n    const renderItems = (data, path) => {\r\n        const currentData = path.reduce((obj, key) => obj[key], data);\r\n\r\n        return (<TreeView label=\"Tree View\">\r\n            {\r\n                Object.keys(currentData).map((keyName) => {\r\n                    if(typeof currentData[keyName] == \"object\") {\r\n                        return (<TreeNode isExpanded={true} label={keyName}>\r\n                            {\r\n                                Object.keys(currentData[keyName]).map((subkeyName) => {\r\n                                    return (<TreeNode isExpanded={true} label={subkeyName} renderIcon={getActions}/>)\r\n                                })\r\n                            }\r\n                        </TreeNode>);\r\n                    }else {\r\n                        return (<TreeNode isExpanded={true} label={keyName} renderIcon={getActions}/>);\r\n                    }\r\n                })\r\n            }\r\n        </TreeView>);\r\n    };\r\n\r\n    let items = renderItems(data, currentPath);\r\n    return (\r\n        <div>\r\n            <button onClick={handleGoBack} disabled={currentPath.length <= 0}>\r\n                Go back\r\n            </button>\r\n            <button onClick={handleGoToRoot}>Go to root</button>\r\n            {items}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"data\",\r\n    defaultValue: {},\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsJSONValuePicker), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsJSONValuePicker","props","ref","data","_useState2","onChange","_slicedToArray","useState","_useState4","currentPath","setCurrentPath","getActions","elementId","React","style","display","flexDirection","padding","name","size","cursor","elementid","items","path","currentData","reduce","obj","key","TreeView","label","Object","keys","map","keyName","_typeof","TreeNode","isExpanded","subkeyName","renderIcon","renderItems","onClick","slice","disabled","length","styles","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}