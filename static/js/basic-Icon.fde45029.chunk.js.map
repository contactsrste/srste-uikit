{"version":3,"file":"static/js/basic-Icon.fde45029.chunk.js","mappings":"62CAUA,IAAMA,EAAmB,CAACC,EAAAA,EAAAA,cAEpBC,EAAU,SAAUC,EAAOC,GAC7B,IAAsDC,EAAAC,GAAdC,EAAAA,EAAAA,UAAS,MAAK,GAA/CC,EAAYH,EAAA,GAAEI,EAAeJ,EAAA,IAEpCK,EAAAA,EAAAA,YAAU,WACFP,EAAMQ,MAAsB,UAAdR,EAAMQ,KAMD,eAAdR,EAAMQ,MACX,+BAA4CC,MAAK,SAACC,GAC9C,IAAIC,EAAgBX,EAAMY,KAAKC,MAAM,KAEjCC,EAAa,MADjBH,EAAgBA,EAAcI,KAAI,SAACC,GAAY,OAAKA,EAAa,GAAGC,cAAgBD,EAAaE,UAAU,EAAE,KACvEC,KAAK,IAC3Cb,EAAgBI,EAAYI,IAC5BM,EAAAA,GAAAA,IAAYV,EAAYI,GAC5B,IAZGd,EAAMY,MACL,kEAA8BH,MAAK,SAACC,GAChCJ,EAAgBI,EAAYV,EAAMY,MACtC,GAWZ,GAAG,CAACZ,EAAMY,KAAMZ,EAAMQ,OAEtB,IAAIa,EAAe,CAChBC,MAAOtB,EAAMsB,QAAwB,SAAftB,EAAMuB,OAAmC,OAAfvB,EAAMuB,MAAgB,QAAS,SAC/E,qBAAsBvB,EAAMsB,QAAwB,SAAftB,EAAMuB,OAAmC,OAAfvB,EAAMuB,MAAgB,QAAS,UAG3FC,EAAc,SAACxB,GACjB,OAAO,SAACyB,GACJzB,EAAM0B,eAAiB1B,EAAM0B,cAAc5B,EAAAA,EAAAA,aAAuB,CAACc,KAAMZ,EAAMY,KAAMe,GAAI3B,EAAM4B,YAC5F5B,EAAM6B,SACL7B,EAAM6B,QAAQ,CAACjB,KAAMZ,EAAMY,KAAMe,GAAI3B,EAAM4B,WAEnD,CACJ,EAEIE,EAAS,KACb,GAAI9B,EAAMQ,MAAsB,UAAdR,EAAMQ,KAGD,eAAdR,EAAMQ,OACXsB,EAASC,EAAAA,cAACC,EAAAA,EAAe,CAACC,MAAO,CAACC,OAAQ,UAAWC,OAAQnC,EAAMmC,QAAUnC,EAAMoC,KAAMC,MAAOrC,EAAMqC,OAASrC,EAAMoC,KAAMd,MAAOtB,EAAMsB,OAC5HO,QAASL,EAAYxB,GACrBsC,MAAOtC,EAAMuC,YACbC,KAAMxC,EAAMY,YAPc,CACtC,IAAI6B,EAAepC,EACnByB,EAASC,EAAAA,cAACU,EAAY,CAACL,KAAMpC,EAAMoC,MAAQ,GAAIP,QAASL,EAAYxB,IACxE,CAOA,OAAOK,EAAc0B,EAAAA,cAAA,OAAKE,MAAOZ,GACvBS,GACEC,EAAAA,cAAA,WAChB,EAEMW,EAAM,OAGN1C,EAAQ,CAAC,CACXY,KAAM,OACN+B,aAAc,GACdnC,KAAM,UACP,CACCI,KAAM,cACN+B,cAAc,EACdnC,KAAM,WACP,CACCI,KAAM,OACN+B,aAAc,GACdnC,KAAM,UACP,CACCI,KAAM,QACN+B,aAAc,GACdnC,KAAM,WAGJoC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQf,EAAAA,WAAiBhC,GAAUC,GAE5D,W","sources":["components/basic/Icon.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/*\r\n    Example: <srs-icon name=\"Add\" description=\"Add an item\"/>\r\n*/\r\n\r\nconst dispatchedEvents = [EventAPI.ICON_CLICKED];\r\n\r\nconst SrsIcon = function (props, ref) {\r\n    const [iconInstance, setIconInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if(!props.type || props.type == \"carbon\") {\r\n            if(props.name) {\r\n                import('@carbon/icons-react').then((iconLibrary)=> {\r\n                    setIconInstance(iconLibrary[props.name]);\r\n                });\r\n            }\r\n        }else if(props.type == \"fontawesome\") {\r\n            import(\"@fortawesome/free-solid-svg-icons\").then((iconLibrary) => {\r\n                let iconNameParts = props.name.split(\"-\");\r\n                iconNameParts = iconNameParts.map((iconNamePart) => iconNamePart[0].toUpperCase() + iconNamePart.substring(1));\r\n                let moduleName = \"fa\" + iconNameParts.join(\"\");\r\n                setIconInstance(iconLibrary[moduleName]);\r\n                library.add(iconLibrary[moduleName]);\r\n            });            \r\n        }\r\n    }, [props.name, props.type]);\r\n    \r\n    let inlineStyles = {\r\n       color: props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\"),\r\n       \"--cds-icon-primary\": props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\")\r\n    };\r\n\r\n    const handleClick = (props) => {\r\n        return (evt) => {\r\n            props.dispatchEvent && props.dispatchEvent(EventAPI.ICON_CLICKED, {name: props.name, id: props.elementid})\r\n            if(props.onClick) {\r\n                props.onClick({name: props.name, id: props.elementid});\r\n            }\r\n        }\r\n    }\r\n\r\n    let iconEl = null;\r\n    if(!props.type || props.type == \"carbon\") {\r\n        let IconInstance = iconInstance;\r\n        iconEl = <IconInstance size={props.size || 24} onClick={handleClick(props)}/>;\r\n    }else if(props.type == \"fontawesome\") {\r\n        iconEl = <FontAwesomeIcon style={{cursor: \"pointer\", height: props.height || props.size, width: props.width || props.size, color: props.color}} \r\n                    onClick={handleClick(props)}\r\n                    title={props.description}\r\n                    icon={props.name}/>\r\n    }\r\n\r\n    return iconInstance? <div style={inlineStyles}>\r\n            { iconEl } \r\n        </div>: <div/>\r\n}\r\n\r\nconst styles = `\r\n\r\n`\r\nconst props = [{\r\n    name: \"name\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"description\",\r\n    defaultValue: true,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"size\",\r\n    defaultValue: 24,\r\n    type: \"number\"\r\n}, {\r\n    name: \"color\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsIcon), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\nexport default SrsIcon;"],"names":["dispatchedEvents","EventAPI","SrsIcon","props","ref","_useState2","_slicedToArray","useState","iconInstance","setIconInstance","useEffect","type","then","iconLibrary","iconNameParts","name","split","moduleName","map","iconNamePart","toUpperCase","substring","join","library","inlineStyles","color","theme","handleClick","evt","dispatchEvent","id","elementid","onClick","iconEl","React","FontAwesomeIcon","style","cursor","height","size","width","title","description","icon","IconInstance","styles","defaultValue","slots","WrappedComponent","wrapper"],"sourceRoot":""}