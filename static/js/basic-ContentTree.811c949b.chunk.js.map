{"version":3,"file":"static/js/basic-ContentTree.811c949b.chunk.js","mappings":"s1CAKA,IAAMA,EAAmB,CAACC,EAAAA,EAAAA,aAAuBA,EAAAA,EAAAA,0BAM3CC,EAAiB,SAAUC,EAAOC,GAAM,IAADC,EAEqDC,EAAAC,EAApDC,EAAAA,UAAiC,QAAlBH,EAAAF,EAAMM,oBAAY,IAAAJ,OAAA,EAAlBA,EAAoBK,MAAM,OAAQ,IAAG,GAAvFC,EAAaL,EAAA,GAUdM,GAVgCN,EAAA,IAUtBO,EAAAA,EAAAA,QAAO,QACvBC,EAAAA,EAAAA,YAAU,WACFF,EAAQG,SACRH,EAAQG,QAAQC,iBAAiBf,EAAAA,EAAAA,cAAuB,SAACgB,GACrDC,QAAQC,IAAIF,EAAIG,OAAOC,GAC3B,GAER,GAAG,CAAClB,IAiCJ,OAAOK,EAAAA,cAAA,OAAKJ,IAAKQ,GACbJ,EAAAA,cAACc,EAAAA,IAAQ,KAhCW,SAAlBC,EAAmBC,EAAOC,GAC5B,IAAMC,EAAQ,GA2Bd,OA1BGF,GAASA,EAAMG,OAAS,GACvBH,EAAMI,SAAQ,SAACC,EAAMC,GAAW,IAADC,EAErBC,IADgC,QAAlBD,EAAA5B,EAAMM,oBAAY,IAAAsB,OAAA,EAAlBA,EAAoBrB,MAAM,OAAQC,GACrBsB,SAASJ,EAAKK,MAC/CR,EAAMS,KAAK3B,EAAAA,cAAC4B,EAAAA,IAAQ,CAACJ,WAAYA,EAAY,cAAaH,EAAKK,KAAMG,MAAOR,EAAKQ,MACjEC,QAAS,SAACrB,GACNd,EAAMoC,cAActC,EAAAA,EAAAA,yBAAmC,CAAEuC,QAAS,CAACnB,GAAIlB,EAAMkB,IAAMlB,EAAMsC,UAAWC,OAAQb,EAAKK,KAAMS,SAAUlB,IACrI,EACAmB,SAAU,SAAC3B,GACPd,EAAMoC,cAActC,EAAAA,EAAAA,yBAAmC,CAAEuC,QAAS,CAACnB,GAAIlB,EAAMkB,IAAMlB,EAAMsC,UAAWC,OAAQb,EAAKK,KAAMS,SAAUlB,IACrI,EACAoB,WAAY,WACR,OAAQrC,EAAAA,cAAA,OAAKsC,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,QAAS,aAElE9C,EAAM+C,YAAYC,KAAI,SAACC,GACnB,OAAQ5C,EAAAA,cAAA,mBAAiB6C,KAAMD,EAAYE,KAAK,KAAKR,MAAO,CAACS,OAAQ,WAAYd,UAAWZ,EAAKK,MACrG,IAGZ,GACHL,EAAK2B,UAAY3B,EAAK2B,SAAS7B,OAAS,EAAGJ,EAAgBM,EAAK2B,SAAU/B,EAAS,IAAMI,EAAKK,MAAO,MAE9G,IAIDR,CACX,CAISH,CAAgBpB,EAAMqB,MAAO,KAE1C,EAEMiC,EAAM,+DAKNtD,EAAQ,CAAC,CACX+B,KAAM,QACNwB,aAAc,GACdC,KAAM,UACP,CACCzB,KAAM,cACNwB,aAAc,CAAC,OACfC,KAAM,UACP,CACCzB,KAAM,eACNwB,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQtD,EAAAA,WAAiBN,GAAiBC,EAAO,GAAI,CAAC,mB","sources":["components/basic/ContentTree.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { TreeView, TreeNode } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.ICON_CLICKED, EventAPI.CONTENTTREE_NODE_CLICKED];\r\n\r\n/*\r\n    Example: <srs-contenttree items=[{name: \"Node1\", label: \"Node 1\", children: [{name: \"Node11\", label: \"Node 11\"}]}, {name: \"Node2\", label: \"Node 2\", children: [{name: \"Node21\", label: \"Node 21\"}]}]/>\r\n*/\r\n\r\nconst SrsContentTree = function (props, ref) {\r\n     \r\n    const [expandedNodes, setExpandedNodes] = React.useState(props.selectedpath?.split(\".\") || []);\r\n\r\n    const handleToggle = (name) => {\r\n      if (expandedNodes.includes(name)) {\r\n        setExpandedNodes(expandedNodes.filter((node) => node !== name));\r\n      } else {\r\n        setExpandedNodes([...expandedNodes, name]);\r\n      }\r\n    };\r\n\r\n    const treeRef = useRef(null);\r\n    useEffect(() => {\r\n        if (treeRef.current) {\r\n            treeRef.current.addEventListener(EventAPI.ICON_CLICKED, (evt) => {\r\n                console.log(evt.detail.id);\r\n            })\r\n        }\r\n    }, [props]);\r\n\r\n    const renderTreeNodes = (items, parent) => {\r\n        const nodes = [];\r\n        if(items && items.length > 0) {\r\n            items.forEach((item, index) => {\r\n                let nodesExpanded = props.selectedpath?.split(\".\") || expandedNodes;\r\n                const isExpanded = nodesExpanded.includes(item.name);\r\n                nodes.push(<TreeNode isExpanded={isExpanded} data-testid={item.name} label={item.label} \r\n                                onClick={(evt) => {\r\n                                    props.dispatchEvent(EventAPI.CONTENTTREE_NODE_CLICKED, { payload: {id: props.id || props.elementid, nodeid: item.name, nodepath: parent}});\r\n                                }} \r\n                                onToggle={(evt) => {\r\n                                    props.dispatchEvent(EventAPI.CONTENTTREE_NODE_CLICKED, { payload: {id: props.id || props.elementid, nodeid: item.name, nodepath: parent}});\r\n                                }} \r\n                                renderIcon={() => {\r\n                                    return (<div style={{ display: \"flex\", flexDirection: \"row\", padding: \"0px 10px\"}}>\r\n                                    {\r\n                                        props.actionicons.map((actionIcon) => {\r\n                                            return (<mui-icon-button icon={actionIcon} size=\"16\" style={{cursor: \"pointer\"}} elementid={item.name}/>)\r\n                                        })\r\n                                    }\r\n                                </div>)\r\n                            }}>\r\n                        {item.children && item.children.length > 0? renderTreeNodes(item.children, parent + \".\" + item.name): null}\r\n                    </TreeNode>);\r\n                }\r\n            );\r\n        }\r\n    \r\n        return nodes;\r\n    };\r\n\r\n    return <div ref={treeRef}>\r\n        <TreeView>\r\n            {renderTreeNodes(props.items, \"\")}\r\n        </TreeView></div>;\r\n}\r\n\r\nconst styles = `\r\n    .cds--tree {\r\n        width: 100% !important;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"items\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}, {\r\n    name: \"actionicons\",\r\n    defaultValue: [\"Add\"],\r\n    type: \"object\"\r\n}, {\r\n    name: \"selectedpath\",\r\n    defaultValue: \"\",\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsContentTree), props, \"\", [\"mui-icon-button\"]);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsContentTree","props","ref","_props$selectedpath","_React$useState2","_slicedToArray","React","selectedpath","split","expandedNodes","treeRef","useRef","useEffect","current","addEventListener","evt","console","log","detail","id","TreeView","renderTreeNodes","items","parent","nodes","length","forEach","item","index","_props$selectedpath2","isExpanded","includes","name","push","TreeNode","label","onClick","dispatchEvent","payload","elementid","nodeid","nodepath","onToggle","renderIcon","style","display","flexDirection","padding","actionicons","map","actionIcon","icon","size","cursor","children","styles","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}