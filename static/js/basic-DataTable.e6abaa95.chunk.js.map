{"version":3,"file":"static/js/basic-DataTable.e6abaa95.chunk.js","mappings":"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","sources":["components/basic/DataTable.js","components/basic/Icon.js","../node_modules/@babel/runtime/helpers/esm/readOnlyError.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport {\r\n    DataTable, TableContainer, Table, TableToolbar, TableBatchActions, TableBatchAction,\r\n    TableToolbarContent, TableToolbarSearch, TableToolbarMenu, TableToolbarAction, Button,\r\n    TableHead, TableRow, TableSelectAll, TableHeader, TableBody, TableSelectRow, TableCell,\r\n    OverflowMenu, OverflowMenuItem\r\n} from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport SrsIcon from \"./Icon.js\";\r\nimport { Settings } from \"@carbon/icons-react\";\r\n\r\nconst dispatchedEvents = [\"ABOUT#clicked\"];\r\n/*\r\n    Example: <srs-datatable headers=[\"Name\", \"Email\", \"Phone\"] rows=[[\"John Doe\", \"john.doe@example.com\", \"(123) 456-7890\"]]/>\r\n*/\r\nconst SrsDataTable = function (props, ref) {\r\n    const headers = props.headers;\r\n    const [rows, setRows] = useState(props.rows || []);\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n    const [sortBy, setSortBy] = useState(\"\");\r\n    const [sortDirection, setSortDirection] = useState(\"\");\r\n    const [filter, setFilter] = useState(\"\");\r\n\r\n    const handleSort = (event) => {\r\n        const { key, direction, inlineSort, dispatchEvent } = event;\r\n\r\n        setSortBy(key);\r\n        setSortDirection(direction);\r\n        if (inlineSort) {\r\n            rows = rows.sort((a, b) => direction == \"ASC\" ? a[key].localeCompare(b[key]) : b[key].localeCompare(a[key]));\r\n            setRows(rows);\r\n        } else {\r\n            dispatchEvent(EventAPI.DATATABLE_SORT_REQUESTED, { payload: { sortBy: key, sortDirection: direction } });\r\n        }\r\n    };\r\n\r\n    // Event listener for row clicks\r\n    const onRowClick = (evt) => {\r\n        // Find the clicked row element\r\n        let target = evt.target;\r\n        while (target.tagName !== 'TR') {\r\n            target = target.parentNode;\r\n            if (!target) {\r\n                return;\r\n            }\r\n        }\r\n        // Ignore clicks on the table header row\r\n        if (target.parentNode.tagName === 'THEAD') {\r\n            return;\r\n        }\r\n        // Select the clicked row\r\n        this.selectedIndex = target.rowIndex - 1;\r\n        props.dispatchEvent(EventAPI.DATATABLE_ROW_CLICKED, { detail: { index: this.selectedIndex } });\r\n    }\r\n\r\n    const handleSelectRow = (row) => {\r\n        const rowIndex = selectedRows.findIndex((r) => r.id === row.id);\r\n        if (rowIndex >= 0) {\r\n            setSelectedRows(selectedRows.filter((r) => r.id !== row.id));\r\n        } else {\r\n            setSelectedRows([...selectedRows, row]);\r\n        }\r\n    };\r\n\r\n    const handleRemoveSelectedRows = () => {\r\n        // remove selected rows from the table\r\n    };\r\n\r\n    const handleFilterChange = (event) => {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    const onInputChange = (evt) => {\r\n        console.log(evt.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRows(props.rows);\r\n        setSelectedRows(props.selectedRows);\r\n        setSortBy(props.sortBy);\r\n        setSortDirection(props.sortDirection);\r\n        setFilter(props.filter);\r\n    }, [props.ts, props.rows, props.selectedRows, props.sortBy, props.sortDirection, props.filter])\r\n\r\n    return (\r\n        <>\r\n            <TableContainer title={props.list_title} description={props.list_subtitle}>\r\n                <TableToolbar>\r\n                    <TableToolbarContent>\r\n                        <TableToolbarSearch onChange={onInputChange} />\r\n                        <TableToolbarMenu>\r\n                            <TableToolbarAction onClick={handleRemoveSelectedRows} isDelete disabled={!selectedRows || selectedRows.length == 0}>\r\n                                Delete Selected\r\n                            </TableToolbarAction>\r\n                            <TableToolbarAction onClick={handleRemoveSelectedRows} disabled={!selectedRows || selectedRows.length == 0}>\r\n                                Export Selected\r\n                            </TableToolbarAction>\r\n                        </TableToolbarMenu>\r\n                    </TableToolbarContent>\r\n                </TableToolbar>\r\n            {/* <div style={{ display: \"flex\", flexDirection: \"row\", verticalAlign: \"center\" }}>\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"80%\", padding: \"10px 10px 0px 10px\" }}>\r\n                    <p className=\"cds--file--label\">{props.list_title}</p>\r\n                    <p className=\"cds--label-description\">{props.list_subtitle}</p>\r\n                </div>\r\n                <OverflowMenu renderIcon={Settings} ariaLabel=\"overflow-menu\" size=\"lg\">\r\n                    <OverflowMenuItem itemText=\"Delete Selected\" isDelete onClick={handleRemoveSelectedRows} disabled={!selectedRows || selectedRows.length == 0} />\r\n                    <OverflowMenuItem itemText=\"Export Selected\" onClick={handleRemoveSelectedRows} disabled={!selectedRows || selectedRows.length == 0} />\r\n                </OverflowMenu>\r\n            </div> */}\r\n                <Table size=\"lg\" useZebraStyles={true}\r\n                    filter={\r\n                        <label>\r\n                            Filter by name:\r\n                            <input type=\"text\" value={filter} onChange={handleFilterChange} />\r\n                        </label>\r\n                    }>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableHeader id=\"OpenRecord\" key=\"OpenRecord\"></TableHeader>\r\n                            {headers.map((header) => {\r\n                                return typeof header == \"object\" ? (<TableHeader\r\n                                    {...header}\r\n                                    isSortable={header.sortable}\r\n                                    key={header.name}\r\n                                    sortDirection={sortBy === header.name ? sortDirection : null}\r\n                                    onClick={() => handleSort({ key: header.name, direction: sortDirection === \"ASC\" ? \"DESC\" : \"ASC\", inlineSort: header.inline_sort, dispatchEvent: props.dispatchEvent })}>\r\n                                    {header.label}\r\n                                </TableHeader>) : <TableHeader id={header} key={header}>{header}</TableHeader>\r\n                            })\r\n                            }\r\n                            <TableHeader id=\"Actions\" key=\"Actions\">Row Actions</TableHeader>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell>\r\n                                    <Button\r\n                                        kind=\"ghost\"\r\n                                        hasIconOnly\r\n                                        renderIcon={() => {\r\n                                            return (<SrsIcon type=\"fontawesome\" name=\"book-open\" size={20} color={props.theme == \"white\" || props.theme == \"g10\" ? \"black\" : \"white\"} />);\r\n                                        }}\r\n                                        iconDescription=\"Open Record\"\r\n                                        onClick={() => onRowClick(row)}\r\n                                    />\r\n                                </TableCell>\r\n                                {Object.keys(row)\r\n                                    .filter((key) => key !== 'id')\r\n                                    .map((key) => {\r\n                                        return <TableCell key={key}>{row[key]}</TableCell>;\r\n                                    })}\r\n                                <TableCell>\r\n                                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                                        <Button\r\n                                            kind=\"ghost\"\r\n                                            hasIconOnly\r\n                                            renderIcon={() => {\r\n                                                return (<SrsIcon type=\"carbon\" name={selectedRows?.some((r) => r.id === row.id) ? \"CircleFilled\" : \"CircleStroke\"} size={20} color={selectedRows?.some((r) => r.id === row.id) ? \"red\" : \"white\"} />);\r\n                                            }}\r\n                                            iconDescription={selectedRows?.some((r) => r.id === row.id) ? \"Selected\" : \"Click to select\"}\r\n                                            onClick={() => handleSelectRow(row)}\r\n                                        />\r\n                                        <Button\r\n                                            kind=\"ghost\"\r\n                                            hasIconOnly\r\n                                            renderIcon={() => {\r\n                                                return (<SrsIcon elementid={row.id} type=\"fontawesome\" name=\"book-open\" size={20} color={props.theme == \"white\" || props.theme == \"g10\" ? \"black\" : \"white\"} />);\r\n                                            }}\r\n                                            iconDescription=\"Open Record\"\r\n                                            onClick={() => onRowClick(row)}\r\n                                        />\r\n                                        <div style={{ verticalAlign: \"center\" }}>\r\n                                            <OverflowMenu ariaLabel=\"overflow-menu\" size=\"lg\">\r\n                                                <OverflowMenuItem itemText=\"Show Preview\" />\r\n                                                <OverflowMenuItem itemText=\"Delete Record\" isDelete />\r\n                                                <OverflowMenuItem itemText=\"Duplicate Record\" disabled />\r\n                                            </OverflowMenu>\r\n                                        </div>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"list_title\",\r\n    defaultValue: \"List\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"list_subtitle\",\r\n    defaultValue: \"Below are the rows in the list.\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"rows\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}, {\r\n    name: \"headers\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsDataTable), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/*\r\n    Example: <srs-icon name=\"Add\" description=\"Add an item\"/>\r\n*/\r\n\r\nconst dispatchedEvents = [EventAPI.ICON_CLICKED];\r\n\r\nconst SrsIcon = function (props, ref) {\r\n    const [iconInstance, setIconInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if(!props.type || props.type == \"carbon\") {\r\n            if(props.name) {\r\n                import('@carbon/icons-react').then((iconLibrary)=> {\r\n                    setIconInstance(iconLibrary[props.name]);\r\n                });\r\n            }\r\n        }else if(props.type == \"fontawesome\") {\r\n            import(\"@fortawesome/free-solid-svg-icons\").then((iconLibrary) => {\r\n                let iconNameParts = props.name.split(\"-\");\r\n                iconNameParts = iconNameParts.map((iconNamePart) => iconNamePart[0].toUpperCase() + iconNamePart.substring(1));\r\n                let moduleName = \"fa\" + iconNameParts.join(\"\");\r\n                setIconInstance(iconLibrary[moduleName]);\r\n                library.add(iconLibrary[moduleName]);\r\n            });            \r\n        }\r\n    }, [props.name, props.type]);\r\n    \r\n    let inlineStyles = {\r\n       color: props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\"),\r\n       \"--cds-icon-primary\": props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\")\r\n    };\r\n\r\n    const handleClick = (props) => {\r\n        return (evt) => {\r\n            props.dispatchEvent && props.dispatchEvent(EventAPI.ICON_CLICKED, {name: props.name, id: props.elementid})\r\n            if(props.onClick) {\r\n                props.onClick({name: props.name, id: props.elementid});\r\n            }\r\n        }\r\n    }\r\n\r\n    let iconEl = null;\r\n    if(!props.type || props.type == \"carbon\") {\r\n        let IconInstance = iconInstance;\r\n        iconEl = <IconInstance size={props.size || 24} onClick={handleClick(props)}/>;\r\n    }else if(props.type == \"fontawesome\") {\r\n        iconEl = <FontAwesomeIcon style={{cursor: \"pointer\", height: props.height || props.size, width: props.width || props.size, color: props.color}} \r\n                    onClick={handleClick(props)}\r\n                    title={props.description}\r\n                    icon={props.name}/>\r\n    }\r\n\r\n    return iconInstance? <div style={inlineStyles}>\r\n            { iconEl } \r\n        </div>: <div/>\r\n}\r\n\r\nconst styles = `\r\n\r\n`\r\nconst props = [{\r\n    name: \"name\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"description\",\r\n    defaultValue: true,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"size\",\r\n    defaultValue: 24,\r\n    type: \"number\"\r\n}, {\r\n    name: \"color\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsIcon), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\nexport default SrsIcon;","export default function _readOnlyError(name) {\n  throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\");\n}"],"names":["dispatchedEvents","SrsDataTable","props","ref","_this","headers","_useState","useState","rows","_useState2","_slicedToArray","setRows","_useState3","_useState4","selectedRows","setSelectedRows","_useState5","_useState6","sortBy","setSortBy","_useState7","_useState8","sortDirection","setSortDirection","_useState9","_useState10","filter","setFilter","onRowClick","evt","target","tagName","parentNode","selectedIndex","rowIndex","dispatchEvent","EventAPI","detail","index","handleRemoveSelectedRows","useEffect","ts","_jsx","_Fragment","children","_jsxs","TableContainer","title","list_title","description","list_subtitle","TableToolbar","TableToolbarContent","TableToolbarSearch","onChange","console","log","value","TableToolbarMenu","TableToolbarAction","onClick","isDelete","disabled","length","Table","size","useZebraStyles","type","event","TableHead","TableRow","TableHeader","id","map","header","_createElement","_objectSpread","isSortable","sortable","key","name","direction","inlineSort","sort","a","b","localeCompare","_readOnlyError","payload","handleSort","inline_sort","label","TableBody","row","TableCell","Button","kind","hasIconOnly","renderIcon","SrsIcon","color","theme","iconDescription","Object","keys","style","display","flexDirection","some","r","findIndex","concat","_toConsumableArray","handleSelectRow","elementid","verticalAlign","OverflowMenu","ariaLabel","OverflowMenuItem","itemText","styles","defaultValue","slots","WrappedComponent","wrapper","React","iconInstance","setIconInstance","then","iconLibrary","iconNameParts","split","moduleName","iconNamePart","toUpperCase","substring","join","library","inlineStyles","handleClick","iconEl","FontAwesomeIcon","cursor","height","width","icon","IconInstance","TypeError"],"sourceRoot":""}