{"version":3,"file":"static/js/basic-form-TextArea.497fa7ae.chunk.js","mappings":"i2CAKA,IAAMA,EAAmB,CAACC,EAAAA,EAAAA,kBAKpBC,EAAc,SAAUC,EAAOC,GACjC,IAA+DC,EAAAC,GAA3BC,EAAAA,EAAAA,UAASJ,EAAMK,OAAS,IAAG,GAAxDC,EAAUJ,EAAA,GAAEK,EAAaL,EAAA,IAChCM,EAAAA,EAAAA,YAAU,WACND,EAAcP,EAAMK,OACpBL,EAAMS,SAAST,EAAMK,MACzB,GAAG,CAACL,IAOJ,OACIU,EAAAA,cAAA,OAAKC,MANU,CACf,2BAA4B,SAC5B,6BAA8B,MAK1BD,EAAAA,cAACE,EAAAA,IAAQ,CACLC,GAAIb,EAAMc,UACVC,UAAWf,EAAMgB,MACjBC,KAAMjB,EAAMiB,KACZC,KAAMlB,EAAMkB,KACZb,MAAOC,EACPa,SAAUnB,EAAMmB,SAChBC,YAAapB,EAAMoB,YACnBC,SAAUrB,EAAMsB,SAChBC,OAAQ,SAACC,GACe,IAADC,EAAhBzB,EAAM0B,UACL1B,EAAM0B,UAAmB,QAAVD,EAAAD,EAAIG,cAAM,IAAAF,OAAA,EAAVA,EAAYpB,QAAS,GAE5C,EACAqB,SAAU,SAACF,GAAS,IAADI,EAAAC,EAAAC,EACfvB,GAAwB,QAAVqB,EAAAJ,EAAIG,cAAM,IAAAC,OAAA,EAAVA,EAAYvB,QAAS,IACnCL,EAAM+B,cAAcjC,EAAAA,EAAAA,iBAA2B,CAAEkC,QAAS,CAAC3B,OAAiB,QAAVwB,EAAAL,EAAIG,cAAM,IAAAE,OAAA,EAAVA,EAAYxB,QAAS,GAAIQ,GAAIb,EAAMc,aACrGd,EAAMS,UAAmB,QAAVqB,EAAAN,EAAIG,cAAM,IAAAG,OAAA,EAAVA,EAAYzB,QAAS,GACxC,IAGhB,EAEM4B,EAAM,sRAYNjC,EAAQ,CAAC,CACXkC,KAAM,QACNC,aAAc,QACdC,KAAM,UACP,CACCF,KAAM,OACNC,aAAc,EACdC,KAAM,UACP,CACCF,KAAM,OACNC,aAAc,IACdC,KAAM,UACP,CACCF,KAAM,QACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,WACNC,cAAc,EACdC,KAAM,WACP,CACCF,KAAM,cACNC,aAAc,iBACdC,KAAM,UACP,CACCF,KAAM,WACNC,cAAc,EACdC,KAAM,YAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQ7B,EAAAA,WAAiBX,GAAcC,E","sources":["components/basic/form/TextArea.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport { TextArea  } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.TEXTAREA_CHANGED];\r\n\r\n/*\r\n    Example: <srs-textarea label=\"Label\" rows=\"3\" cols=\"150\"/>\r\n*/\r\nconst SrsTextArea = function (props, ref) {\r\n    const [inputValue, setInputValue] = useState(props.value || \"\");\r\n    useEffect(() => {\r\n        setInputValue(props.value);\r\n        props.setValue(props.value);\r\n    }, [props]);\r\n\r\n    let inlineStyles = {\r\n        \"--cds-label-01-font-size\": \"0.9rem\",\r\n        \"--cds-label-01-font-weight\": 800,\r\n    };\r\n\r\n    return (\r\n        <div style={inlineStyles}>\r\n            <TextArea\r\n                id={props.elementid}\r\n                labelText={props.label}\r\n                rows={props.rows}\r\n                cols={props.cols}\r\n                value={inputValue}\r\n                disabled={props.disabled}\r\n                placeholder={props.placeholder}\r\n                readOnly={props.readonly}\r\n                onBlur={(evt) => {\r\n                    if(props.onChange) {\r\n                        props.onChange(evt.target?.value || \"\");     \r\n                    }\r\n                }}\r\n                onChange={(evt) => {\r\n                    setInputValue(evt.target?.value || \"\");\r\n                    props.dispatchEvent(EventAPI.TEXTAREA_CHANGED, { payload: {value: evt.target?.value || \"\", id: props.elementid} });\r\n                    props.setValue(evt.target?.value || \"\");\r\n                }}/>\r\n        </div>\r\n      );\r\n}\r\n\r\nconst styles = `\r\n    .cds--text-area {\r\n        border: 1px solid lightgray !important;\r\n        border-radius: 5px;\r\n    }\r\n\r\n    .cds--text-area:focus, .cds--text-area:active {\r\n        outline: 0px !important;\r\n        border: 2px solid !important;\r\n        border-radius: 5px;\r\n    } \r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"Label\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"rows\",\r\n    defaultValue: 4,\r\n    type: \"number\"\r\n}, {\r\n    name: \"cols\",\r\n    defaultValue: 100,\r\n    type: \"number\"\r\n}, {\r\n    name: \"value\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"disabled\",\r\n    defaultValue: false,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"placeholder\",\r\n    defaultValue: \"Enter value...\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"readonly\",\r\n    defaultValue: false,\r\n    type: \"boolean\"\r\n}];\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsTextArea), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsTextArea","props","ref","_useState2","_slicedToArray","useState","value","inputValue","setInputValue","useEffect","setValue","React","style","TextArea","id","elementid","labelText","label","rows","cols","disabled","placeholder","readOnly","readonly","onBlur","evt","_evt$target","onChange","target","_evt$target2","_evt$target3","_evt$target4","dispatchEvent","payload","styles","name","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}