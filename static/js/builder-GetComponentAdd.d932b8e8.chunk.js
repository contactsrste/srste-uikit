"use strict";(self.webpackChunksrste=self.webpackChunksrste||[]).push([[9977],{74743:function(e,n,t){function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}t.r(n),t.d(n,{getComponentAddData:function(){return r}});var a=(0,t(37661).getComponentMetadata)(),r=function(){var e='(async function() {\n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;  \n        let misc = api.eventPayload?.misc || {}; \n        let selectedHandlerName = misc.handlerName;\n        let selectedActionHandler = ctx.actionHandlers.filter((item) => item.actionHandlerName == selectedHandlerName);\n            \n        if(elementId == "actionHandlerType") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerType"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }else if(elementId == "actionHandlerScript") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerScript"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }else if(elementId == "actionHandlerName") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerName"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }else if(elementId == "actionHandlerEventName") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerEventName"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }else if(elementId == "actionHandlerSourceElement") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerSourceElementId"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }else if(elementId == "actionHandlerContextPath") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerContextPath"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }else if(elementId == "actionHandlerContextValueKey") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerContextValueKey"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }else if(elementId == "actionHandlerTargetEventName") {\n            if(selectedActionHandler && selectedActionHandler.length > 0) {\n                selectedActionHandler[0]["actionHandlerTargetEventName"] = api.eventPayload?.payload?.value;\n            }\n            return {context: ctx};\n        }\n    })',n={isPropertyLinkingMode:function(e){return"property_linking"==e.context.selectedMode},getContextTree:function(e){return function e(n){var t=[];for(var a in n)if(n.hasOwnProperty(a)){var r=n[a],i="Node ".concat(a),d="object"==o(r)?e(r):[];t.push({name:a,label:i,children:d})}return t}(e.context||{})},getSelectedPath:function(e){var n,t=(null===(n=e.context)||void 0===n?void 0:n.selectedDynamicPropValue)||"",o="";return t&&t.indexOf("api.context.")>-1&&(o=t.split("api.context.")[1]),o},getComponentTypes:function(e){var n=e.context.componentMetaData||{},t=[];return n&&Object.keys(n).length>0&&Object.keys(n).map((function(e){t.push({label:e,value:e})})),t},getComponentProperties:function(e){var n,t=e.context.componentMetaData||{},o=(null===(n=t[e.context.selectedComponentType||Object.keys(t)[0]])||void 0===n?void 0:n.props)||[],a=[];return o&&o.length>0&&o.map((function(n){var t,o,r,i;a.push({propName:n.name,propType:n.type,propDefaultValue:(null===(t=e.context.componentPropData)||void 0===t||null===(o=t[n.name])||void 0===o?void 0:o.defaultValue)||"",propDynamicValue:(null===(r=e.context.componentPropData)||void 0===r||null===(i=r[n.name])||void 0===i?void 0:i.overrideValue)||"",opened:e.context.selectedPropertyToEdit==n.name})})),a},getComponentContents:function(e){return{contents:e.context.componentDataToPreview,context:{},functions:{},designtime:!1}},getActionHandlers:function(e){return e.context.actionHandlers||[]}};return{contents:[{name:"ComponentAddTopContainer",elementId:"ComponentAddTopContainer",tag:"mui-box",props:{sx:{height:"100vh",width:"calc(100% - 50px)",padding:"20px"}},children:[{name:"ComponentAddGridContainer",elementId:"ComponentAddGridContainer",tag:"mui-grid",props:{container:!0},children:[{name:"ComponentAddGridContainerItem1",elementId:"ComponentAddGridContainerItem1",tag:"mui-grid",props:{item:!0,md:6,sx:{backgroundColor:"var(--cds-background-hover)",minHeight:"300px",height:"calc(100vh - 10rem)",maxHeight:"calc(100vh - 10rem)",overflow:"hidden",width:"50rem",padding:"20px",top:"20%"}},children:[{name:"ComponentAddGridContainerItem1Content1",elementId:"ComponentAddGridContainerItem1Content1",tag:"mui-auto-complete",props:{label:"Component Type",displayEmpty:!0,options:[],sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%",padding:"5px"}},overrides:{options:"[[api.helper.getComponentTypes(api)]]",selected:"[[api.context.selectedComponentType]]"},children:[]},{name:"ComponentAddFocussedComponentName",elementId:"ComponentAddFocussedComponentName",tag:"mui-text-field",props:{label:"Focused Element Name",variant:"outlined",sx:{color:"var(--cds-text-secondary)",width:"100%",padding:"5px"}},overrides:{value:"[[api.context.selectedComponentName]]"}},{name:"ComponentAddComponentName",elementId:"ComponentAddComponentName",tag:"mui-text-field",props:{label:"Name",variant:"outlined",sx:{color:"var(--cds-text-secondary)",width:"100%",padding:"5px"}}},{name:"ComponentAddComponentPosition",elementId:"ComponentAddComponentPosition",tag:"mui-auto-complete",props:{label:"Position",displayEmpty:!0,options:[{label:"Before Element",value:"before"},{label:"After Element",value:"after"},{label:"Inside Element",value:"inside"}],selected:"after",sx:{color:"var(--cds-text-secondary)",width:"100%",padding:"5px"}}},{name:"ComponentAddConfigurationTabs",elementId:"ComponentAddConfigurationTabs",tag:"mui-tabs",props:{sx:{color:"var(--cds-background-inverse)"}},children:[{name:"ComponentAddPropertiesTab",elmentId:"ComponentAddPropertiesTab",tag:"mui-tab",props:{label:"Properties",value:"properties"},children:[{name:"ComponentAddGridContainerItem1PropsBox",elementId:"ComponentAddGridContainerItem1PropsBox",tag:"mui-box",props:{sx:{width:"100%"}},overrides:{visible:"[[!api.helper.isPropertyLinkingMode(api)]]"},children:[{name:"ComponentAddGridContainerItem1Content2",elementId:"ComponentAddGridContainerItem1Content2",tag:"mui-typography",props:{text:"Properties",sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%",paddingTop:"10px",paddingLeft:"5px"}}},{name:"ComponentAddGridContainerItem1Content3",elementId:"ComponentAddGridContainerItem1Content3",tag:"mui-box",props:{sx:{width:"100%",padding:"0px 10px"}},children:[{name:"propertyRepeater",elementId:"propertyRepeater",tag:"srs-repeater",props:{items:[],sx:{overflow:"auto",display:"flex",height:"calc(100vh - 25rem)",flexDirection:"column"}},overrides:{items:"[[api.helper.getComponentProperties(api)]]"},children:[{name:"item2",tag:"mui-accordion",props:{expanded:!1,sx:{width:"100%"}},overrides:{expanded:"[[api.context.opened]]"},children:[{name:"summary2",tag:"mui-box",props:{slotname:"accordion_summary"},children:[{name:"summaryText2",tag:"mui-typography",props:{text:"Property 2",sx:{color:"var(--cds-text-secondary)"}},overrides:{text:"[[api.context.propName]]"}}]},{name:"details2",tag:"mui-box",props:{slotname:"accordion_details",sx:{width:"100%"}},children:[{name:"details21",tag:"mui-grid",props:{container:!0,sx:{width:"100%"}},children:[{name:"details211",tag:"mui-grid",props:{item:!0,md:12},children:[{name:"propertyDefaultValue",tag:"mui-text-field",props:{label:"Default Value",variant:"outlined",sx:{color:"var(--cds-text-secondary)",width:"100%",padding:"5px"}},overrides:{value:"[[api.context.propDefaultValue]]",misc:'[[{"propName": api.context.propName}]]'}}]},{name:"details212",tag:"mui-grid",props:{item:!0,md:12},children:[{name:"details2121",tag:"srs-container",props:{styles:{display:"flex",flexDirection:"row",justifyContent:"flex-start",width:"100%"}},children:[{name:"propertyOverridetValue",tag:"mui-text-field",props:{label:"Dynamic Expression",variant:"outlined",fullWidth:!0,style:"width: 100%;",sx:{width:"100%",padding:"5px"}},overrides:{value:"[[api.context.propDynamicValue]]",misc:'[[{"propName": api.context.propName}]]'}},{name:"addLinkBtn",elementId:"addLinkBtn",tag:"mui-icon-button",props:{icon:"AddLink"},overrides:{misc:'[[{"propName": api.context.propName}]]'}},{name:"removeLinkBtn",elementId:"removeLinkBtn",tag:"mui-icon-button",props:{icon:"LinkOff"},overrides:{misc:'[[{"propName": api.context.propName}]]'}}]}]}]}]}]}]}]}]},{name:"ComponentAddGridContainerItem1PropLinkingBox",elementId:"ComponentAddGridContainerItem1PropLinkingBox",tag:"mui-box",props:{sx:{width:"100%",padding:"10px"}},overrides:{visible:"[[api.helper.isPropertyLinkingMode(api)]]"},children:[{name:"SelectedPropertyToUpdateTitle",elementId:"SelectedPropertyToUpdateTitle",tag:"mui-text-field",props:{label:"Property Name",variant:"outlined",disabled:!0},overrides:{value:"[[api.context.selectedPropertyToEdit]]"}},{name:"SelectedPropertyToUpdate",elementId:"SelectedPropertyToUpdate",tag:"mui-text-field",props:{label:"Dynamic Expression",variant:"outlined",disabled:!0,sx:{width:"100%",marginTop:"5px"}},overrides:{value:"[[api.context.selectedDynamicPropValue]]"}},{name:"SelectedPropertyDynamicExpressionMode",elementId:"SelectedPropertyDynamicExpressionMode",tag:"mui-auto-complete",props:{label:"Link Type",displayEmpty:!0,options:[{label:"Client Store",value:"Client Store"},{label:"Client Functions",value:"Client Functions"}],selected:"Client Store",sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%",marginTop:"5px"}}},{name:"SelectedPropertyDynamicExpressionClientStoreMode",elmentId:"SelectedPropertyDynamicExpressionClientStoreMode",tag:"mui-box",props:{sx:{padding:"20px",border:"1px solid var(--cds-background-hover)",display:"flex",flexDirection:"column",height:"calc(100vh - 40rem)",overflow:"auto"}},overrides:{visible:'[[api.helper.isPropertyLinkingMode(api) && api.context.selectedLinkType == "Client Store"]]'},children:[{name:"ComponentAddGridContainerItem1PropLinkingContent2",elementId:"ComponentAddGridContainerItem1PropLinkingContent2",tag:"mui-typography",props:{text:"Choose Path",sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%",paddingTop:"10px",paddingLeft:"5px"}}},{name:"ComponentAddGridContainerItem1PropLinkingContent3",elementId:"ComponentAddGridContainerItem1PropLinkingContent3",tag:"mui-box",props:{sx:{width:"100%"}},children:[{name:"contextTree",tag:"srs-contenttree",props:{expanded:!0,sx:{width:"100%"},items:[],actionicons:[],inlinestyles:{maxHeight:"500px",overflow:"auto"}},overrides:{items:"[[api.helper.getContextTree(api)]]",selectedpath:"[[api.helper.getSelectedPath(api)]]"},children:[]}]},{name:"ComponentAddPropLinkingClientStoreAction",elementId:"ComponentAddPropLinkingClientStoreAction",tag:"mui-button",props:{label:"Apply",style:"flex-direction: row-reverse;display: flex;",sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)"}}}]},{name:"SelectedPropertyDynamicExpressionClientFunctionsMode",elmentId:"SelectedPropertyDynamicExpressionClientFunctionsMode",tag:"mui-box",props:{sx:{padding:"20px",border:"1px solid var(--cds-background-hover)",display:"flex",flexDirection:"column",height:"calc(100vh - 40rem)",overflow:"auto"}},overrides:{visible:'[[api.helper.isPropertyLinkingMode(api) && api.context.selectedLinkType == "Client Functions"]]'},children:[{name:"ComponentAddGridContainerItem1PropLinkingFunctionContents",elementId:"ComponentAddGridContainerItem1PropLinkingFunctionContents",tag:"mui-typography",props:{text:"Choose Function",sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%",paddingTop:"10px",paddingLeft:"5px"}}},{name:"ComponentAddPropLinkingFunctionList",elementId:"ComponentAddPropLinkingFunctionList",tag:"mui-auto-complete",props:{label:"Function",displayEmpty:!0,options:[{label:"Function1",value:"function1"},{label:"Function2",value:"function2"}],sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%"}},children:[]},{name:"ComponentAddPropLinkingFunctionAction",elementId:"ComponentAddPropLinkingFunctionAction",tag:"mui-button",props:{label:"Apply",style:"flex-direction: row-reverse;display: flex;",sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)"}}}]}]}]},{name:"ComponentAddEventsTab",elmentId:"ComponentAddEventsTab",tag:"mui-tab",props:{label:"Action Handlers",value:"events"},children:[{name:"ComponentAddEventsTabContentContainer1",elementId:"ComponentAddEventsTabContentContainer1",tag:"mui-box",props:{sx:{width:"100%",padding:"0px 10px"}},children:[{name:"ComponentAddEventsTabContentContainer2",elementId:"ComponentAddEventsTabContentContainer2",tag:"mui-box",props:{sx:{padding:"10px",display:"flex",justifyContent:"space-between",backgroundColor:"var(--cds-background-hover)"}},children:[{name:"ComponentAddEventsTabHeader",elementId:"ComponentAddEventsTabHeader",tag:"mui-typography",props:{text:"Action Handlers",sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%",paddingTop:"10px",paddingLeft:"5px"}}},{name:"ComponentAddnewActionHandlerContents",elementId:"ComponentAddnewActionHandlerContents",tag:"mui-box",props:{sx:{backgroundColor:"var(--cds-background-hover)",color:"var(--cds-text-secondary)",width:"100%",paddingTop:"10px",paddingLeft:"5px",display:"flex",flexDirection:"row"}},children:[{name:"ComponentAddnewActionHandlerName",elementId:"ComponentAddnewActionHandlerName",tag:"mui-text-field",props:{label:"Handler Name",variant:"outlined",actionhandlers:[{name:"ComponentAddupdateNewActionHandlerName",type:"UPDATE_CONTEXT",eventName:"MuiTextField#changed",contextPath:"newActionHandlerName",contextValueKey:"value"}]},overrides:{value:"[[api.context.newActionHandlerName]]"}},{name:"ComponentAddnewActionHandlerEventName",elementId:"ComponentAddnewActionHandlerEventName",tag:"mui-text-field",props:{label:"Event Name",variant:"outlined",actionhandlers:[{name:"ComponentAddupdateNewActionHandlerEventName",type:"UPDATE_CONTEXT",eventName:"MuiTextField#changed",contextPath:"newActionHandlerEventName",contextValueKey:"value"}]},overrides:{value:"[[api.context.newActionHandlerEventName]]"}},{name:"ComponentAddnewActionHandlerPopoverActions",elementId:"ComponentAddnewActionHandlerPopoverActions",tag:"mui-box",props:{sx:{display:"flex",flexDirection:"row",justifyContent:"flex-end",padding:"5px"}},children:[{name:"newActionHandlerActionApply",elementId:"newActionHandlerActionApply",tag:"mui-button",props:{label:"ADD",actionhandlers:[{name:"createNewActionHandler",type:"relay",eventName:"SrsMuiButton#clicked",source_elementid:"newActionHandlerActionApply",target_eventname:"CreateNewActionHandlerForComponentAdd"}]}}]}]}]},{name:"eventHandlerRepeater",elementId:"eventHandlerRepeater",tag:"srs-repeater",props:{items:[],sx:{overflow:"auto",display:"flex",height:"calc(100vh - 25rem)",flexDirection:"column"}},overrides:{items:"[[api.helper.getActionHandlers(api)]]"},children:[{name:"eventHandlerAccordion",elementId:"eventHandlerAccordion",tag:"mui-accordion",props:{expanded:!1,sx:{width:"100%"}},overrides:{expanded:"[[api.context.actionHandlerOpened]]"},children:[{name:"eventHandlerBox",elementId:"eventHandlerBox",tag:"mui-box",props:{slotname:"accordion_summary"},children:[{name:"actionHandlerSummary",elementId:"actionHandlerSummary",tag:"mui-typography",props:{text:"Action Handler 1",sx:{color:"var(--cds-text-secondary)"}},overrides:{text:"[[api.context.actionHandlerName]]"}}]},{name:"actionHandlerDetailBox",elementId:"actionHandlerDetailBox",tag:"mui-box",props:{slotname:"accordion_details",sx:{width:"100%"}},children:[{name:"actionHandlerGrid",elementId:"actionHandlerGrid",tag:"mui-grid",props:{container:!0,sx:{width:"100%"}},children:[{name:"actionHandlerGridItem1",elementId:"actionHandlerGridItem1",tag:"mui-grid",props:{item:!0,md:12},children:[{name:"actionHandlerName",elementId:"actionHandlerName",tag:"mui-text-field",props:{label:"Name",variant:"outlined",sx:{color:"var(--cds-text-secondary)",width:"100%",martinTop:"5px"},actionhandlers:[{name:"actionHandlerNameChanged",eventName:"MuiTextField#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{value:"[[api.context.actionHandlerName]]",misc:'[[{"handlerName": api.context.actionHandlerName}]]'}}]},{name:"actionHandlerGridItem3",elementId:"actionHandlerGridItem3",tag:"mui-grid",props:{item:!0,md:12},children:[{name:"actionHandlerGridItem2Container",elementId:"actionHandlerGridItem2Container",tag:"srs-container",props:{styles:{display:"flex",flexDirection:"column",justifyContent:"flex-start",width:"100%"}},children:[{name:"actionHandlerEventName",elementId:"actionHandlerEventName",tag:"mui-text-field",props:{label:"Event Name",variant:"outlined",fullWidth:!0,style:"width: 100%;",sx:{width:"100%",marginTop:"5px"},actionhandlers:[{name:"actionHandlerEventNameChanged",eventName:"MuiTextField#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{value:"[[api.context.actionHandlerEventName]]",misc:'[[{"handlerName": api.context.actionHandlerName}]]'}},{name:"actionHandlerType",elementId:"actionHandlerType",tag:"mui-auto-complete",props:{options:[{label:"UPDATE_CONTEXT",value:"UPDATE_CONTEXT"},{label:"Script",value:"script"},{label:"Relay",value:"relay"}],selected:"script",sx:{marginTop:"5px"},actionhandlers:[{name:"actionHandlerTypeChanged",eventName:"SrsMuiSelect#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{selected:"[[api.context.actionHandlerType]]",misc:'[[{"handlerName": api.context.actionHandlerName}]]'}},{name:"actionHandlerScript",elementId:"actionHandlerScript",tag:"srs-codeeditor",props:{label:"Script",language:"javascript",height:"calc(100vh - 60rem)",width:"40vw",actionhandlers:[{name:"actionHandlerScriptChanged",eventName:"SrsCodeEditor#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{visible:'[[api.context.actionHandlerType == "script"]]',misc:'[[{"handlerName": api.context.actionHandlerName}]]',value:"[[api.context.actionHandlerScript]]"},children:[]},{name:"actionHandlerSourceElement",elementId:"actionHandlerSourceElement",tag:"mui-text-field",props:{label:"Source Element Id",variant:"outlined",fullWidth:!0,style:"width: 100%;",sx:{width:"100%",marginTop:"5px"},actionhandlers:[{name:"actionHandlerSourceElementChanged",eventName:"MuiTextField#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{visible:'[[api.context.actionHandlerType == "relay"]]',misc:'[[{"handlerName": api.context.actionHandlerName}]]',value:"[[api.context.actionHandlerSourceElementId]]"},children:[]},{name:"actionHandlerTargetEventName",elementId:"actionHandlerTargetEventName",tag:"mui-text-field",props:{label:"Target Event Name",variant:"outlined",fullWidth:!0,style:"width: 100%;",sx:{width:"100%",marginTop:"5px"},actionhandlers:[{name:"actionHandlerTargetEventChanged",eventName:"MuiTextField#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{visible:'[[api.context.actionHandlerType == "relay"]]',misc:'[[{"handlerName": api.context.actionHandlerName}]]',value:"[[api.context.actionHandlerTargetEventName]]"},children:[]},{name:"actionHandlerContextPath",elementId:"actionHandlerContextPath",tag:"mui-text-field",props:{label:"Context Path",variant:"outlined",fullWidth:!0,style:"width: 100%;",sx:{width:"100%",marginTop:"5px"},actionhandlers:[{name:"actionHandlerContextPathChanged",eventName:"MuiTextField#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{visible:'[[api.context.actionHandlerType == "UPDATE_CONTEXT"]]',misc:'[[{"handlerName": api.context.actionHandlerName}]]',value:"[[api.context.actionHandlerContextPath]]"},children:[]},{name:"actionHandlerContextValueKey",elementId:"actionHandlerContextValueKey",tag:"mui-text-field",props:{label:"Target Event Name",variant:"outlined",fullWidth:!0,style:"width: 100%;",sx:{width:"100%",marginTop:"5px"},actionhandlers:[{name:"actionHandlerContextValueKeyChanged",eventName:"MuiTextField#changed",type:"script",script:e,stopPropagation:!0}]},overrides:{visible:'[[api.context.actionHandlerType == "UPDATE_CONTEXT"]]',misc:'[[{"handlerName": api.context.actionHandlerName}]]',value:"[[api.context.actionHandlerContextValueKey]]"},children:[]}]}]}]}]}]}]}]}]}]}]},{name:"componentPreviewContainer",elementId:"componentPreviewContainer",tag:"mui-grid",props:{item:!0,md:6,sx:{backgroundColor:"var(--cds-background-hover)",minHeight:"300px",height:"calc(100vh - 10rem)",maxHeight:"calc(100vh - 10rem)",overflow:"hidden",padding:"20px"}},children:[{name:"componentPreviewContainerActions",elementId:"componentPreviewContainerActions",tag:"mui-box",props:{sx:{display:"flex",flexDirection:"row",marginLeft:"90%",width:"100%"}},children:[{name:"componentAddPreviewActionRelay",elementId:"componentAddPreviewActionRelay",tag:"srs-relay",props:{relaylist:[{source_event:"IconButton#clicked",source_element:"componentAddPreviewAction",target:"REFRESH_COMPONENT_ADD_PREVIEW"}]},children:[{name:"componentAddPreviewAction",elementId:"componentAddPreviewAction",tag:"mui-icon-button",props:{icon:"PlayArrow"}}]},{name:"componentAddPreviewApplyRelay",elementId:"componentAddPreviewApplyRelay",tag:"srs-relay",props:{relaylist:[{source_event:"IconButton#clicked",source_element:"componentAddPreviewApply",target:"APPLY_COMPONENT_ADD_DATA"}]},children:[{name:"componentAddPreviewApply",elementId:"componentAddPreviewApply",tag:"mui-icon-button",props:{icon:"DoneAll"}}]}]},{name:"componentPreviewContainer2",elementId:"componentPreviewContainer2",tag:"mui-box",props:{sx:{minHeight:"300px",height:"calc(100vh - 20rem)",maxHeight:"calc(100vh - 20rem)",overflow:"hidden",boxShadow:"-2px 2px 7px 0px grey",padding:"10px",marginLeft:"10px",justifyContent:"flex-start"}},children:[{name:"componentPreviewContentRenderer",tag:"srs-contentrenderer",props:{styles:{minHeight:"300px",height:"calc(100vh - 20rem)",maxHeight:"calc(100vh - 20rem)",overflow:"auto"}},overrides:{overrides:"[[api.helper.getComponentContents(api)]]",ts:"1683941616850"},children:[]}]}]}]}]},{name:"ComponentAddController",elementId:"ComponentAddController",tag:"srs-controller",props:{handlers:[{name:"linkTypeChanged",eventName:"SrsMuiSelect#changed",type:"script",script:'(async function() {\n        \n        let elementId = api.eventPayload?.payload?.id;   \n        let ctx = api.context || {}; \n        if(elementId == "SelectedPropertyDynamicExpressionMode") {    \n            ctx.selectedLinkType = api.eventPayload?.payload?.value || "Client Store";\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"componentPositionToAddChanged",eventName:"SrsMuiSelect#changed",type:"script",script:'(async function() {\n        \n        let elementId = api.eventPayload?.payload?.id;   \n        let ctx = api.context || {}; \n        if(elementId == "ComponentAddComponentPosition") {    \n            ctx.selectedComponentPosition = api.eventPayload?.payload?.value || "after";\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"componentTypeChanged",eventName:"SrsMuiSelect#changed",type:"script",script:'(async function() {\n        \n        let elementId = api.eventPayload?.payload?.id;   \n        let ctx = api.context || {}; \n        if(elementId == "ComponentAddGridContainerItem1Content1") {    \n            ctx.selectedComponentType =  api.eventPayload?.payload?.value;\n            ctx.componentPropData = {};\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"propDynamicLinkingFunctionChanged",eventName:"SrsMuiSelect#changed",type:"script",script:'(async function() {\n        \n        let elementId = api.eventPayload?.payload?.id;   \n        let ctx = api.context || {}; \n        if(elementId == "ComponentAddPropLinkingFunctionList") {    \n            ctx.selectedDynamicPropValue =  api.eventPayload?.payload?.value;\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"applyClicked",eventName:"SrsMuiButton#clicked",type:"script",script:'(async function() {\n        \n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;   \n        if(elementId == "ComponentAddPropLinkingClientStoreAction") {\n            ctx.selectedMode = "component_props";\n            let componentPropData = ctx.componentPropData || {};\n            componentPropData[ctx.selectedPropertyToEdit] = componentPropData[ctx.selectedPropertyToEdit] || {};\n            componentPropData[ctx.selectedPropertyToEdit]["overrideValue"] = ctx.selectedDynamicPropValue || "";\n            ctx.componentPropData = componentPropData;\n            return {context: ctx};\n        }else if(elementId == "ComponentAddPropLinkingFunctionAction") {\n            ctx.selectedMode = "component_props";\n            let componentPropData = ctx.componentPropData || {};\n            componentPropData[ctx.selectedPropertyToEdit] = componentPropData[ctx.selectedPropertyToEdit] || {};\n            componentPropData[ctx.selectedPropertyToEdit]["overrideValue"] = ctx.selectedDynamicPropValue || "";\n            ctx.componentPropData = componentPropData;\n            return {context: ctx};\n        }\n\n        // if(elementId == "SelectedPropertyDynamicExpressionMode") {    \n        //     ctx.selectedLinkType =  api.eventPayload?.payload?.value || "Client Store";\n        //     return {context: ctx};\n        // }\n    })',stopPropagation:!0},{name:"handlePropertyLinkUnLink",eventName:"IconButton#clicked",type:"script",script:'(async function() {\n        \n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;   \n        if(elementId == "addLinkBtn") {\n            let misc = api.eventPayload?.misc || {};\n            let selectedPropName = misc.propName;\n            ctx.selectedPropertyToEdit = selectedPropName;\n            ctx.selectedMode = "property_linking";\n            return {context: ctx};\n        }else if(elementId == "removeLinkBtn") {\n            let misc = api.eventPayload?.payload?.misc || {};\n            let selectedPropName = misc.propName;\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"handlePropertyDefaultValueChanged",eventName:"MuiTextField#changed",type:"script",script:'(async function() {\n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;   \n        if(elementId == "propertyDefaultValue") {\n            let misc = api.eventPayload?.misc || {};\n            let selectedPropName = misc.propName;\n            let componentPropData = ctx.componentPropData || {};\n            componentPropData[selectedPropName] = componentPropData[selectedPropName] || {};\n            componentPropData[selectedPropName]["defaultValue"] = api.eventPayload?.payload?.value || "";\n            ctx.componentPropData = componentPropData;\n\n            let componentProps = {};\n            if(ctx.componentPropData && Object.keys(ctx.componentPropData).length > 0) {\n                Object.keys(ctx.componentPropData).map((propName) => {\n                    componentProps[propName] = ctx.componentPropData[propName]?.defaultValue;\n                })\n            }\n            if(ctx.selectedComponentName && ctx.selectedComponentType) {\n                ctx.componentDataToPreview = [{\n                    "name": ctx.selectedComponentName + "_1",\n                    "elementId": ctx.selectedComponentName + "_1",\n                    "tag": ctx.selectedComponentType,\n                    "props": componentProps\n                }];\n            }\n\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"handleComponentNameToAddChanged",eventName:"MuiTextField#changed",type:"script",script:'(async function() {\n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;   \n        if(elementId == "ComponentAddComponentName") {\n            ctx.componentNameToAdd = api.eventPayload?.payload?.value || "";\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"handlePropertyOverrideValueChanged",eventName:"MuiTextField#changed",type:"script",script:'(async function() {\n        \n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;   \n        if(elementId == "propertyOverridetValue") {\n            let misc = api.eventPayload?.misc || {};\n            let selectedPropName = misc.propName;\n            let componentPropData = ctx.componentPropData || {};\n            componentPropData[selectedPropName] = componentPropData[selectedPropName] || {};\n            componentPropData[selectedPropName]["overrideValue"] = api.eventPayload?.payload?.value || "";\n            ctx.componentPropData = componentPropData;\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"setPropertyDynamicValue",eventName:"SrsContentTree#clicked",type:"script",script:'(async function() {\n        \n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;   \n        if(elementId == "contextTree") {\n            let nodeId = api.eventPayload?.payload?.nodeid;\n            let nodePath = api.eventPayload?.payload?.nodepath;\n            ctx.selectedDynamicPropValue = nodePath? "api.context." + nodePath + "." + nodeId: "api.context." + nodeId;\n            return {context: ctx};\n        }\n    })',stopPropagation:!0},{name:"refreshComponentDataForPreview",eventName:"REFRESH_COMPONENT_ADD_PREVIEW",type:"script",script:'(async function() {\n        debugger;\n        let ctx = api.context || {};\n        let componentProps = {};\n        if(ctx.componentPropData && Object.keys(ctx.componentPropData).length > 0) {\n            Object.keys(ctx.componentPropData).map((propName) => {\n                componentProps[propName] = ctx.componentPropData[propName]?.defaultValue;\n            })\n        }\n        if(ctx.selectedComponentName && ctx.selectedComponentType) {\n            ctx.componentDataToPreview = [{\n                "name": ctx.selectedComponentName + "_1",\n                "elementId": ctx.selectedComponentName + "_1",\n                "tag": ctx.selectedComponentType,\n                "props": componentProps\n            }];\n        }\n        return {context: ctx};\n    })',stopPropagation:!0},{name:"applyComponentAddData",eventName:"APPLY_COMPONENT_ADD_DATA",type:"script",script:'(async function() {\n        debugger;\n        let ctx = api.context || {};\n        let componentProps = {};\n        let componentOverrideProps = {};\n        if(ctx.componentPropData && Object.keys(ctx.componentPropData).length > 0) {\n            Object.keys(ctx.componentPropData).map((propName) => {\n                componentProps[propName] = ctx.componentPropData[propName]?.defaultValue;\n            })\n        }\n        if(ctx.componentPropData && Object.keys(ctx.componentPropData).length > 0) {\n            Object.keys(ctx.componentPropData).map((propName) => {\n                if(ctx.componentPropData[propName]?.overrideValue) {\n                    componentOverrideProps[propName] = ctx.componentPropData[propName]?.overrideValue;\n                }\n            })\n        }\n        if(ctx.selectedComponentName && ctx.componentNameToAdd && ctx.selectedComponentType) {\n            let actionHandlers = ctx.actionHandlers || []\n            let transformedActionHandlers = [];\n            \n            actionHandlers.map((actionHandler) => {\n                let transformedActionHandler = {};\n                switch(actionHandler.actionHandlerType) {\n                    case "script": \n                        transformedActionHandler.script = actionHandler.actionHandlerScript;\n                        break;\n                    case "UPDATE_CONTEXT": \n                        transformedActionHandler.contextValueKey = actionHandler.actionHandlerContextValueKey;\n                        transformedActionHandler.contextPath = actionHandler.actionHandlerContextPath;\n                        transformedActionHandler.source_elementid = actionHandler.actionHandlerSourceElement;\n                        break;\n                    case "relay":\n                        transformedActionHandler.source_elementid = actionHandler.actionHandlerSourceElement;\n                        transformedActionHandler.target_eventname = actionHandler.actionHandlerTargetEventName;\n                        transformedActionHandler.add_to_payload = actionHandler.add_to_payload;\n                        break;\n                }\n                transformedActionHandlers.push(transformedActionHandler);\n            });\n\n            let componentDataToUpdate = {\n                "name": ctx.componentNameToAdd,\n                "elementId": ctx.componentNameToAdd,\n                "tag": ctx.selectedComponentType,\n                "props": componentProps,\n                "overrides": componentOverrideProps,\n                "actionhandlers": transformedActionHandlers  \n            };\n            api.dispatchEvent("ADD_COMPONENT_DATA", {elementId: ctx.selectedComponentName, position: ctx.selectedComponentPosition, payload: componentDataToUpdate})\n        }\n    })',stopPropagation:!0},{name:"createNewActionHandlerForComponentAdd",eventName:"createNewActionHandlerForComponentAdd",type:"script",script:'(async function() {\n        debugger;\n        let ctx = api.context || {};\n        let elementId = api.eventPayload?.payload?.id;\n        ctx.actionHandlers = ctx.actionHandlers || [];\n        let duplicateActionHandler = false;\n        ctx.actionHandlers.map((actionHandler) => {\n            if(actionHandler.actionHandlerName == ctx.newActionHandlerName) {\n                duplicateActionHandler = true;\n            }\n            actionHandler.actionHandlerOpened = false\n        });\n        if(!duplicateActionHandler){\n            ctx.actionHandlers = [{\n                "actionHandlerOpened": true,\n                "actionHandlerName": ctx.newActionHandlerName,\n                "actionHandlerEventName": ctx.newActionHandlerEventName,\n                "actionHandlerType": "script",\n                "actionHandlerScript": "(async function() {  })",\n                "actionHandlerSourceElementId": ctx.selectedComponentName,\n                "actionHandlerTargetEventName": "",\n                "actionHandlerContextPath": "",\n                "actionHandlerContextValueKey": ""\n            }].concat(ctx.actionHandlers);\n            return {context: ctx};\n        }\n    })',stopPropagation:!0}]}}],context:{selectedLinkType:"Client Store",selectedMode:"component_props",selectedComponentType:"mui-button",selectedComponentName:"",selectedPropertyToEdit:"",componentMetaData:a||{},componentPropData:{},componentOperation:"add",selectedDynamicPropValue:"",componentDataToPreview:[],selectedComponentPosition:"after",componentNameToAdd:"",actionHandlers:[],newActionHandlerName:"",newActionHandlerEventName:""},functions:n}}}}]);
//# sourceMappingURL=builder-GetComponentAdd.d932b8e8.chunk.js.map