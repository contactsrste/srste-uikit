{"version":3,"file":"static/js/builder-JSXConverter.b6182cbb.chunk.js","mappings":"g2CAMA,IAAMA,EAAmB,GAEnBC,EAAe,SAAUC,GAC3B,IAAkDC,EAAAC,GAAdC,EAAAA,EAAAA,UAAS,MAAK,GAA3CC,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GA8ChC,OA5CAK,EAAAA,EAAAA,YAAU,WAER,IAsCMC,EA5Bc,SAAdC,EAAeC,GACnB,IAAQC,EAAgBD,EAAhBC,KAAMV,EAAUS,EAAVT,MACRW,EAAWX,EAAMW,SACnBC,EAAe,CAAC,EACpBC,OAAOC,KAAKd,GAAOe,KAAI,SAACC,GACjBhB,EAAMiB,eAAeD,IAAuB,YAAXA,IAChCJ,EAAaI,GAAWhB,EAAMgB,GAEtC,IACA,IAAME,EAAMR,EAAKS,MAAQT,EACnBU,EAAS,IAAAC,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,WAKhCC,EAFgBC,EAAAA,SAAAA,QAAuBf,GAAUgB,OAAOD,EAAAA,gBAE3BX,KAAI,SAACa,GAAK,OAAKpB,EAAYoB,EAAM,IAEpE,MAAO,CACLT,KAAMC,EACNA,UAAAA,EACAF,IAAAA,EACAlB,MAAOY,EACPD,SAAUc,EAEd,CAIsBjB,EADHqB,EAAAA,EAAAA,IAAgB,QAADR,OAASrB,EAAM8B,QAAO,WACX,IAC7CzB,EAAc,CAACE,GACjB,GAAG,CAACP,EAAM8B,UAEL1B,EAKHsB,EAAAA,cAAA,OAAKK,MAAO,CAAEC,MAAO,8BACnBN,EAAAA,cAAA,WAAMO,KAAKC,UAAU9B,EAAY,KAAM,KALlCsB,EAAAA,cAAA,WAAK,aAQhB,EAEIS,EAAM,wDAINnC,EAAQ,CACV,CACImB,KAAM,UACNiB,aAAc,GACd1B,KAAM,UAEV,CACIS,KAAM,WACNiB,aAAc,CAAC,EACf1B,KAAM,WAIR2B,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GACrBb,EAAAA,WAAiB3B,GACjBC,EACA,M","sources":["components/builder/JSXConverter.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\nconst JSXConverter = function (props) {\r\n    const [jsonOutput, setJsonOutput] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      // Function to parse JSX attributes\r\n      const parseAttributes = (attributes) => {\r\n        const props = {};\r\n        for (let i = 0; i < attributes.length; i++) {\r\n          const { name, value } = attributes[i];\r\n          props[name] = value;\r\n        }\r\n        return props;\r\n      };\r\n  \r\n      // Function to traverse and convert JSX to JSON\r\n      const traverseJSX = (jsxElement) => {\r\n        const { type, props } = jsxElement;\r\n        const children = props.children;\r\n        let elementProps = {};\r\n        Object.keys(props).map((propKey) => {\r\n            if(props.hasOwnProperty(propKey) && propKey != \"children\") {\r\n                elementProps[propKey] = props[propKey];\r\n            }\r\n        })\r\n        const tag = type.name || type;\r\n        const elementId = `e${Math.floor(Math.random() * 1000)}`; // Generate a random element ID\r\n  \r\n        // const parsedProps = parseAttributes(attributes);\r\n        const childrenArray = React.Children.toArray(children).filter(React.isValidElement);\r\n  \r\n        const childrenJSON = childrenArray.map((child) => traverseJSX(child));\r\n  \r\n        return {\r\n          name: elementId,\r\n          elementId,\r\n          tag,\r\n          props: elementProps,\r\n          children: childrenJSON,\r\n        };\r\n      };\r\n  \r\n      // Convert JSX to JSON on component mount\r\n      const jsxElement = ReactHtmlParser(`<div>${props.jsxcode}</div>`);\r\n      const convertedJson = traverseJSX(jsxElement[0]);\r\n      setJsonOutput([convertedJson]);\r\n    }, [props.jsxcode]);\r\n  \r\n    if (!jsonOutput) {\r\n      return <div>Loading...</div>;\r\n    }\r\n  \r\n    return (\r\n      <div style={{ color: 'var(--cds-text-secondary)' }}>\r\n        <pre>{JSON.stringify(jsonOutput, null, 2)}</pre>\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst styles = `\r\n  /* Custom styles for the Accordion component */\r\n`;\r\n\r\nconst props = [\r\n    {\r\n        name: \"jsxcode\",\r\n        defaultValue: \"\",\r\n        type: \"string\"\r\n    },\r\n    {\r\n        name: \"metadata\",\r\n        defaultValue: {},\r\n        type: \"object\"\r\n    }\r\n];\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(\r\n    React.forwardRef(JSXConverter),\r\n    props,\r\n    \"mui\"\r\n);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","JSXConverter","props","_useState2","_slicedToArray","useState","jsonOutput","setJsonOutput","useEffect","convertedJson","traverseJSX","jsxElement","type","children","elementProps","Object","keys","map","propKey","hasOwnProperty","tag","name","elementId","concat","Math","floor","random","childrenJSON","React","filter","child","ReactHtmlParser","jsxcode","style","color","JSON","stringify","styles","defaultValue","slots","WrappedComponent","wrapper"],"sourceRoot":""}