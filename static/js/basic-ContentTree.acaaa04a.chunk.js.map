{"version":3,"file":"static/js/basic-ContentTree.acaaa04a.chunk.js","mappings":"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","sources":["components/basic/ContentTree.js","components/basic/Icon.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { TreeView, TreeNode } from \"carbon-components-react\";\r\nimport SrsIcon from \"./Icon\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [\"ABOUT#clicked\"];\r\n\r\n/*\r\n    Example: <srs-contenttree items=[{name: \"Node1\", label: \"Node 1\", children: [{name: \"Node11\", label: \"Node 11\"}]}, {name: \"Node2\", label: \"Node 2\", children: [{name: \"Node21\", label: \"Node 21\"}]}]/>\r\n*/\r\n\r\nconst SrsContentTree = function (props, ref) {\r\n    const treeRef = useRef(null);\r\n    useEffect(() => {\r\n        if (treeRef.current) {\r\n            treeRef.current.addEventListener(EventAPI.ICON_CLICKED, (evt) => {\r\n                console.log(evt.detail.id);\r\n            })\r\n        }\r\n    }, [props]);\r\n    return (\r\n        <div ref={treeRef}>\r\n            <TreeView label=\"Tree View\">\r\n                {/* {\r\n                    props.items.map((item) => {\r\n                        return (<li id=\"1\" tabindex=\"-1\" aria-selected=\"false\" class=\"cds--tree-node cds--tree-node--with-icon cds--tree-leaf-node\" role=\"treeitem\">\r\n                                    <div class=\"cds--tree-node__label\" style=\"margin-left: -2rem; padding-left: 2rem;\">\r\n                                        <span>Artificial intelligence</span>\r\n                                    </div>\r\n                                </li>);\r\n                    })\r\n                } */}\r\n                <TreeNode isExpanded={true} data-testid=\"Node 1\" label=\"Node 1\" renderIcon={() => {\r\n                    return (<div style={{ display: \"flex\", flexDirection: \"row\", padding: \"0px 10px\"}}>\r\n                            <srs-icon name=\"Add\" size=\"16\" style={{cursor: \"pointer\"}} elementid=\"node1-add\"/>\r\n                            <srs-icon name=\"TrashCan\" size=\"16\" style={{cursor: \"pointer\"}} elementid=\"node1-trashcan\"/>\r\n                        </div>)\r\n                }}>\r\n                    <TreeNode data-testid=\"Node 2\" label=\"Node 2\" />\r\n                </TreeNode>\r\n            </TreeView>\r\n        </div>);\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"items\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsContentTree), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/*\r\n    Example: <srs-icon name=\"Add\" description=\"Add an item\"/>\r\n*/\r\n\r\nconst dispatchedEvents = [EventAPI.ICON_CLICKED];\r\n\r\nconst SrsIcon = function (props, ref) {\r\n    const [iconInstance, setIconInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if(!props.type || props.type == \"carbon\") {\r\n            if(props.name) {\r\n                import('@carbon/icons-react').then((iconLibrary)=> {\r\n                    setIconInstance(iconLibrary[props.name]);\r\n                });\r\n            }\r\n        }else if(props.type == \"fontawesome\") {\r\n            import(\"@fortawesome/free-solid-svg-icons\").then((iconLibrary) => {\r\n                let iconNameParts = props.name.split(\"-\");\r\n                iconNameParts = iconNameParts.map((iconNamePart) => iconNamePart[0].toUpperCase() + iconNamePart.substring(1));\r\n                let moduleName = \"fa\" + iconNameParts.join(\"\");\r\n                setIconInstance(iconLibrary[moduleName]);\r\n                library.add(iconLibrary[moduleName]);\r\n            });            \r\n        }\r\n    }, [props.name, props.type]);\r\n    \r\n    let inlineStyles = {\r\n       color: props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\"),\r\n       \"--cds-icon-primary\": props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\")\r\n    };\r\n\r\n    const handleClick = (props) => {\r\n        return (evt) => {\r\n            props.dispatchEvent && props.dispatchEvent(EventAPI.ICON_CLICKED, {name: props.name, id: props.elementid})\r\n            if(props.onClick) {\r\n                props.onClick({name: props.name, id: props.elementid});\r\n            }\r\n        }\r\n    }\r\n\r\n    let iconEl = null;\r\n    if(!props.type || props.type == \"carbon\") {\r\n        let IconInstance = iconInstance;\r\n        iconEl = <IconInstance size={props.size || 24} onClick={handleClick(props)}/>;\r\n    }else if(props.type == \"fontawesome\") {\r\n        iconEl = <FontAwesomeIcon style={{cursor: \"pointer\", height: props.height || props.size, width: props.width || props.size, color: props.color}} \r\n                    onClick={handleClick(props)}\r\n                    title={props.description}\r\n                    icon={props.name}/>\r\n    }\r\n\r\n    return iconInstance? <div style={inlineStyles}>\r\n            { iconEl } \r\n        </div>: <div/>\r\n}\r\n\r\nconst styles = `\r\n\r\n`\r\nconst props = [{\r\n    name: \"name\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"description\",\r\n    defaultValue: true,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"size\",\r\n    defaultValue: 24,\r\n    type: \"number\"\r\n}, {\r\n    name: \"color\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsIcon), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\nexport default SrsIcon;"],"names":["dispatchedEvents","SrsContentTree","props","ref","treeRef","useRef","useEffect","current","addEventListener","EventAPI","evt","console","log","detail","id","_jsx","children","TreeView","label","TreeNode","isExpanded","renderIcon","_jsxs","style","display","flexDirection","padding","name","size","cursor","elementid","styles","defaultValue","type","slots","WrappedComponent","wrapper","React","SrsIcon","_useState","useState","_useState2","_slicedToArray","iconInstance","setIconInstance","then","iconLibrary","iconNameParts","split","moduleName","map","iconNamePart","toUpperCase","substring","join","library","inlineStyles","color","theme","handleClick","dispatchEvent","onClick","iconEl","FontAwesomeIcon","height","width","title","description","icon","IconInstance"],"sourceRoot":""}