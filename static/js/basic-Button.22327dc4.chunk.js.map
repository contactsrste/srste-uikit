{"version":3,"file":"static/js/basic-Button.22327dc4.chunk.js","mappings":"skDAKA,IAAMA,EAAmB,CAACC,EAAAA,EAAAA,gBAKpBC,EAAY,SAAUC,EAAOC,GAC/B,IAAsDC,EAAAC,GAAdC,EAAAA,EAAAA,UAAS,MAAK,GAA/CC,EAAYH,EAAA,GAAEI,EAAeJ,EAAA,IACpCK,EAAAA,EAAAA,YAAU,WACHP,EAAMQ,UAAYR,EAAMS,MACvB,kEAA8BC,MAAK,SAACC,GAChCL,EAAgBK,EAAYX,EAAMS,MACtC,GAER,GAAG,CAACT,EAAMS,OAEV,IAAIG,EAAa,CAAC,EAKlB,OAJGP,IACCO,EAAWC,WAAaR,EACxBO,EAAWE,gBAAkBd,EAAMe,kBAGrCC,EAAAA,cAACC,EAAAA,IAAMC,EAAA,CACLC,YAAanB,EAAMQ,UACfI,EAAU,CACdQ,KAAMpB,EAAMoB,KACZC,KAAMrB,EAAMqB,KACZC,kBAAmBtB,EAAMsB,kBACzBC,iBAAkBvB,EAAMuB,iBACxBC,QAAS,SAACC,GACNzB,EAAM0B,cAAc5B,EAAAA,EAAAA,eAAyB,CAAE6B,QAAS,CAACC,GAAI5B,EAAM4B,IAAM5B,EAAM6B,YACnF,IAAI7B,EAAM8B,MAElB,EAEMC,EAAM,WAGN/B,EAAQ,CAAC,CACXgC,KAAM,QACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,WACNC,cAAc,EACdC,KAAM,WACP,CACCF,KAAM,OACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,mBACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,OACNC,aAAc,IACdC,KAAM,UACP,CACCF,KAAM,OACNC,aAAc,KACdC,KAAM,UACP,CACCF,KAAM,OACNC,aAAc,YACdC,KAAM,UACP,CACCF,KAAM,oBACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,mBACNC,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQrB,EAAAA,WAAiBjB,GAAYC,E","sources":["components/basic/Button.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { Button } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.BUTTON_CLICKED];\r\n\r\n/*\r\n    Example: <srs-button label=\"Submit\" icon=\"Add\" icononly=true icon_description=\"This is to submit the form\" href=\"#\" size=\"sm\"/>\r\n*/\r\nconst SrsButton = function (props, ref) {\r\n    const [iconInstance, setIconInstance] = useState(null);\r\n    useEffect(() => {\r\n        if(props.icononly && props.icon) {\r\n            import('@carbon/icons-react').then((iconLibrary)=> {\r\n                setIconInstance(iconLibrary[props.icon]);\r\n            });\r\n        }\r\n    }, [props.icon]);\r\n\r\n    let extraProps = {};\r\n    if(iconInstance) {\r\n        extraProps.renderIcon = iconInstance;\r\n        extraProps.iconDescription = props.icon_description;\r\n    }\r\n    return (\r\n      <Button\r\n        hasIconOnly={props.icononly}\r\n        {...extraProps}\r\n        href={props.href}\r\n        size={props.size}\r\n        tooltip_alignment={props.tooltip_alignment}\r\n        tooltip_position={props.tooltip_position}\r\n        onClick={(e) => {\r\n            props.dispatchEvent(EventAPI.BUTTON_CLICKED, { payload: {id: props.id || props.elementid}});\r\n        }}>{props.label}</Button>\r\n    );\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"icononly\",\r\n    defaultValue: true,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"icon\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"icon_description\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"href\",\r\n    defaultValue: \"#\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"size\",\r\n    defaultValue: \"sm\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"kind\",\r\n    defaultValue: \"primary  \",\r\n    type: \"string\"\r\n}, {\r\n    name: \"tooltip_alignment\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"tooltip_position\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsButton), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsButton","props","ref","_useState2","_slicedToArray","useState","iconInstance","setIconInstance","useEffect","icononly","icon","then","iconLibrary","extraProps","renderIcon","iconDescription","icon_description","React","Button","_extends","hasIconOnly","href","size","tooltip_alignment","tooltip_position","onClick","e","dispatchEvent","payload","id","elementid","label","styles","name","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}