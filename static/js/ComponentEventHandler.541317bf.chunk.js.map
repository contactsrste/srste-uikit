{"version":3,"file":"static/js/ComponentEventHandler.541317bf.chunk.js","mappings":"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","sources":["commons/ExternalAPIUtil.js","components/ComponentEventHandler.js","../node_modules/lz-string/libs/lz-string.js"],"sourcesContent":["export const getAdditionalAPIs = () => {\r\n    const OPENAI_API_KEY = \"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\";\r\n    const { Configuration, OpenAIApi } = require(\"openai\");\r\n    const configuration = new Configuration({\r\n        apiKey: OPENAI_API_KEY,\r\n    });\r\n    const openai = new OpenAIApi(configuration);\r\n\r\n    const {compress, decompress} = require(\"lz-string\");\r\n    return {\r\n        openai, compress, decompress\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { getAdditionalAPIs } from \"../commons/ExternalAPIUtil\";\r\nimport wrapper from \"../commons/WebComponentWrapper\";\r\n\r\nconst dispatchedEvents = [\"PAGE_CONTEXT_REFRESH\", \"PAGE_CONTENTS_REFRESH\"];\r\n\r\nconst EventHandler = function (props, ref) {\r\n  const [eventBinding, setEventBinding] = useState(false);\r\n  const findElement = (key, nestedContents) => {\r\n    for (let element of nestedContents) {\r\n      if (element.elementId === key) {\r\n        return element;\r\n      } else if (element.children) {\r\n        const found = findElement(key, element.children);\r\n        if (found) return found;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const getElement = (contents) => {\r\n    return (elementId) => {\r\n      let contentItems = contents? [...contents]: [];\r\n      return findElement(elementId, contentItems);\r\n    }\r\n  }\r\n\r\n  const replaceElement = (elementId, elementObj, contentsToBeUpdated) => {\r\n    contentsToBeUpdated.forEach((element) => {\r\n      if (element.elementId === elementId) {\r\n        element = elementObj;\r\n      } else if (element.children) {\r\n        replaceElement(elementId, elementObj, element.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  const setElement = (contents) => {\r\n    return (elementId, elementObj) => {\r\n      let contentsToBeUpdated = contents? [...contents]: [];\r\n      replaceElement(elementId, elementObj, contentsToBeUpdated);\r\n      props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: contentsToBeUpdated });\r\n    }\r\n  }\r\n\r\n  const updateContents = (updatedClan) => {\r\n    props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: updatedClan });\r\n  }\r\n\r\n  const handleEvent = (handler) => {\r\n    return (event) => {\r\n      if (handler.type) {\r\n        switch (handler.type) {\r\n          case \"script\":\r\n            const context = { eventPayload: event.detail, context: props.context || {}, clan: props.clan || [], \r\n                              dispatchEvent: props.dispatchEvent, \r\n                              api: {\r\n                                getElement: getElement(props.clan), \r\n                                setElement: setElement(props.clan), \r\n                                updateContents, \r\n                                ...getAdditionalAPIs()\r\n                              } \r\n                            };\r\n\r\n            const scriptFn = new Function(...Object.keys(context), `return (${handler.script})();`);\r\n            let scriptResult = scriptFn(...Object.values(context));\r\n            // console.log(scriptResult);\r\n            if (scriptResult) {\r\n              if (scriptResult.context) {\r\n                props.dispatchEvent(\"PAGE_CONTEXT_REFRESH\", { payload: scriptResult.context });\r\n              }\r\n              if (scriptResult.clan) {\r\n                props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: scriptResult.clan });\r\n              }\r\n            }\r\n            handler.stopPropagation && event.stopPropagation();\r\n            break;\r\n          case \"dispatch\":\r\n            break;\r\n          case \"navigate\":\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const currentNode = ref.current;\r\n    if (!currentNode) return;\r\n\r\n    if (eventBinding) return;\r\n\r\n    let handlers = props.handlers || [];\r\n    if (typeof handlers == \"string\")\r\n      handlers = JSON.parse(handlers);\r\n    if (handlers && handlers.length > 0) {\r\n      handlers.map((handler) => {\r\n        currentNode.addEventListener(handler.eventName, handleEvent(handler));\r\n      });\r\n    }\r\n    setEventBinding(true);\r\n    return () => {\r\n      handlers.map((handler) => {\r\n        ref.current.removeEventListener(handler.eventName, handleEvent(handler));\r\n        eventBinding = false;\r\n      });\r\n        \r\n    };\r\n\r\n  }, [props.elementid]);\r\n\r\n  return view(props, ref);\r\n}\r\n\r\nconst view = (props, ref) => {\r\n  return (<div ref={ref}>\r\n    <slot />\r\n  </div>);\r\n}\r\n\r\nconst styles = `\r\n    div {\r\n    }\r\n`\r\n\r\nconst props = [\r\n  {\r\n    name: \"handlers\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n  }\r\n]\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(EventHandler), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents };","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n"],"names":["getAdditionalAPIs","_require","require","Configuration","openai","OpenAIApi","apiKey","_require2","compress","decompress","dispatchedEvents","EventHandler","props","ref","_useState2","_slicedToArray","useState","eventBinding","setEventBinding","findElement","key","nestedContents","_step","_iterator","_createForOfIteratorHelper","s","n","done","element","value","elementId","children","found","err","e","f","replaceElement","elementObj","contentsToBeUpdated","forEach","setElement","contents","_toConsumableArray","dispatchEvent","payload","updateContents","updatedClan","handleEvent","handler","event","type","context","eventPayload","detail","clan","api","_objectSpread","getElement","contentItems","scriptResult","_construct","Function","Object","keys","concat","script","apply","values","stopPropagation","useEffect","currentNode","current","handlers","JSON","parse","length","map","addEventListener","eventName","removeEventListener","_readOnlyError","elementid","view","React","styles","name","defaultValue","WrappedComponent","wrapper","LZString","String","fromCharCode","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","i","charAt","compressToBase64","input","res","_compress","a","decompressFromBase64","_decompress","index","compressToUTF16","decompressFromUTF16","compressed","charCodeAt","compressToUint8Array","uncompressed","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","undefined","Array","result","c","push","join","compressToEncodedURIComponent","decompressFromEncodedURIComponent","replace","bitsPerChar","getCharFromInt","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","w","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","entry","data","val","position","define"],"sourceRoot":""}