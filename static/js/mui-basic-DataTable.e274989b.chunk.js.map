{"version":3,"file":"static/js/mui-basic-DataTable.e274989b.chunk.js","mappings":"m8CAeA,IAAMA,EAAmB,GAcnBC,EAAc,SAAUC,EAAOC,GAAM,IAADC,EAAAC,EAAAC,EACgBC,EAAAC,GAAhCC,EAAAA,EAAAA,UAASP,EAAMQ,aAAe,GAAE,GACMC,GADnDJ,EAAA,GAASA,EAAA,GAC0CC,GAA9BC,EAAAA,EAAAA,UAASP,EAAMU,WAAa,GAAE,IAA/CD,EAAA,GAAaA,EAAA,GAgC5B,OA9BAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAS,CAAC,sBAAuBZ,EAAMa,MACzC,GAAG,IA4B0B,UAAtBb,EAAMc,aACXC,EAAAA,cAAA,WACEA,EAAAA,cAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,OAAQ,IAAKC,MAAO,SAC7BJ,EAAAA,cAACK,EAAAA,EAAQ,CACPC,KAAMrB,EAAMqB,KACZC,QAAStB,EAAMsB,QACfC,gBAAiB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,KACrCC,kBAAmBxB,EAAMyB,iBACzBC,2BAA4B1B,EAAM2B,0BAClCC,YAAY,IAEdb,EAAAA,cAAA,6BAIJA,EAAAA,cAACc,EAAAA,EAAc,CAACC,UAAWC,EAAAA,GACzBhB,EAAAA,cAACiB,EAAAA,EAAK,CAACf,GAAI,CAAEgB,SAAU,KAAOC,KAAK,QAAQ,cAAsB,QAAVhC,EAAAF,EAAMmC,YAAI,IAAAjC,OAAA,EAAVA,EAAYkC,QAAS,iBAC1ErB,EAAAA,cAACsB,EAAAA,EAAS,KACRtB,EAAAA,cAACuB,EAAAA,EAAQ,KAEQ,QAFRnC,EAELH,EAAMsB,eAAO,IAAAnB,OAAA,EAAbA,EAAeoC,KAAI,SAACC,EAAQC,GAC1B,GAAmB,UAAfD,EAAOE,KACT,OAAO3B,EAAAA,cAAA,QAAM4B,KAAMH,EAAOI,WAE1B,IAAIC,EAAeL,EAAOM,SAAmB,GAARL,EAAY,CAAC,EAAI,CAAEM,MAAO,UAC/D,OAAQhC,EAAAA,cAACiC,EAAAA,EAAcH,EAAeL,EAAOS,WAEjD,MAINlC,EAAAA,cAACmC,EAAAA,EAAS,KAEI,QAFJ9C,EAENJ,EAAMqB,YAAI,IAAAjB,OAAA,EAAVA,EAAYmC,KAAI,SAACY,GACf,IAAIC,EAAQ,GAcZ,OAbApD,EAAMsB,QAAQ+B,SAAQ,SAACb,EAAQC,GAC7B,IAAIa,EAAWH,EAAIX,EAAOe,OAC1B,GAAID,GAA6B,UAAjBA,EAASZ,KACvBU,EAAMI,KAAKzC,EAAAA,cAAA,QAAM4B,KAAMW,EAASV,iBAEhC,GAAY,GAARH,EACFW,EAAMI,KAAKzC,EAAAA,cAACiC,EAAAA,EAAS,CAAClB,UAAU,KAAK2B,MAAM,OAAOH,QAC7C,CACL,IAAIT,EAAeL,EAAOM,SAAmB,GAARL,EAAY,CAAC,EAAI,CAAEM,MAAO,UAC/DK,EAAMI,KAAKzC,EAAAA,cAACiC,EAAAA,EAAcH,EAAeS,GAC3C,CAEJ,IACQvC,EAAAA,cAACuB,EAAAA,EAAQ,CAACoB,IAAKP,EAAIR,KAAM1B,GAAI,CAAE,mCAAoC,CAAE0C,OAAQ,KAAQP,EAC/F,MAMZ,EAEMN,EAAM,WAGN9C,EAAQ,CAAC,CACb2C,KAAM,OACNiB,aAAc,GACdlB,KAAM,UACL,CACDC,KAAM,UACNiB,aAAc,GACdlB,KAAM,UACL,CACDC,KAAM,cACNiB,aAAc,EACdlB,KAAM,UACL,CACDC,KAAM,YACNiB,aAAc,GACdlB,KAAM,UACL,CACDC,KAAM,mBACNiB,cAAc,EACdlB,KAAM,WACL,CACDC,KAAM,eACNiB,aAAc,SACdlB,KAAM,UACL,CACDC,KAAM,4BACNiB,cAAc,EACdlB,KAAM,YAGFmB,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQhD,EAAAA,WAAiBhB,GAAcC,EAAO,M","sources":["components/mui/basic/DataTable.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { DataGrid, GridPagination } from '@mui/x-data-grid';\r\nimport Box from '@mui/material/Box';\r\n\r\nimport { register } from \"../../../commons/ComponentRegistry\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-mui-table \r\n                columns=[\r\n                  {field: \"calories\", headerName: \"Calories\", description: \"blah blah...\" editable: true, type: 'number', sortable: true, styles: {align: 'right'}}, \r\n                  {id: \"fat\", type: 'custom', slotname: \"custom1\"}]\r\n                rows=[{calories: {type: \"custom\", slotname: \"row1_calories\"}, fat: \"23\"}]>\r\n              <srs-mui-xyz slot=\"custom1\"/>\r\n              <srs-mui-lmn slot=\"row1_calories\"/>\r\n              <srs-mui-lmn slot=\"row2_calories\"/>\r\n            </srs-mui-table>\r\n*/\r\n\r\nconst SrsMuiTable = function (props, ref) {\r\n  const [page, setPage] = useState(props.page_number || 0);\r\n  const [pageSize, setPageSize] = useState(props.page_size || 5);\r\n\r\n  useEffect(() => {\r\n    register([\"srs-mui-pagination\"], props.theme);\r\n  }, []);\r\n\r\n  function CustomPagination(footerProps) {\r\n    const { pagination, api } = footerProps;\r\n\r\n    const handlePageChange = (page) => {\r\n      api.dispatchEvent(\"SrsMuiTable#page_changed\", page);\r\n      setPage(page);\r\n    };\r\n\r\n    const handleRowsPerPageChange = (evt) => {\r\n      api.dispatchEvent(\"SrsMuiTable#pagesize_changed\", evt.target.value);\r\n      setPageSize(evt.target.value);\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <GridPagination\r\n          page={pagination?.page}\r\n          rowsPerPage={pagination?.pageSize}\r\n          rowCount={pagination?.rowCount}\r\n          onPageChange={handlePageChange}\r\n          onRowsPerPageChange={handleRowsPerPageChange}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return props.display_mode == \"simple\" ? (\r\n    <div>\r\n      <Box sx={{ height: 400, width: '100%' }}>\r\n        <DataGrid\r\n          rows={props.rows}\r\n          columns={props.columns}\r\n          pageSizeOptions={[5, 10, 25, 20, 50, 100]}\r\n          checkboxSelection={props.enable_selection}\r\n          disableRowSelectionOnClick={props.enable_row_select_onclick}\r\n          hideFooter={false}\r\n        />\r\n        <srs-mui-pagination></srs-mui-pagination>\r\n      </Box>\r\n    </div>\r\n  ) : (\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 650 }} size=\"small\" aria-label={props.aria?.label || \"A dense table\"}>\r\n        <TableHead>\r\n          <TableRow>\r\n            {\r\n              props.columns?.map((column, indx) => {\r\n                if (column.type == \"custom\") {\r\n                  return <slot name={column.slotname}></slot>\r\n                } else {\r\n                  let columnStyles = column.styles || (indx == 0 ? {} : { align: \"right\" });\r\n                  return (<TableCell {...columnStyles}>{column.headerName}</TableCell>)\r\n                }\r\n              })\r\n            }\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            props.rows?.map((row) => {\r\n              let rowEl = [];\r\n              props.columns.forEach((column, indx) => {\r\n                let cellData = row[column.field];\r\n                if (cellData && cellData.type == \"custom\") {\r\n                  rowEl.push(<slot name={cellData.slotname}></slot>);\r\n                } else {\r\n                  if (indx == 0) {\r\n                    rowEl.push(<TableCell component=\"th\" scope=\"row\">{cellData}</TableCell>);\r\n                  } else {\r\n                    let columnStyles = column.styles || (indx == 0 ? {} : { align: \"right\" });\r\n                    rowEl.push(<TableCell {...columnStyles}>{cellData}</TableCell>);\r\n                  }\r\n                }\r\n              })\r\n              return (<TableRow key={row.name} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>{rowEl}</TableRow>)\r\n            })\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n  name: \"rows\",\r\n  defaultValue: [],\r\n  type: \"object\"\r\n}, {\r\n  name: \"columns\",\r\n  defaultValue: [],\r\n  type: \"object\"\r\n}, {\r\n  name: \"page_number\",\r\n  defaultValue: 0,\r\n  type: \"number\"\r\n}, {\r\n  name: \"page_size\",\r\n  defaultValue: 10,\r\n  type: \"number\"\r\n}, {\r\n  name: \"enable_selection\",\r\n  defaultValue: true,\r\n  type: \"boolean\"\r\n}, {\r\n  name: \"display_mode\",\r\n  defaultValue: \"simple\",\r\n  type: \"string\"\r\n}, {\r\n  name: \"enable_row_select_onclick\",\r\n  defaultValue: true,\r\n  type: \"boolean\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsMuiTable), props, \"mui\");\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsMuiTable","props","ref","_props$aria","_props$columns","_props$rows","_useState2","_slicedToArray","useState","page_number","_useState4","page_size","useEffect","register","theme","display_mode","React","Box","sx","height","width","DataGrid","rows","columns","pageSizeOptions","checkboxSelection","enable_selection","disableRowSelectionOnClick","enable_row_select_onclick","hideFooter","TableContainer","component","Paper","Table","minWidth","size","aria","label","TableHead","TableRow","map","column","indx","type","name","slotname","columnStyles","styles","align","TableCell","headerName","TableBody","row","rowEl","forEach","cellData","field","push","scope","key","border","defaultValue","slots","WrappedComponent","wrapper"],"sourceRoot":""}