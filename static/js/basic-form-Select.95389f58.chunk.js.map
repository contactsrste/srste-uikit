{"version":3,"file":"static/js/basic-form-Select.95389f58.chunk.js","mappings":"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","sources":["components/basic/form/Select.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport { Select, SelectItem, SelectItemGroup, MultiSelect, MultiSelectFilter } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.SELECT_CHANGED];\r\n\r\n/*\r\n    Example: <srs-select multi=\"true\" selected=[\"item1\", \"item2\"] label=\"Select Label\" options=[{group: true, options: [{label: \"Item1\", value: \"item1\"}]}]/>\r\n*/\r\nconst SrsSelect = function (props, ref) {\r\n    let options = props.options || [];\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [filteredOptions, setFilteredOptions] = useState(options);\r\n\r\n    useEffect(() => {\r\n        function interceptEventTarget(event) {\r\n            if(event.composed) {\r\n                Object.defineProperty(event, 'target', {\r\n                    value: event.composedPath()[0],\r\n                    writable: false,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n\r\n        function handleEvent(event) {\r\n            interceptEventTarget(event);\r\n        }\r\n\r\n        // Add the event listener to the window object\r\n        ref.current.addEventListener('mouseup', handleEvent);\r\n        ref.current.addEventListener('mousedown', handleEvent);\r\n        ref.current.addEventListener('touchstart', handleEvent);\r\n        ref.current.addEventListener('touchmove', handleEvent);\r\n        ref.current.addEventListener('touchend', handleEvent);\r\n\r\n\r\n        // Remove the event listener when the component unmounts\r\n        return () => {\r\n            ref.current.removeEventListener('mouseup', handleEvent);\r\n            ref.current.removeEventListener('mousedown', handleEvent);\r\n            ref.current.removeEventListener('touchstart', handleEvent);\r\n            ref.current.removeEventListener('touchmove', handleEvent);\r\n            ref.current.removeEventListener('touchend', handleEvent);\r\n        };\r\n    }, []);\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSearchChange = event => {\r\n        const value = event.target.value.toLowerCase();\r\n        const filtered = options.filter(option =>\r\n            option.label.toLowerCase().includes(value)\r\n        );\r\n        setFilteredOptions(filtered);\r\n        setSearchValue(value);\r\n    };\r\n\r\n    const handleSelectedChange = changedValue => {\r\n        props.dispatchEvent(EventAPI.SELECT_CHANGED, { payload: { value: changedValue.selectedItems? changedValue.selectedItems.map(item => item.value): [], id: props.elementid } });\r\n        props.setValue(changedValue);\r\n    };\r\n\r\n    let inlineStyles = {\r\n        \"--cds-label-01-font-size\": \"0.9rem\",\r\n        \"--cds-label-01-font-weight\": 800,\r\n        zIndex: 10000\r\n    };\r\n    let noLabel = props.label? false: true;\r\n    let result = props.multi ? (\r\n        <>\r\n            <label class=\"cds--label\">{props.label}</label>\r\n            <MultiSelect\r\n                id={props.elementid}\r\n                items={filteredOptions}\r\n                hideLabel={noLabel}\r\n                itemToString={item => item.label}\r\n                open={open}\r\n                onOpen={handleOpen}\r\n                onClose={handleClose}\r\n                selectedItems={props.selected.map(value => options.find(option => option.value === value))}\r\n                onChange={handleSelectedChange}\r\n                initialSelectedItems={props.selected.map(value => options.find(option => option.value === value))}\r\n                itemToElement={item => (\r\n                    <div key={item.value}>\r\n                        {item.label}\r\n                    </div>\r\n                )}\r\n                placeholder={props.placeholder}\r\n                translationIds={{\r\n                    'close.menu': 'Close menu',\r\n                    'open.menu': 'Open menu',\r\n                    'clear.all': 'Clear all',\r\n                }}\r\n            /* <srs-multiselect-filter\r\n            aria-label=\"Search\"\r\n            labelText=\"\"\r\n            placeholder=\"Search\"\r\n            value={searchValue}\r\n            onChange={handleSearchChange}\r\n        /> */\r\n            />\r\n        </>)\r\n        : (<Select noLabel={noLabel} labelText={props.label} onChange={(evt) => {\r\n            let selectedIndx = evt.currentTarget.options.selectedIndex;\r\n            let selectedValue = evt.currentTarget.options[selectedIndx].value;\r\n            props.dispatchEvent(EventAPI.SELECT_CHANGED, { payload: { value: selectedValue, id: props.elementid } });\r\n            props.setValue(selectedValue);\r\n        }}>\r\n            {options.map((option) =>\r\n                option.group ? (\r\n                    <SelectItemGroup label={option.label} key={option.label}>\r\n                        {option.options.map((option) => (\r\n                            <SelectItem key={option.value} text={option.label} value={option.value} selected={option.value == props.selected?.[0]}>\r\n                            </SelectItem>\r\n                        ))}\r\n                    </SelectItemGroup>\r\n                ) : (\r\n                    <SelectItem key={option.value} text={option.label} value={option.value} selected={option.value == props.selected?.[0]}>\r\n                    </SelectItem>\r\n                )\r\n            )}\r\n        </Select>);\r\n\r\n    return <div style={inlineStyles} ref={ref}>{result}</div>;\r\n}\r\n\r\nconst styles = `\r\n    .cds--select-input, .cds--multi-select {\r\n        border: 1px solid lightgray !important;\r\n        border-radius: 5px !important;\r\n        width: 100% !important;\r\n        max-width: 100% !important;\r\n    }\r\n\r\n    .cds--text-input--light {\r\n        border-bottom: 1px solid lightgrey !important;\r\n    }\r\n\r\n    .cds--select {\r\n        width: 100% !important;\r\n    }\r\n\r\n    .cds--select-input__wrapper {\r\n        width: 100% !important;\r\n    }\r\n\r\n    .cds--select-input:focus, .cds--select-input:active {\r\n        outline: 0px !important;\r\n        border: 2px solid !important;\r\n        border-radius: 5px;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"Select\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"options\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}, {\r\n    name: \"placeholder\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"selected\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}, {\r\n    name: \"multi\",\r\n    defaultValue: false,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"placeholder\",\r\n    defaultValue: \"Select Label\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsSelect), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsSelect","props","ref","options","_useState2","_slicedToArray","useState","open","setOpen","_useState4","_useState6","filteredOptions","useEffect","handleEvent","event","composed","Object","defineProperty","value","composedPath","writable","enumerable","configurable","interceptEventTarget","current","addEventListener","removeEventListener","noLabel","label","result","multi","React","class","MultiSelect","id","elementid","items","hideLabel","itemToString","item","onOpen","onClose","selectedItems","selected","map","find","option","onChange","changedValue","dispatchEvent","payload","setValue","initialSelectedItems","itemToElement","key","placeholder","translationIds","Select","labelText","evt","selectedIndx","currentTarget","selectedIndex","selectedValue","_props$selected2","group","SelectItemGroup","_props$selected","SelectItem","text","style","zIndex","styles","name","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}