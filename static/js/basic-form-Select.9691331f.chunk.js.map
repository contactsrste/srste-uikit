{"version":3,"file":"static/js/basic-form-Select.9691331f.chunk.js","mappings":"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","sources":["components/basic/form/Select.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport { Select, SelectItem, SelectItemGroup, MultiSelect, MultiSelectFilter } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.SELECT_CHANGED];\r\n\r\n/*\r\n    Example: <srs-select multi=\"true\" selected=[\"item1\", \"item2\"] label=\"Select Label\" options=[{group: true, options: [{label: \"Item1\", value: \"item1\"}]}]/>\r\n*/\r\nconst SrsSelect = function (props, ref) {\r\n    let options = props.options || [];\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [filteredOptions, setFilteredOptions] = useState(options);\r\n\r\n    useEffect(() => {\r\n        function interceptEventTarget(event) {\r\n            if(event.composed) {\r\n                Object.defineProperty(event, 'target', {\r\n                    value: event.composedPath()[0],\r\n                    writable: false,\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n            }\r\n        }\r\n\r\n        function handleEvent(event) {\r\n            interceptEventTarget(event);\r\n        }\r\n\r\n        // Add the event listener to the window object\r\n        ref.current.addEventListener('mouseup', handleEvent);\r\n        ref.current.addEventListener('mousedown', handleEvent);\r\n        ref.current.addEventListener('touchstart', handleEvent);\r\n        ref.current.addEventListener('touchmove', handleEvent);\r\n        ref.current.addEventListener('touchend', handleEvent);\r\n\r\n\r\n        // Remove the event listener when the component unmounts\r\n        return () => {\r\n            ref.current.removeEventListener('mouseup', handleEvent);\r\n            ref.current.removeEventListener('mousedown', handleEvent);\r\n            ref.current.removeEventListener('touchstart', handleEvent);\r\n            ref.current.removeEventListener('touchmove', handleEvent);\r\n            ref.current.removeEventListener('touchend', handleEvent);\r\n        };\r\n    }, []);\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSearchChange = event => {\r\n        const value = event.target.value.toLowerCase();\r\n        const filtered = options.filter(option =>\r\n            option.label.toLowerCase().includes(value)\r\n        );\r\n        setFilteredOptions(filtered);\r\n        setSearchValue(value);\r\n    };\r\n\r\n    const handleSelectedChange = changedValue => {\r\n        props.dispatchEvent(EventAPI.SELECT_CHANGED, { payload: { value: changedValue.selectedItems? changedValue.selectedItems.map(item => item.value): [], id: props.elementid } });\r\n        props.setValue(changedValue);\r\n    };\r\n\r\n    let inlineStyles = {\r\n        \"--cds-label-01-font-size\": \"0.9rem\",\r\n        \"--cds-label-01-font-weight\": 800,\r\n        zIndex: 10000\r\n    };\r\n\r\n    let result = props.multi ? (\r\n        <>\r\n            <label class=\"cds--label\">{props.label}</label>\r\n            <MultiSelect\r\n                id={props.elementid}\r\n                items={filteredOptions}\r\n                itemToString={item => item.label}\r\n                open={open}\r\n                onOpen={handleOpen}\r\n                onClose={handleClose}\r\n                selectedItems={props.selected.map(value => options.find(option => option.value === value))}\r\n                onChange={handleSelectedChange}\r\n                initialSelectedItems={props.selected.map(value => options.find(option => option.value === value))}\r\n                itemToElement={item => (\r\n                    <div key={item.value}>\r\n                        {item.label}\r\n                    </div>\r\n                )}\r\n                placeholder={props.placeholder}\r\n                translationIds={{\r\n                    'close.menu': 'Close menu',\r\n                    'open.menu': 'Open menu',\r\n                    'clear.all': 'Clear all',\r\n                }}\r\n            /* <srs-multiselect-filter\r\n            aria-label=\"Search\"\r\n            labelText=\"\"\r\n            placeholder=\"Search\"\r\n            value={searchValue}\r\n            onChange={handleSearchChange}\r\n        /> */\r\n            />\r\n        </>)\r\n        : (<Select labelText={props.label} onChange={(val) => {\r\n            props.dispatchEvent(EventAPI.SELECT_CHANGED, { payload: { value: val, id: props.elementid } });\r\n            props.setValue(val);\r\n        }}>\r\n            {options.map((option) =>\r\n                option.group ? (\r\n                    <SelectItemGroup label={option.label} key={option.label}>\r\n                        {option.options.map((option) => (\r\n                            <SelectItem key={option.value} text={option.label} value={option.value}>\r\n                            </SelectItem>\r\n                        ))}\r\n                    </SelectItemGroup>\r\n                ) : (\r\n                    <SelectItem key={option.value} text={option.label} value={option.value}>\r\n                    </SelectItem>\r\n                )\r\n            )}\r\n        </Select>);\r\n\r\n    return <div style={inlineStyles} ref={ref}>{result}</div>;\r\n}\r\n\r\nconst styles = `\r\n    .cds--select-input, .cds--multi-select {\r\n        border: 1px solid lightgray !important;\r\n        border-radius: 5px !important;\r\n        width: 100% !important;\r\n        max-width: 100% !important;\r\n    }\r\n\r\n    .cds--text-input--light {\r\n        border-bottom: 1px solid lightgrey !important;\r\n    }\r\n\r\n    .cds--select {\r\n        width: 100% !important;\r\n    }\r\n\r\n    .cds--select-input__wrapper {\r\n        width: 100% !important;\r\n    }\r\n\r\n    .cds--select-input:focus, .cds--select-input:active {\r\n        outline: 0px !important;\r\n        border: 2px solid !important;\r\n        border-radius: 5px;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"Select\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"options\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}, {\r\n    name: \"placeholder\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"selected\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}, {\r\n    name: \"multi\",\r\n    defaultValue: false,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"placeholder\",\r\n    defaultValue: \"Select Label\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsSelect), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsSelect","props","ref","options","_useState","useState","_useState2","_slicedToArray","open","setOpen","_useState3","_useState4","_useState5","_useState6","filteredOptions","useEffect","handleEvent","event","composed","Object","defineProperty","value","composedPath","writable","enumerable","configurable","interceptEventTarget","current","addEventListener","removeEventListener","result","multi","_jsxs","_Fragment","children","_jsx","class","label","MultiSelect","id","elementid","items","itemToString","item","onOpen","onClose","selectedItems","selected","map","find","option","onChange","changedValue","dispatchEvent","payload","setValue","initialSelectedItems","itemToElement","placeholder","translationIds","Select","labelText","val","group","SelectItemGroup","SelectItem","text","style","zIndex","styles","name","defaultValue","type","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}