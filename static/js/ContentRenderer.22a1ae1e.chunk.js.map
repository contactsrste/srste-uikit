{"version":3,"file":"static/js/ContentRenderer.22a1ae1e.chunk.js","mappings":"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","sources":["components/ContentRenderer.js"],"sourcesContent":["import React, { useEffect, useRef, useState, createContext, useContext } from \"react\";\r\nimport { register, getUniqueComponentsToRegister } from \"../commons/ComponentRegistry\";\r\nimport wrapper from \"../commons/WebComponentWrapper\";\r\n\r\nimport { GlobalTheme } from '@carbon/react';\r\n// import { MultiSelect } from \"carbon-components-react\";\r\n\r\nconst ThemePreferenceContext = createContext();\r\nfunction useThemePreference() {\r\n  return useContext(ThemePreferenceContext);\r\n}\r\n\r\nconst ContentRenderer = (props, ref) => {\r\n  \r\n  const [contents, setContents] = useState(props.clan || []);\r\n  const [context, setContext] = useState(props.context || {});\r\n  const [theme, setTheme] = useState(props.theme || \"g90\");\r\n  const [eventBinding, setEventBinding] = useState(false);\r\n  const [componentsRegistered, setComponentsRegistered] = useState(false);\r\n  const [uniqueComponents, setUniqueComponents] = useState(getUniqueComponentsToRegister(props.clan) || []);\r\n  const [componentPropTypes, setComponentPropTypes] = useState({});\r\n  \r\n  const innerRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    setContents(props.clan);\r\n    setContext(props.context);\r\n    setTheme(props.theme);\r\n    document.documentElement.setAttribute('data-carbon-theme', props.theme);\r\n    if(innerRef.current && !eventBinding) {\r\n      setEventBinding(true);\r\n      innerRef.current.addEventListener(\"RICHTEXT#home\", (e) => {\r\n        console.log(e);\r\n      });\r\n      innerRef.current.addEventListener(\"HOME#clicked\", (e) => {\r\n        console.log(e);\r\n      });\r\n      innerRef.current.addEventListener(\"RICHTEXT#about\", (e) => {\r\n        console.log(e);\r\n      });\r\n    }\r\n\r\n    let updatedUniqueComponents = getUniqueComponentsToRegister(props.clan);\r\n    if(!componentsRegistered || isChanged(updatedUniqueComponents, uniqueComponents)) {\r\n      setUniqueComponents(updatedUniqueComponents);\r\n      setComponentsRegistered(false);\r\n      register(updatedUniqueComponents, props.theme)\r\n        .then((componentPropTypeData) => {\r\n          setComponentPropTypes(componentPropTypeData);\r\n          setComponentsRegistered(true);\r\n        });\r\n    }\r\n  }, [props.clan, props.context, props.theme]);\r\n\r\n  let result = <div> loading... </div>;\r\n  if(props.clan && props.clan.length > 0 && componentsRegistered) {\r\n    result = (<div ref={innerRef} data-carbon-theme={props.theme} style={{backgroundColor: \"var(--cds-background)\", minHeight: \"100vh\", maxHeight: \"100vh\", overflow: \"scroll\"}}>\r\n          <style className=\"basetheme\"> \r\n            @import \"./carbon-components.css\";  {/* DONT REMOVE THIS STYLE AS THIS IS USED FOR THEME */}\r\n          </style>\r\n          {/* <GlobalTheme theme={props.theme}> */}\r\n            {renderNodes(props.clan, props.context, props.clan, props.theme)}\r\n          {/* </GlobalTheme> */}\r\n      </div>)\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst isChanged = function(array1, array2) {\r\n  let isChanged = false;\r\n\r\n  array1.forEach((array1Item) => {\r\n    if(array2.indexOf(array1Item) == -1) {\r\n      isChanged = true;\r\n    }\r\n  });\r\n  return isChanged;\r\n}\r\n\r\nconst renderNodes = function (nodes, context, clan, theme) {\r\n  let result = [];\r\n\r\n  nodes && nodes.forEach(node => {\r\n    if(!node.hasOwnProperty(\"visible\") || node.visible) {\r\n      let NodeTag = node.tag;\r\n      let nodeProps = {};\r\n      if(node.props) {\r\n        let nodePropKeys = Object.keys(node.props);\r\n        nodePropKeys = nodePropKeys.filter((nodePropKey) => nodePropKey != \"slotname\");\r\n        nodePropKeys.map((nodePropKey) => {\r\n            if(typeof node.props[nodePropKey] !== \"string\") {\r\n              nodeProps[nodePropKey] = JSON.stringify(node.props[nodePropKey]);\r\n            }else {\r\n              nodeProps[nodePropKey] = node.props[nodePropKey];\r\n            }\r\n          }\r\n        ); {}\r\n        if(node.props.slotname) {\r\n          nodeProps.slot = node.props.slotname;\r\n        }\r\n      }\r\n      if(node.overrides) {\r\n        let overridePropKeys = Object.keys(node.overrides);\r\n        let functions = window?.__SRS__?.functions || {};\r\n        const nodeContext = {\r\n          context, \r\n          clan,\r\n          helper: {\r\n            //add helper methods\r\n            ...functions\r\n          }\r\n        }\r\n        overridePropKeys.map((nodePropKey) => {\r\n          let nodeVal = node.overrides[nodePropKey];\r\n          if(nodeVal.startsWith(\"[[\") && nodeVal.endsWith(\"]]\")) {\r\n            // remove the expression delimiters from the value\r\n            let expression = nodeVal.slice(2, -2);\r\n            let dynamicFunction = new Function(\"api\", `with(api) { return ${expression}; }`);\r\n            nodeProps[nodePropKey] = dynamicFunction(nodeContext);\r\n          }\r\n        });\r\n      }\r\n\r\n      let childNodes = renderNodes(node.children, context, clan, theme);\r\n\r\n      result.push(<NodeTag \r\n        key={node.elementId || node.name}\r\n        elementid={node.elementId || node.id || node.name}\r\n        ref={el => {\r\n          if(!el) return;\r\n          Object.keys(nodeProps).forEach(nodePropKey => {\r\n            try {\r\n              el[nodePropKey] = nodeProps[nodePropKey];\r\n            }catch(err) {\r\n              console.error(err);\r\n            }\r\n          });\r\n          el.context = context; \r\n          el.clan = clan;\r\n          el.theme = theme;\r\n        }}>\r\n        { childNodes }\r\n      </NodeTag>);\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nconst dispatchedEvents = [];\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = []\r\n\r\nconst slots = []; \r\n\r\nexport default ContentRenderer;\r\nconst WrappedComponent = wrapper(React.forwardRef(ContentRenderer), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\n"],"names":["ContentRenderer","props","ref","_useState","useState","clan","_useState2","_slicedToArray","setContents","_useState3","context","_useState4","setContext","_useState5","theme","_useState6","setTheme","_useState7","_useState8","eventBinding","setEventBinding","_useState9","_useState10","componentsRegistered","setComponentsRegistered","_useState11","getUniqueComponentsToRegister","_useState12","uniqueComponents","setUniqueComponents","_useState13","_useState14","setComponentPropTypes","innerRef","useRef","useEffect","document","documentElement","setAttribute","current","addEventListener","e","console","log","updatedUniqueComponents","isChanged","register","then","componentPropTypeData","result","_jsx","children","length","_jsxs","style","backgroundColor","minHeight","maxHeight","overflow","className","renderNodes","array1","array2","forEach","array1Item","indexOf","nodes","node","hasOwnProperty","visible","NodeTag","tag","nodeProps","nodePropKeys","Object","keys","filter","nodePropKey","map","JSON","stringify","slotname","slot","overrides","_window","_window$__SRS__","overridePropKeys","functions","window","__SRS__","nodeContext","helper","_objectSpread","nodeVal","startsWith","endsWith","expression","slice","dynamicFunction","Function","concat","childNodes","push","elementid","elementId","id","name","el","err","error","dispatchedEvents","styles","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}