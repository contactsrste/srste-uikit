{"version":3,"file":"static/js/basic-FormField.59f8f2cb.chunk.js","mappings":"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","sources":["components/basic/FormField.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { register } from \"../../commons/ComponentRegistry\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: \r\n        <srs-form sections=[{name: \"section1\", title: \"Section 1\"}, {name: \"section2\", title: \"Section 2\"}]>\r\n            <srs-form-section name=\"section1\">\r\n                <srs-form-field type=\"input\" value_changed_event=\"\" name=\"field1\" field_data={}/>\r\n                <srs-form-field type=\"input\" name=\"field2\" field_data={}/>\r\n                <srs-form-field type=\"input\" name=\"field3\" field_data={}/>\r\n            </srs-form-section>\r\n            <srs-form-section name=\"section2\">\r\n                ...\r\n            </srs-form-section>\r\n        </srs-form>\r\n*/\r\nconst SrsFormField = function (props, ref) {\r\n    const [fieldData, setFieldData] = useState({type: props.type, name: props.name});\r\n    const [fieldComponentRegistered, setFieldComponentRegistered] = useState(false);\r\n    const [eventInitialised, setEventInitialised] = useState(false);\r\n    const getFieldData = (inputFieldData) => {\r\n        let outputFieldData = {\r\n            valueChangeEventName: \"\",\r\n            tagName: \"\",\r\n        }; \r\n        \r\n        if(inputFieldData.data) {\r\n            let fieldKeys = Object.keys(inputFieldData.data);\r\n            fieldKeys.map((fieldKey) => {\r\n                if(typeof inputFieldData.data[fieldKey] == \"object\") {\r\n                    outputFieldData[fieldKey] = JSON.stringify(inputFieldData.data[fieldKey]);\r\n                }else {\r\n                    outputFieldData[fieldKey] = inputFieldData.data[fieldKey];\r\n                }\r\n            });\r\n        }\r\n\r\n        switch(inputFieldData.type) {\r\n            case \"input\": \r\n                outputFieldData.valueChangeEventName = EventAPI.INPUT_CHANGED;\r\n                outputFieldData.tagName = \"srs-input\";\r\n                break;\r\n            case \"toggle\":\r\n                outputFieldData.valueChangeEventName = EventAPI.TOGGLE_CHANGED;\r\n                outputFieldData.tagName = \"srs-toggle\";\r\n                break;\r\n            case \"dropdown\":\r\n                outputFieldData.valueChangeEventName = EventAPI.DROPDOWN_CHANGED;\r\n                outputFieldData.tagName = \"srs-dropdown\";\r\n                break;\r\n            case \"radio\":\r\n                outputFieldData.valueChangeEventName = EventAPI.RADIO_CHECKED;\r\n                outputFieldData.tagName = \"srs-radiobutton\";\r\n                break;\r\n            case \"select\":\r\n                outputFieldData.valueChangeEventName = EventAPI.SELECT_CHANGED;\r\n                outputFieldData.tagName = \"srs-select\";\r\n                let selectedItems = inputFieldData.formData && inputFieldData.formData[inputFieldData.fieldName]? inputFieldData.formData[inputFieldData.fieldName].value: inputFieldData.data?.selected || [];\r\n                outputFieldData.selected = JSON.stringify(selectedItems);\r\n                break;\r\n            case \"textarea\":\r\n                outputFieldData.valueChangeEventName = EventAPI.TEXTAREA_CHANGED;\r\n                outputFieldData.tagName = \"srs-textarea\";\r\n                break;\r\n            case \"datetime\":\r\n                outputFieldData.valueChangeEventName = EventAPI.DATETIME_CHANGED;\r\n                outputFieldData.tagName = \"srs-datetime\";\r\n                break;\r\n            case \"time\":\r\n                outputFieldData.valueChangeEventName = EventAPI.TIME_CHANGED;\r\n                outputFieldData.tagName = \"srs-time\";\r\n                break;\r\n            case \"typeahead\":\r\n                outputFieldData.valueChangeEventName = EventAPI.TYPEAHEAD_CHANGED;\r\n                outputFieldData.tagName = \"srs-typeahead\";\r\n                break;\r\n            case \"checkbox\":\r\n                outputFieldData.valueChangeEventName = EventAPI.CHECKBOX_CHANGED;\r\n                outputFieldData.tagName = \"srs-checkbox\";\r\n                break;\r\n            case \"fileupload\": \r\n                outputFieldData.valueChangeEventName = EventAPI.FILE_UPLOADED;\r\n                outputFieldData.tagName = \"srs-fileupload\";\r\n                break;\r\n            case \"contenttree\": \r\n                outputFieldData.tagName = \"srs-contenttree\";\r\n                break;\r\n            case \"codeeditor\": \r\n                outputFieldData.tagName = \"srs-codeeditor\";\r\n                break;\r\n            default: \r\n                outputFieldData.valueChangeEventName = inputFieldData.value_changed_event;\r\n                outputFieldData.tagName = inputFieldData.tag_name;\r\n                break;\r\n        }\r\n        return outputFieldData;\r\n    }\r\n    useEffect(() => {\r\n        const currentNode = ref.current;\r\n        if (!currentNode) return;\r\n\r\n        let innerFieldData = getFieldData({fieldName: props.name, type: props.type, data: props.data || {}, formData: props.form_data || {}});\r\n        setFieldData(innerFieldData);\r\n        register([innerFieldData.tagName]).then(() => setFieldComponentRegistered(true));\r\n\r\n        if(ref.current && props.type && !eventInitialised) { \r\n            ref.current.addEventListener(innerFieldData.valueChangeEventName, (evt) => {\r\n                let val = evt.detail;\r\n                if(val.payload) {\r\n                    val = val.payload;\r\n                    if(val.hasOwnProperty(\"value\")) {\r\n                        val = val.value;\r\n                    }\r\n                }\r\n                props.dispatchEvent(EventAPI.FORM_FIELD_VALUE_CHANGED, { payload: {value: val, fieldName: props.name, fieldType: props.type}});\r\n            });\r\n            setEventInitialised(true);\r\n        }\r\n\r\n        var e = ref.current;\r\n        while(e.nodeType != 11) { // 11 = DOCUMENT_FRAGMENT_NODE\r\n            e = e.parentNode;\r\n        }\r\n\r\n        let hostElement = e.host;\r\n        let designtimeWrapper = hostElement.closest(\".element-container\");\r\n        if(!designtimeWrapper) {\r\n            hostElement.style.flexBasis = `${props.width_fraction*100}%`;\r\n            hostElement.style.padding = \"5px\";\r\n        }else {\r\n            designtimeWrapper.style.flexBasis = `${props.width_fraction*100}%`;\r\n            designtimeWrapper.style.padding = \"5px\";\r\n        }\r\n\r\n    }, [props.width_fraction, props.type, props.name, props.data, props.form_data]);\r\n    \r\n    let result = null;\r\n    \r\n    if(fieldData.tagName && fieldComponentRegistered) {\r\n        let value = props.form_data && props.form_data[props.name]? props.form_data[props.name].value: props.value;\r\n        result = React.createElement(fieldData.tagName, {\r\n                    ...fieldData,\r\n                    key: props.elementId || props.name, \r\n                    elementid: props.elementId || props.name,\r\n                    value,\r\n                    ref: el => {\r\n                        if(!el) return;\r\n                        el.context = {...props.context, form: {...props.form_data}};\r\n                        el.clan = [...props.clan];\r\n                    }});\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"name\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"type\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"width_fraction\",\r\n    defaultValue: 0.5,\r\n    type: \"number\"\r\n}, {\r\n    name: \"data\",\r\n    defaultValue: {},\r\n    type: \"object\"\r\n}, {\r\n    name: \"form_data\",\r\n    defaultValue: {},\r\n    type: \"object\"\r\n}];\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsFormField), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsFormField","props","ref","_useState2","_slicedToArray","useState","type","name","fieldData","setFieldData","_useState4","fieldComponentRegistered","setFieldComponentRegistered","_useState6","eventInitialised","setEventInitialised","useEffect","current","innerFieldData","inputFieldData","_inputFieldData$data","outputFieldData","valueChangeEventName","tagName","data","Object","keys","map","fieldKey","_typeof","JSON","stringify","EventAPI","selectedItems","formData","fieldName","value","selected","value_changed_event","tag_name","getFieldData","form_data","register","then","addEventListener","evt","val","detail","payload","hasOwnProperty","dispatchEvent","fieldType","e","nodeType","parentNode","hostElement","host","designtimeWrapper","closest","style","flexBasis","concat","width_fraction","padding","result","React","_objectSpread","key","elementId","elementid","el","context","form","clan","_toConsumableArray","styles","defaultValue","slots","WrappedComponent","wrapper"],"sourceRoot":""}