{"version":3,"file":"static/js/basic-form-TypeAhead.da42ad3a.chunk.js","mappings":"yVAKMA,EAAmB,CAACC,EAAAA,EAAAA,mBAKpBC,EAAe,SAAUC,EAAOC,GAClC,IAAAC,GAA0CC,EAAAA,EAAAA,UAASH,EAAMI,OAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAA9DK,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAA4BN,EAAAA,EAAAA,WAAS,GAAMO,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBG,GAAWC,EAAAA,EAAAA,QAAO,MAsBxB,OApBAC,EAAAA,EAAAA,YAAU,WACNP,EAAiBR,EAAMI,MAC3B,GAAG,CAACJ,EAAMI,SAmBNY,EAAAA,EAAAA,MAACC,EAAAA,IAAQ,CACLC,MAAOlB,EAAMkB,MACbC,GAAInB,EAAMoB,UACVT,OAAQA,EACRP,MAAOG,EAAcc,KAAI,SAACC,GAAI,OAC1BC,EAAAA,EAAAA,KAAA,OAAgBC,QAAS,kBAbrC,SAAyBF,GACrBtB,EAAMyB,cAAc3B,EAAAA,EAAAA,kBAA4B,CAAE4B,QAAS,CAAEC,MAAOL,EAAMH,GAAInB,EAAMoB,aACpFpB,EAAM4B,SAASN,GACfV,GAAU,GACVC,EAASgB,QAAQC,MACrB,CAQ2CC,CAAgBT,EAAK,EAACU,SAChDV,GADKA,EAEJ,IAEVW,cA1BR,SAA2BC,GACvB,IAAMC,EAAQD,EAAME,OAAOT,MACrBU,EAAWrC,EAAMI,MAAMkC,QAAO,SAAChB,GAAI,OACrCA,EAAKiB,cAAcC,SAASL,EAAMI,cAAc,IAEpD/B,EAAiB6B,GACjBzB,GAAU,EACd,EAoBQ6B,YAAazC,EAAMyC,YACnBC,aAAc1C,EAAM2C,cACpB1C,IAAKY,EAASmB,SAAA,EACdT,EAAAA,EAAAA,KAACqB,EAAAA,IAAS,KACVrB,EAAAA,EAAAA,KAAA,sBAGZ,EAEMsB,EAAM,WAGN7C,EAAQ,CAAC,CACX8C,KAAM,QACNC,aAAc,QACdC,KAAM,UACP,CACCF,KAAM,cACNC,aAAc,YACdC,KAAM,UACP,CACCF,KAAM,gBACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,QACNC,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQC,EAAAA,WAAiBrD,GAAeC,E","sources":["components/basic/form/TypeAhead.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport { ComboBox, TextInput, ComboBoxMenu } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.TYPEAHEAD_CHANGED];\r\n\r\n/*\r\n    Example: <srs-typeahead status=\"error\" content=\"Please contact system administrator.\" prefix=\"error\"/>\r\n*/\r\nconst SrsTypeAhead = function (props, ref) {\r\n    const [filteredItems, setFilteredItems] = useState(props.items || []);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setFilteredItems(props.items);\r\n    }, [props.items]);\r\n\r\n    function handleInputChange(event) {\r\n        const query = event.target.value;\r\n        const filtered = props.items.filter((item) =>\r\n            item.toLowerCase().includes(query.toLowerCase())\r\n        );\r\n        setFilteredItems(filtered);\r\n        setIsOpen(true);\r\n    }\r\n\r\n    function handleItemClick(item) {\r\n        props.dispatchEvent(EventAPI.TYPEAHEAD_CHANGED, { payload: { value: item, id: props.elementid } });\r\n        props.setValue(item);\r\n        setIsOpen(false);\r\n        inputRef.current.blur();\r\n    }\r\n\r\n    return (\r\n        <ComboBox\r\n            label={props.label}\r\n            id={props.elementid}\r\n            isOpen={isOpen}\r\n            items={filteredItems.map((item) => (\r\n                <div key={item} onClick={() => handleItemClick(item)}>\r\n                    {item}\r\n                </div>\r\n            ))}\r\n            onInputChange={handleInputChange}\r\n            placeholder={props.placeholder}\r\n            selectedItem={props.selected_item}\r\n            ref={inputRef}>\r\n            <TextInput />\r\n            <srs-combomenu />\r\n        </ComboBox>\r\n    );\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"Label\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"placeholder\",\r\n    defaultValue: \"Search...\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"selected_item\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"items\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsTypeAhead), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsTypeAhead","props","ref","_useState","useState","items","_useState2","_slicedToArray","filteredItems","setFilteredItems","_useState3","_useState4","isOpen","setIsOpen","inputRef","useRef","useEffect","_jsxs","ComboBox","label","id","elementid","map","item","_jsx","onClick","dispatchEvent","payload","value","setValue","current","blur","handleItemClick","children","onInputChange","event","query","target","filtered","filter","toLowerCase","includes","placeholder","selectedItem","selected_item","TextInput","styles","name","defaultValue","type","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}