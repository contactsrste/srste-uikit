{"version":3,"file":"static/js/basic-SessionValidator.801e0460.chunk.js","mappings":"yVAKMA,EAAmB,GAKnBC,EAAsB,SAAUC,EAAOC,GACzC,IAAAC,GAAoCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAoBhC,OAlBAI,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAWC,aAAY,WACzB,IAAMC,EAAqBC,SAASC,EAAAA,EAAAA,IAAWb,EAAMc,cAC/CC,EAAyBH,SAASC,EAAAA,EAAAA,IAAW,qBAAuB,KACpEG,EAAMC,KAAKD,MAEjB,GAAIL,GAAsBK,EAAML,EAAqBI,EACjDG,MAAM,4CACNC,cAAcV,GACdT,EAAMoB,cAAcC,EAAAA,EAAAA,gBAA0B,CAAC,OAC5C,CACH,IAAMC,EAAWC,KAAKC,MAAMb,EAAqBI,EAAyBC,GAAG,KAC7ET,EAAc,GAADkB,OAAIH,EAAQ,YAC7B,CACJ,GAAG,KACH,OAAO,kBAAMH,cAAcV,EAAU,CACzC,GAAG,IAECH,GACOoB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,+BAA6BrB,EAAW,eAE7C,IAEf,EAEMsB,EAAM,WAGN5B,EAAQ,CAAC,CACX6B,KAAM,cACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,aACNC,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQC,EAAAA,WAAiBpC,GAAsBC,E","sources":["components/basic/SessionValidator.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport cookie from \"js-cookie\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-sessionvalidator cookie_name=\"mysessionid\" alert_when=60000/>\r\n*/\r\nconst SrsSessionValidator = function (props, ref) {\r\n    const [expiryTime, setExpiryTime] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            const sessionLastTouched = parseInt(cookie.get(props.cookie_name));\r\n            const sessionTimeoutInterval = parseInt(cookie.get(\"SESSION_TIMEOUT\")) || 3600000;\r\n            const now = Date.now();\r\n\r\n            if (sessionLastTouched && now > sessionLastTouched + sessionTimeoutInterval) {\r\n                alert(\"Session has expired. Please login again.\");\r\n                clearInterval(interval);\r\n                props.dispatchEvent(EventAPI.SESSION_EXPIRED, {});\r\n            } else {\r\n                const timeLeft = Math.ceil((sessionLastTouched + sessionTimeoutInterval - now) / (60*1000));\r\n                setExpiryTime(`${timeLeft} minutes`);\r\n            }\r\n        }, 10000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    if (expiryTime) {\r\n        return <div>Your session will expire in {expiryTime} minutes.</div>;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"cookie_name\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"alert_when\",\r\n    defaultValue: \"\",\r\n    type: \"number\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsSessionValidator), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsSessionValidator","props","ref","_useState","useState","_useState2","_slicedToArray","expiryTime","setExpiryTime","useEffect","interval","setInterval","sessionLastTouched","parseInt","cookie","cookie_name","sessionTimeoutInterval","now","Date","alert","clearInterval","dispatchEvent","EventAPI","timeLeft","Math","ceil","concat","_jsxs","children","styles","name","defaultValue","type","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}