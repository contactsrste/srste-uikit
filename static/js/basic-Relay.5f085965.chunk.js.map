{"version":3,"file":"static/js/basic-Relay.5f085965.chunk.js","mappings":"msCAIA,IAAMA,EAAmB,GAKnBC,EAAW,SAAUC,EAAOC,GAC9B,IAAMC,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,EAAa,SAACC,EAAUC,GAC1B,OAAO,SAACC,EAAWC,GAAkB,IAADC,EAAAC,GAGV,QAAnBD,EAAAD,EAAaG,cAAM,IAAAF,GAAS,QAATC,EAAnBD,EAAqBG,eAAO,IAAAF,OAAT,EAAnBA,EAA8BG,KAAMR,GACnCL,EAAMc,cAAcR,E,+VAAMS,CAAA,GAAMP,EAAaG,QAErD,CACJ,EACMK,EAAY,CAAC,EACfC,EAAS,GAsBb,OArBAC,EAAAA,EAAAA,YAAU,WAWN,OAVGlB,EAAMmB,WAAanB,EAAMmB,UAAUC,OAAS,GAC3CpB,EAAMmB,UAAUE,KAAI,SAACC,GACjB,IAAIN,EAAUM,EAAUC,aAAe,IAAMD,EAAUE,gBAAiB,CACpER,EAAUM,EAAUC,aAAe,IAAMD,EAAUE,gBAAkBpB,EAAWkB,EAAUE,eAAgBF,EAAUhB,QACpH,IAAImB,EAAQC,IAAAA,UAAiBJ,EAAUC,aAAcP,EAAUM,EAAUC,aAAe,IAAMD,EAAUE,iBACxGP,EAAOU,KAAKF,EAEhB,CACJ,IAEG,WAMHR,EAAOI,KAAI,SAACI,GAAK,OAAKC,IAAAA,YAAmBD,EAAM,GACnD,CACJ,GAAG,CAACzB,EAAMmB,YAEFS,EAAAA,cAAA,OAAK3B,IAAKC,GAAU0B,EAAAA,cAAA,aAChC,EAEMC,EAAM,KAEN7B,EAAQ,CAAC,CACX8B,KAAM,YACNC,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQP,EAAAA,WAAiB7B,GAAWC,E","sources":["components/basic/Relay.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport PubSub from 'pubsub-js';\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-relay relaylist=[{source_event: \"XYZ\", source_element: \"abc\", target: \"LML\"}]/>\r\n*/\r\nconst SrsRelay = function (props, ref) {\r\n    const innerRef = useRef(null);\r\n\r\n    const redispatch = (sourceId, target) => {\r\n        return (eventName, eventPayload) => {\r\n            // evt.stopPropagation();\r\n            // evt.preventDefault();\r\n            if(eventPayload.detail?.payload?.id == sourceId) {\r\n                props.dispatchEvent(target, {...eventPayload.detail});\r\n            }\r\n        }\r\n    }\r\n    const listeners = {};\r\n    let tokens = [];\r\n    useEffect(() => {\r\n        if(props.relaylist && props.relaylist.length > 0) {\r\n            props.relaylist.map((relayItem) => {\r\n                if(!listeners[relayItem.source_event + \"_\" + relayItem.source_element]) {\r\n                    listeners[relayItem.source_event + \"_\" + relayItem.source_element] = redispatch(relayItem.source_element, relayItem.target);\r\n                    let token = PubSub.subscribe(relayItem.source_event, listeners[relayItem.source_event + \"_\" + relayItem.source_element]);\r\n                    tokens.push(token);\r\n                    // innerRef.current.addEventListener(relayItem.source, listeners[relayItem.source]);\r\n                }\r\n            });\r\n        }\r\n        return () => {\r\n            // if(innerRef.current && props.relaylist && props.relaylist.length > 0) {\r\n            //     props.relaylist.map((relayItem) => {\r\n            //         innerRef.current.removeEventListener(relayItem.source, listeners[relayItem.source]);\r\n            //     });\r\n            // }\r\n            tokens.map((token) => PubSub.unsubscribe(token));\r\n        }\r\n    }, [props.relaylist]);\r\n\r\n    return (<div ref={innerRef}><slot/></div>);\r\n}\r\n\r\nconst styles = `\r\n`\r\nconst props = [{\r\n    name: \"relaylist\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsRelay), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsRelay","props","ref","innerRef","useRef","redispatch","sourceId","target","eventName","eventPayload","_eventPayload$detail","_eventPayload$detail$","detail","payload","id","dispatchEvent","_objectSpread","listeners","tokens","useEffect","relaylist","length","map","relayItem","source_event","source_element","token","PubSub","push","React","styles","name","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}