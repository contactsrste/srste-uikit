{"version":3,"file":"static/js/basic-ContentTree.8d943294.chunk.js","mappings":"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","sources":["components/basic/ContentTree.js","components/basic/Icon.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { TreeView, TreeNode } from \"carbon-components-react\";\r\nimport SrsIcon from \"./Icon\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [\"ABOUT#clicked\"];\r\n\r\n/*\r\n    Example: <srs-contenttree items=[{name: \"Node1\", label: \"Node 1\", children: [{name: \"Node11\", label: \"Node 11\"}]}, {name: \"Node2\", label: \"Node 2\", children: [{name: \"Node21\", label: \"Node 21\"}]}]/>\r\n*/\r\n\r\nconst SrsContentTree = function (props, ref) {\r\n    const [expandedNodes, setExpandedNodes] = React.useState([]);\r\n\r\n    const handleToggle = (name) => {\r\n      if (expandedNodes.includes(name)) {\r\n        setExpandedNodes(expandedNodes.filter((node) => node !== name));\r\n      } else {\r\n        setExpandedNodes([...expandedNodes, name]);\r\n      }\r\n    };\r\n\r\n    const treeRef = useRef(null);\r\n    useEffect(() => {\r\n        if (treeRef.current) {\r\n            treeRef.current.addEventListener(EventAPI.ICON_CLICKED, (evt) => {\r\n                console.log(evt.detail.id);\r\n            })\r\n        }\r\n    }, [props]);\r\n\r\n    const nodeActions = () => {\r\n        return (<div style={{ display: \"flex\", flexDirection: \"row\", padding: \"0px 10px\"}}>\r\n                <srs-icon name=\"Add\" size=\"16\" style={{cursor: \"pointer\"}} elementid=\"node1-add\"/>\r\n                <srs-icon name=\"TrashCan\" size=\"16\" style={{cursor: \"pointer\"}} elementid=\"node1-trashcan\"/>\r\n            </div>)\r\n    }\r\n\r\n    const renderTreeNodes = (items) => {\r\n        const nodes = [];\r\n        if(items && items.length > 0) {\r\n            items.forEach((item, index) => {\r\n            const isExpanded = expandedNodes.includes(item.name);\r\n            const hasChildren = item.children?.length > 0;\r\n        \r\n            nodes.push(<TreeNode isExpanded={isExpanded} data-testid={item.name} label={item.label} renderIcon={() => {\r\n                            return (<div style={{ display: \"flex\", flexDirection: \"row\", padding: \"0px 10px\"}}>\r\n                                <srs-icon name=\"Add\" size=\"16\" style={{cursor: \"pointer\"}} elementid={item.name}/>\r\n                                <srs-icon name=\"TrashCan\" size=\"16\" style={{cursor: \"pointer\"}} elementid={item.name}/>\r\n                            </div>)\r\n                        }}>\r\n                    {item.children? renderTreeNodes(item.children): null}\r\n                    </TreeNode>);\r\n            });\r\n        }\r\n    \r\n        return nodes;\r\n    };\r\n\r\n    let x = <div ref={treeRef}>\r\n        <TreeView label=\"Tree View\">\r\n            <TreeNode isExpanded={true} data-testid=\"Node 1\" label=\"Node 1\" renderIcon={() => {\r\n                return (<div style={{ display: \"flex\", flexDirection: \"row\", padding: \"0px 10px\"}}>\r\n                        <srs-icon name=\"Add\" size=\"16\" style={{cursor: \"pointer\"}} elementid=\"node1-add\"/>\r\n                        <srs-icon name=\"TrashCan\" size=\"16\" style={{cursor: \"pointer\"}} elementid=\"node1-trashcan\"/>\r\n                    </div>)\r\n            }}>\r\n                <TreeNode data-testid=\"Node 2\" label=\"Node 2\" />\r\n            </TreeNode>\r\n        </TreeView>\r\n    </div>\r\n\r\n    return <div ref={treeRef}>\r\n        <TreeView>\r\n            {renderTreeNodes(props.items)}\r\n        </TreeView></div>;\r\n}\r\n\r\nconst styles = `\r\n    .cds--tree {\r\n        width: 100% !important;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"items\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsContentTree), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/*\r\n    Example: <srs-icon name=\"Add\" description=\"Add an item\"/>\r\n*/\r\n\r\nconst dispatchedEvents = [EventAPI.ICON_CLICKED];\r\n\r\nconst SrsIcon = function (props, ref) {\r\n    const [iconInstance, setIconInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if(!props.type || props.type == \"carbon\") {\r\n            if(props.name) {\r\n                import('@carbon/icons-react').then((iconLibrary)=> {\r\n                    setIconInstance(iconLibrary[props.name]);\r\n                });\r\n            }\r\n        }else if(props.type == \"fontawesome\") {\r\n            import(\"@fortawesome/free-solid-svg-icons\").then((iconLibrary) => {\r\n                let iconNameParts = props.name.split(\"-\");\r\n                iconNameParts = iconNameParts.map((iconNamePart) => iconNamePart[0].toUpperCase() + iconNamePart.substring(1));\r\n                let moduleName = \"fa\" + iconNameParts.join(\"\");\r\n                setIconInstance(iconLibrary[moduleName]);\r\n                library.add(iconLibrary[moduleName]);\r\n            });            \r\n        }\r\n    }, [props.name, props.type]);\r\n    \r\n    let inlineStyles = {\r\n       color: props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\"),\r\n       \"--cds-icon-primary\": props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\")\r\n    };\r\n\r\n    const handleClick = (props) => {\r\n        return (evt) => {\r\n            props.dispatchEvent && props.dispatchEvent(EventAPI.ICON_CLICKED, {name: props.name, id: props.elementid})\r\n            if(props.onClick) {\r\n                props.onClick({name: props.name, id: props.elementid});\r\n            }\r\n        }\r\n    }\r\n\r\n    let iconEl = null;\r\n    if(!props.type || props.type == \"carbon\") {\r\n        let IconInstance = iconInstance;\r\n        iconEl = <IconInstance size={props.size || 24} onClick={handleClick(props)}/>;\r\n    }else if(props.type == \"fontawesome\") {\r\n        iconEl = <FontAwesomeIcon style={{cursor: \"pointer\", height: props.height || props.size, width: props.width || props.size, color: props.color}} \r\n                    onClick={handleClick(props)}\r\n                    title={props.description}\r\n                    icon={props.name}/>\r\n    }\r\n\r\n    return iconInstance? <div style={inlineStyles}>\r\n            { iconEl } \r\n        </div>: <div/>\r\n}\r\n\r\nconst styles = `\r\n\r\n`\r\nconst props = [{\r\n    name: \"name\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"description\",\r\n    defaultValue: true,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"size\",\r\n    defaultValue: 24,\r\n    type: \"number\"\r\n}, {\r\n    name: \"color\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsIcon), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\nexport default SrsIcon;"],"names":["dispatchedEvents","SrsContentTree","props","ref","_React$useState2","_slicedToArray","React","expandedNodes","treeRef","useRef","useEffect","current","addEventListener","EventAPI","evt","console","log","detail","id","TreeView","TreeNode","renderTreeNodes","items","nodes","length","forEach","item","index","_item$children","isExpanded","includes","name","children","push","label","renderIcon","style","display","flexDirection","padding","size","cursor","elementid","styles","defaultValue","type","slots","WrappedComponent","wrapper","SrsIcon","_useState2","useState","iconInstance","setIconInstance","then","iconLibrary","iconNameParts","split","moduleName","map","iconNamePart","toUpperCase","substring","join","library","inlineStyles","color","theme","handleClick","dispatchEvent","onClick","iconEl","FontAwesomeIcon","height","width","title","description","icon","IconInstance"],"sourceRoot":""}