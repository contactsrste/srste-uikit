{"version":3,"file":"static/js/basic-CodeEditor.cc0331ca.chunk.js","mappings":"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","sources":["components/basic/CodeEditor.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport * as monaco from 'monaco-editor';\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.EDITORCODE_CHANGED];\r\n\r\n/*\r\n    Example: <srs-codeeditor value=\"/>\r\n*/\r\nconst SrsCodeEditor = function (props, ref) {\r\n\r\n    const [editor, setEditor] = useState(null);\r\n    const editorRef = useRef(null);\r\n\r\n    let codeValue = (props.value + \"\") || \"\";\r\n    let position = props.position || {line: 1, column: 0};\r\n    \r\n\r\n    window.MonacoEnvironment = window.MonacoEnvironment || {\r\n        getWorkerUrl: function (moduleId, label) {\r\n            if (label === 'json') {\r\n                return './json.worker.bundle.js';\r\n            }\r\n            if (label === 'css' || label === 'scss' || label === 'less') {\r\n                return './css.worker.bundle.js';\r\n            }\r\n            if (label === 'html' || label === 'handlebars' || label === 'razor') {\r\n                return './html.worker.bundle.js';\r\n            }\r\n            if (label === 'typescript' || label === 'javascript') {\r\n                return './ts.worker.bundle.js';\r\n            }\r\n            return './editor.worker.bundle.js';\r\n        }\r\n    };\r\n\r\n    const getCompletionItems = () => {\r\n        // Add code for building a content tree of components and its properties\r\n        const components = [{ name: \"component1\", props: { prop1: \"test1\", prop2: \"red\" }, children: [{ name: \"component2\", props: { prop3: \"test3\", prop4: \"world\" } }] }];\r\n        const completionItems = [];\r\n        components.forEach(component => {\r\n            let children = [];\r\n            if (component.children) {\r\n                children = component.children.map(child => {\r\n                    return {\r\n                        label: child.name,\r\n                        kind: monaco.languages.CompletionItemKind.Class,\r\n                        insertText: child.name,\r\n                        documentation: child.props\r\n                    }\r\n                });\r\n            }\r\n            completionItems.push({\r\n                label: component.name,\r\n                kind: monaco.languages.CompletionItemKind.Class,\r\n                insertText: component.name,\r\n                documentation: component.props,\r\n                children: children\r\n            });\r\n        });\r\n    }\r\n\r\n    const dispatchEditorCode = () => {\r\n        props.dispatchEvent(EventAPI.EDITORCODE_CHANGED, { payload: { id: props.id || props.elementid, value: codeValue, position } });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(props.shadowRoot) {\r\n            props.shadowRoot.addEventListener(\"blur\", dispatchEditorCode, { capture: true, composed: true })\r\n        }\r\n        return () => {\r\n            if(props.shadowRoot) {\r\n                props.shadowRoot.removeEventListener(\"blur\", dispatchEditorCode);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n\r\n            let theme = \"vs-dark\";\r\n            if (props.theme == \"white\" || props.theme == \"g10\") {\r\n                theme = \"vs\"\r\n            } else if (props.theme == \"g90\" || props.theme == \"g100\") {\r\n                theme = \"vs-dark\";\r\n            }\r\n\r\n\r\n            // Copy over editor styles\r\n            const style = document.querySelector(\r\n                \"link[rel='stylesheet'][data-name='vs/editor/editor.main']\"\r\n            );\r\n            ref.current.appendChild(style.cloneNode(true));\r\n            let containerEl = ref.current.querySelector(\"#container\");\r\n            if (!editor) {\r\n                const workerUrl = URL.createObjectURL(new Blob([`\r\n                    self.MonacoEnvironment = {\r\n                        baseUrl: '/monaco-editor/min',\r\n                        paths: {\r\n                            vs: '/monaco-editor/min/vs'\r\n                        },\r\n                        getWorkerUrl: function (moduleId, label) {\r\n                            if (label === 'json') {\r\n                                return './language/json/jsonWorker.js';\r\n                            }\r\n                            if (label === 'css' || label === 'scss' || label === 'less') {\r\n                                return './language/css/cssWorker.js';\r\n                            }\r\n                            if (label === 'html' || label === 'handlebars' || label === 'razor') {\r\n                                return './language/html/htmlWorker.js';\r\n                            }\r\n                            if (label === 'typescript' || label === 'javascript') {\r\n                                return './language/typescript/tsWorker.js';\r\n                            }\r\n                            return '../base/worker/workerMain.js';\r\n                        }\r\n                    };\r\n                `], { type: 'text/javascript' }));\r\n\r\n                monaco.languages.json.jsonDefaults.setModeConfiguration({\r\n                    ...monaco.languages.json.jsonDefaults.modeConfiguration,\r\n                    worker: {\r\n                        id: 'json',\r\n                        label: 'json',\r\n                        src: workerUrl\r\n                    }\r\n                });\r\n                monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\r\n                    noSemanticValidation: true,\r\n                    noSyntaxValidation: true,\r\n                });\r\n\r\n                monaco.languages.css.cssDefaults.setModeConfiguration({\r\n                    ...monaco.languages.css.cssDefaults.modeConfiguration,\r\n                    worker: {\r\n                        id: 'css',\r\n                        label: 'css',\r\n                        src: workerUrl\r\n                    }\r\n                });\r\n                monaco.languages.css.cssDefaults.setDiagnosticsOptions({\r\n                    noSemanticValidation: true,\r\n                    noSyntaxValidation: true,\r\n                });\r\n\r\n                monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\r\n                    target: monaco.languages.typescript.ScriptTarget.ES2015,\r\n                    allowNonTsExtensions: true\r\n                });\r\n                monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\r\n                    noSemanticValidation: true,\r\n                    noSyntaxValidation: true,\r\n                });\r\n\r\n                monaco.languages.typescript.javascriptDefaults.setWorkerOptions({\r\n                    ...monaco.languages.typescript.javascriptDefaults.workerOptions,\r\n                    module: \"commonjs\",\r\n                    worker: {\r\n                        id: 'js',\r\n                        label: 'js',\r\n                        src: workerUrl\r\n                    }\r\n                });\r\n\r\n                // Set the mode configuration for JavaScript\r\n                monaco.languages.typescript.javascriptDefaults.setEagerModelSync(true);\r\n\r\n                monaco.languages.html.htmlDefaults.setModeConfiguration({\r\n                    ...monaco.languages.html.htmlDefaults.modeConfiguration,\r\n                    worker: {\r\n                        id: 'html',\r\n                        label: 'html',\r\n                        src: workerUrl\r\n                    }\r\n                });\r\n\r\n                let value = !props.language || props.language == \"json\"? JSON.stringify(props.value, null, 4): props.value;\r\n\r\n                let editorNode = monaco.editor.create(containerEl, {\r\n                    automaticLayout: true,\r\n                    language: \"json\" || props.language,\r\n                    value: value,\r\n                    position: props.position,\r\n                    scrollBeyondLastLine: false,\r\n                    minimap: true,\r\n                    theme: theme,\r\n                    suggest: {\r\n                        triggerCharacters: ['.', ':'],\r\n                        completionItems: getCompletionItems()\r\n                    },\r\n                    quickSuggestions: false, // Disable quick suggestions\r\n                    wordBasedSuggestions: false, // Disable word-based suggestions\r\n                    diagnostics: false // Disable diagnostics\r\n                });\r\n                    \r\n                editorNode.getModel().onDidChangeContent(() => {\r\n                    codeValue = editorNode.getValue();\r\n                    position = editorNode.getPosition();\r\n                    // props.dispatchEvent(EventAPI.EDITORCODE_CHANGED, { payload: { id: props.id || props.elementid, value: value, position } });\r\n                });\r\n\r\n                // Add toolbar buttons\r\n                editorNode.addAction({\r\n                    id: \"collapse-all\",\r\n                    label: \"Collapse All\",\r\n                    keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.US_MINUS],\r\n                    run: function (ed) {\r\n                        ed.getAction(\"editor.foldAll\").run();\r\n                    }\r\n                });\r\n\r\n                editorNode.addAction({\r\n                    id: \"expand-all\",\r\n                    label: \"Expand All\",\r\n                    keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.US_EQUAL],\r\n                    run: function (ed) {\r\n                        ed.getAction(\"editor.unfoldAll\").run();\r\n                    }\r\n                });\r\n                editorNode.addAction({\r\n                    id: \"full-screen\",\r\n                    label: \"Full Screen\",\r\n                    keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_F],\r\n                    run: function (ed) {\r\n                        const container = ed.getDomNode();\r\n                        if (container.requestFullscreen) {\r\n                            container.requestFullscreen();\r\n                        } else if (container.msRequestFullscreen) {\r\n                            container.msRequestFullscreen();\r\n                        } else if (container.mozRequestFullScreen) {\r\n                            container.mozRequestFullScreen();\r\n                        } else if (container.webkitRequestFullscreen) {\r\n                            container.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                editorNode.addAction({\r\n                    id: \"exit-full-screen\",\r\n                    label: \"Exit Full Screen\",\r\n                    keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.Escape],\r\n                    run: function (ed) {\r\n                        if (document.exitFullscreen) {\r\n                            document.exitFullscreen();\r\n                        } else if (document.msExitFullscreen) {\r\n                            document.msExitFullscreen();\r\n                        } else if (document.mozCancelFullScreen) {\r\n                            document.mozCancelFullScreen();\r\n                        } else if (document.webkitExitFullscreen) {\r\n                            document.webkitExitFullscreen();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                setEditor(editorNode);\r\n\r\n            } else {\r\n                if(editor.getValue() != props.value) {\r\n                    // editor.setTheme(props.theme);\r\n                    \r\n                    if(!props.language || props.language == \"json\" && typeof props.value == \"string\") {\r\n                        let editorValue = props.value;\r\n                        editorValue = JSON.parse(props.value);\r\n                        editorValue = JSON.stringify(editorValue, null, 4);\r\n                        editor.setValue(editorValue);\r\n                    }else {\r\n                        editor.setValue(props.value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [props.theme, props.value, props.language]);\r\n\r\n    return (<>\r\n        {props.label ? <label class=\"cds--label\" style={{ margin: \"5px 0px\" }}>{props.label}</label> : null}\r\n        <div ref={ref} style={{ width: props.width, height: props.height, border: \"1px solid lightgrey\", padding: \"0px 5px\", margin: \"5px 0px\", borderRadius: 5, backgroundColor: \"var(--cds-field)\" }}>\r\n            <div id=\"container\" ref={editorRef}></div>\r\n        </div>\r\n    </>);\r\n}\r\n\r\nconst styles = `\r\n    #container {\r\n        overflow: hidden; width: 100%; height: 100%;\r\n    }\r\n    .monaco-editor, .decorationsOverviewRuler, .minimap {\r\n        --vscode-editor-background: var(--cds-field) !important;\r\n    }\r\n    .monaco-editor .margin {\r\n        --vscode-editorGutter-background: var(--cds-field) !important;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"value\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"language\",\r\n    defaultValue: \"javascript\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"height\",\r\n    defaultValue: \"200px\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"width\",\r\n    defaultValue: \"40vw\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"position\",\r\n    defaultValue: {\"line\": 1, \"column\": 0},\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsCodeEditor), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsCodeEditor","props","ref","_useState2","_slicedToArray","useState","editor","setEditor","editorRef","useRef","codeValue","value","position","line","column","window","MonacoEnvironment","getWorkerUrl","moduleId","label","getCompletionItems","completionItems","name","prop1","prop2","children","prop3","prop4","forEach","component","map","child","kind","monaco","insertText","documentation","push","dispatchEditorCode","dispatchEvent","payload","id","elementid","useEffect","shadowRoot","addEventListener","capture","composed","removeEventListener","current","theme","style","document","querySelector","appendChild","cloneNode","containerEl","getValue","language","editorValue","JSON","parse","stringify","setValue","workerUrl","URL","createObjectURL","Blob","type","_objectSpread","worker","src","noSemanticValidation","noSyntaxValidation","target","allowNonTsExtensions","module","editorNode","automaticLayout","scrollBeyondLastLine","minimap","suggest","triggerCharacters","quickSuggestions","wordBasedSuggestions","diagnostics","getModel","onDidChangeContent","getPosition","addAction","keybindings","run","ed","getAction","container","getDomNode","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","Element","ALLOW_KEYBOARD_INPUT","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","React","class","margin","width","height","border","padding","borderRadius","backgroundColor","styles","defaultValue","slots","WrappedComponent","wrapper"],"sourceRoot":""}