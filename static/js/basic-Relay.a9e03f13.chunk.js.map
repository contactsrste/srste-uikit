{"version":3,"file":"static/js/basic-Relay.a9e03f13.chunk.js","mappings":"8iDAKA,IAAMA,EAAmB,GAKnBC,EAAW,SAAUC,EAAOC,GAC9B,IAAMC,GAAWC,EAAAA,EAAAA,QAAO,MAYlBC,EAAY,CAAC,EACfC,EAAS,GAgBb,OAfAC,EAAAA,EAAAA,YAAU,WAUN,OATGN,EAAMO,WAAa,IAAM,QAAUP,EAAMQ,WAAaR,EAAMQ,UAAUC,OAAS,GAC9ET,EAAMQ,UAAUE,KAAI,SAACC,GACjB,IAAIP,EAAUO,EAAUC,aAAe,IAAMD,EAAUE,gBAAiB,CACpET,EAAUO,EAAUC,aAAe,IAAMD,EAAUE,iBAAkBC,EAAAA,EAAAA,WAhBjEC,EAgBqFJ,EAAUE,eAhBrFG,EAgBqGL,EAAUK,OAhBvGC,EAgB+GN,EAAUO,eAfpJ,SAACC,EAAWC,GAAkB,IAADC,EAAAC,EAC5BC,EAAmBN,GAAgB,CAAC,EACxC,IAAsB,QAAnBI,EAAAD,EAAaI,cAAM,IAAAH,GAAS,QAATC,EAAnBD,EAAqBI,eAAO,IAAAH,OAAT,EAAnBA,EAA8BI,KAAMX,EAAU,CAC7C,IAAIY,EAAeP,EAAaI,QAAU,CAAC,EAC3CG,EAAaF,QAAOG,EAAAA,EAAA,GAAOD,EAAaF,SAAYF,GACpDvB,EAAM6B,cAAcb,EAAQW,EAChC,CACJ,GAQ4K,IAChK,IAAIG,EAAQC,IAAAA,UAAiBpB,EAAUC,aAAcR,EAAUO,EAAUC,aAAe,IAAMD,EAAUE,iBACxGR,EAAO2B,KAAKF,EAChB,CAnBO,IAACf,EAAUC,EAAQC,CAoB9B,IAEG,WACHZ,EAAOK,KAAI,SAACoB,GAAK,OAAKC,IAAAA,YAAmBD,EAAM,GACnD,CACJ,GAAG,CAAC9B,EAAMQ,YAEFyB,EAAAA,cAAA,OAAKhC,IAAKC,GAAU+B,EAAAA,cAAA,aAChC,EAEMC,EAAM,KAENlC,EAAQ,CAAC,CACXmC,KAAM,YACNC,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQP,EAAAA,WAAiBlC,GAAWC,E","sources":["components/basic/Relay.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport PubSub from 'pubsub-js';\r\nimport { debounce } from 'lodash';\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-relay relaylist=[{source_event: \"XYZ\", source_element: \"abc\", target: \"LML\", add_to_payload: {...}}]/>\r\n*/\r\nconst SrsRelay = function (props, ref) {\r\n    const innerRef = useRef(null);\r\n\r\n    const redispatch = (sourceId, target, addToPayload) => {\r\n        return (eventName, eventPayload) => {\r\n            let miscEventPayload = addToPayload || {};\r\n            if(eventPayload.detail?.payload?.id == sourceId) {\r\n                let eventDetails = eventPayload.detail || {};\r\n                eventDetails.payload = {...eventDetails.payload, ...miscEventPayload};\r\n                props.dispatchEvent(target, eventDetails);\r\n            }\r\n        }\r\n    }\r\n    const listeners = {};\r\n    let tokens = [];\r\n    useEffect(() => {\r\n        if(props.designtime + \"\" != \"true\" && props.relaylist && props.relaylist.length > 0) {\r\n            props.relaylist.map((relayItem) => {\r\n                if(!listeners[relayItem.source_event + \"_\" + relayItem.source_element]) {\r\n                    listeners[relayItem.source_event + \"_\" + relayItem.source_element] = debounce(redispatch(relayItem.source_element, relayItem.target, relayItem.add_to_payload), 50);\r\n                    let token = PubSub.subscribe(relayItem.source_event, listeners[relayItem.source_event + \"_\" + relayItem.source_element]);\r\n                    tokens.push(token);\r\n                }\r\n            });\r\n        }\r\n        return () => {\r\n            tokens.map((token) => PubSub.unsubscribe(token));\r\n        }\r\n    }, [props.relaylist]);\r\n\r\n    return (<div ref={innerRef}><slot/></div>);\r\n}\r\n\r\nconst styles = `\r\n`\r\nconst props = [{\r\n    name: \"relaylist\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsRelay), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsRelay","props","ref","innerRef","useRef","listeners","tokens","useEffect","designtime","relaylist","length","map","relayItem","source_event","source_element","debounce","sourceId","target","addToPayload","add_to_payload","eventName","eventPayload","_eventPayload$detail","_eventPayload$detail$","miscEventPayload","detail","payload","id","eventDetails","_objectSpread","dispatchEvent","token","PubSub","push","React","styles","name","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}