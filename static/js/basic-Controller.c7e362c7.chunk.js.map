{"version":3,"file":"static/js/basic-Controller.c7e362c7.chunk.js","mappings":"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","sources":["commons/ExternalAPIUtil.js","components/basic/Controller.js"],"sourcesContent":["export const getAdditionalAPIs = () => {\r\n    const OPENAI_API_KEY = \"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\";\r\n    const { Configuration, OpenAIApi } = require(\"openai\");\r\n    const configuration = new Configuration({\r\n        apiKey: OPENAI_API_KEY,\r\n    });\r\n    const openai = new OpenAIApi(configuration);\r\n\r\n    return {\r\n        openai\r\n    }\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport PubSub from 'pubsub-js';\r\nimport { getAdditionalAPIs } from \"../../commons/ExternalAPIUtil\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-controller handlers=[{eventName: \"XYZ\", type: \"script\", script: `(function(eventPayload) { console.log(eventPayload)})`}]/>\r\n*/\r\nconst SrsController = function (props, ref) {\r\n\r\n    const findElement = (key, nestedContents) => {\r\n        for (let element of nestedContents) {\r\n            if (element.elementId === key) {\r\n                return element;\r\n            } else if (element.children) {\r\n                const found = findElement(key, element.children);\r\n                if (found) return found;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const getElement = (contents) => {\r\n        return (elementId) => {\r\n            let contentItems = contents ? [...contents] : [];\r\n            return findElement(elementId, contentItems);\r\n        }\r\n    }\r\n\r\n    const replaceElement = (elementId, elementObj, contentsToBeUpdated) => {\r\n        contentsToBeUpdated.forEach((element) => {\r\n            if (element.elementId === elementId) {\r\n                element = elementObj;\r\n            } else if (element.children) {\r\n                replaceElement(elementId, elementObj, element.children);\r\n            }\r\n        });\r\n    }\r\n\r\n    const setElement = (contents) => {\r\n        return (elementId, elementObj) => {\r\n            let contentsToBeUpdated = contents ? [...contents] : [];\r\n            replaceElement(elementId, elementObj, contentsToBeUpdated);\r\n            props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: contentsToBeUpdated });\r\n        }\r\n    }\r\n\r\n    const updateContents = (updatedClan) => {\r\n        props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: updatedClan });\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const tokens = [];\r\n\r\n        props.handlers && props.handlers.map((handler) => {\r\n            let token = PubSub.subscribe(handler.eventName, (eventName, eventData) => {\r\n                if (handler.type) {\r\n                    switch (handler.type) {\r\n                        case \"script\":\r\n                            const context = {\r\n                                eventPayload: eventData?.data || {}, context: props.context || {}, clan: props.clan || [],\r\n                                dispatchEvent: props.dispatchEvent,\r\n                                api: {\r\n                                    getElement: getElement(props.clan),\r\n                                    setElement: setElement(props.clan),\r\n                                    updateContents,\r\n                                    ...getAdditionalAPIs()\r\n                                }\r\n                            };\r\n\r\n                            const scriptFn = new Function(...Object.keys(context), `return (${handler.script})();`);\r\n                            let scriptResult = scriptFn(...Object.values(context));\r\n                            // console.log(scriptResult);\r\n                            if (scriptResult) {\r\n                                if (scriptResult.context) {\r\n                                    props.dispatchEvent(\"PAGE_CONTEXT_REFRESH\", { payload: scriptResult.context });\r\n                                }\r\n                                if (scriptResult.clan) {\r\n                                    props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: scriptResult.clan });\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"dispatch\":\r\n                            break;\r\n                        case \"navigate\":\r\n                            break;\r\n                    }\r\n                }\r\n\r\n            });\r\n            tokens.push(token);\r\n        })\r\n\r\n\r\n        return () => {\r\n            tokens.map(token => PubSub.unsubscribe(token));\r\n        };\r\n    }, [props]);\r\n\r\n    return (<div />);\r\n}\r\n\r\nconst styles = `\r\n`\r\nconst props = [{\r\n    name: \"handlers\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsController), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["getAdditionalAPIs","_require","require","Configuration","openai","OpenAIApi","apiKey","dispatchedEvents","SrsController","props","ref","findElement","key","nestedContents","_step","_iterator","_createForOfIteratorHelper","s","n","done","element","value","elementId","children","found","err","e","f","getElement","contents","contentItems","_toConsumableArray","replaceElement","elementObj","contentsToBeUpdated","forEach","updateContents","updatedClan","dispatchEvent","payload","useEffect","tokens","handlers","map","handler","token","PubSub","eventName","eventData","type","context","eventPayload","data","clan","api","_objectSpread","setElement","scriptResult","_construct","Function","Object","keys","concat","script","apply","values","push","_jsx","styles","name","defaultValue","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}