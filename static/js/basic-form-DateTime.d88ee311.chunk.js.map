{"version":3,"file":"static/js/basic-form-DateTime.d88ee311.chunk.js","mappings":"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","sources":["components/basic/form/DateTime.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport { DatePicker, DatePickerInput, TimePicker, TimePickerSelect, SelectItem } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.DATETIME_CHANGED];\r\n\r\n/*\r\n    Example: <srs-datetime type=\"simple\" format=\"d-m-Y\" placeholder=\"dd/mm/yyyy\" max_date=\"\" min_date=\"\" disable=\"true\" show_time=\"false\" value=\"\"/>\r\n*/\r\nconst SrsDateTime = function (props, ref) {\r\n    let currentValue = props.value || null;\r\n    let currentDateValue = currentValue && currentValue.indexOf(\" \") > -1? currentValue.split(\" \")[0]: null;\r\n    let currentTimeValue = currentValue && currentValue.indexOf(\" \") > -1? currentValue.split(\" \")[1]: null;\r\n    const [selectedDate, setSelectedDate] = useState(currentDateValue || null);\r\n    const [selectedTime, setSelectedTime] = useState(currentTimeValue || null);\r\n\r\n    const handleDateChange = (value) => {\r\n        setSelectedDate(value);\r\n        props.dispatchEvent(EventAPI.DATETIME_CHANGED, { payload: `${value} ${selectedTime || \"\"}` });\r\n        props.setValue(`${value} ${selectedTime || \"\"}`);\r\n    };\r\n\r\n    const handleTimeChange = (value) => {\r\n        setSelectedTime(value);\r\n        props.dispatchEvent(EventAPI.DATETIME_CHANGED, { payload: `${selectedDate || \"\"} ${value}` });\r\n        props.setValue(`${selectedDate || \"\"} ${value}`);\r\n    };\r\n\r\n    let dateProps = {};\r\n    if (props.type) dateProps.datePickerType = props.type;\r\n    if (props.format) dateProps.dateFormat = props.format;\r\n    if (props.max_date) dateProps.maxDate = props.max_date;\r\n    if (props.locale) dateProps.locale = props.locale;\r\n    if (props.min_date) dateProps.minDate = props.min_date;\r\n    if (props.disable) dateProps.disable = props.disable;\r\n\r\n    dateProps.value = selectedDate;\r\n    dateProps.onChange = handleDateChange;\r\n\r\n    let result = null;\r\n    let dateType = props.type || \"simple\";\r\n    let timePickerEl = props.show_time? (<TimePicker\r\n        id={\"timepicker_\" + props.elementid}\r\n        labelText=\"Time\"\r\n        value={selectedTime}\r\n        onChange={handleTimeChange}\r\n      >\r\n        <TimePickerSelect id=\"time-picker-select-id\" labelText=\"AM/PM\">\r\n          <SelectItem value=\"AM\" text=\"AM\" />\r\n          <SelectItem value=\"PM\" text=\"PM\" />\r\n        </TimePickerSelect>\r\n      </TimePicker>): null;\r\n\r\n    let inlineStyles = {\r\n        \"--cds-label-01-font-size\": \"0.9rem\",\r\n        \"--cds-label-01-font-weight\": 800,\r\n    };\r\n\r\n    switch (dateType) {\r\n        case \"simple\":\r\n            result = (<div style={inlineStyles}>\r\n                        <label class=\"cds--label\">{props.label}</label>\r\n                        <DatePicker {...dateProps} datePickerType={dateType}>\r\n                            <DatePickerInput placeholder={props.placeholder || \"mm/dd/yyyy\"} />\r\n                        </DatePicker>\r\n                        { timePickerEl }\r\n                    </div>);\r\n            break;\r\n        case \"single\":\r\n            result = (<div style={inlineStyles}>\r\n                        <label class=\"cds--label\">{props.label}</label>\r\n                        <DatePicker {...dateProps} datePickerType={dateType}>\r\n                            <DatePickerInput placeholder={props.placeholder || \"mm/dd/yyyy\"} />\r\n                        </DatePicker>\r\n                        { timePickerEl }\r\n                    </div>);\r\n            break;\r\n        case \"range\":\r\n            result = (<div style={inlineStyles}> \r\n                        <label class=\"cds--label\">{props.label}</label>\r\n                        <DatePicker {...dateProps} datePickerType={dateType}>\r\n                            <DatePickerInput placeholder=\"Start\" />\r\n                            <DatePickerInput placeholder=\"End\" />\r\n                        </DatePicker>\r\n                        { timePickerEl }\r\n                    </div>);\r\n            break;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst styles = `\r\n    .cds--date-picker__input {\r\n        border: 1px solid lightgray !important;\r\n        border-radius: 5px;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"type\",\r\n    defaultValue: \"simple\", //single, simple, range\r\n    type: \"string\"\r\n}, {\r\n    name: \"label\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"format\",\r\n    defaultValue: \"d/m/Y\", //Y-m-d\r\n    type: \"string\"\r\n}, {\r\n    name: \"placeholder\",\r\n    defaultValue: \"dd/mm/yyyy\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"max_date\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"locale\",\r\n    defaultValue: \"no\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"min_date\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"disable\",\r\n    defaultValue: false,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"show_time\",\r\n    defaultValue: true,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"value\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsDateTime), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsDateTime","props","ref","currentValue","value","currentDateValue","indexOf","split","currentTimeValue","_useState","useState","_useState2","_slicedToArray","selectedDate","setSelectedDate","_useState3","_useState4","selectedTime","setSelectedTime","dateProps","type","datePickerType","format","dateFormat","max_date","maxDate","locale","min_date","minDate","disable","onChange","dispatchEvent","payload","concat","setValue","result","dateType","timePickerEl","show_time","_jsx","TimePicker","id","elementid","labelText","children","_jsxs","TimePickerSelect","SelectItem","text","inlineStyles","style","class","label","DatePicker","_objectSpread","DatePickerInput","placeholder","styles","name","defaultValue","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}