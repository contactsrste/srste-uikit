{"version":3,"file":"static/js/mui-basic-Popover.367520fb.chunk.js","mappings":"0lDAMA,IAAMA,EAAmB,GAEnBC,EAAgB,SAAUC,EAAOC,GACrC,IAA4CC,EAAAC,GAApBC,EAAAA,EAAAA,UAASJ,EAAMK,MAAK,GAArCA,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GAC0BK,EAAAJ,GAAZC,EAAAA,EAAAA,UAAS,IAAG,GAAvCI,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,GAAaC,EAAAA,EAAAA,QAAO,MAEtBC,EAAsBZ,EAAMa,cAAgB,CAAEC,SAAU,SAAUC,WAAY,QAG5EC,GAFuBhB,EAAMiB,gBAEf,WAClBX,GAAQ,GACRN,EAAMkB,cAAcC,EAAAA,EAAAA,eAAyB,CAACC,UAAWpB,EAAMqB,WACjE,GAEMC,EAAc,SAACC,EAAWC,GAAe,IAADC,EAAAC,IACb,OAATF,QAAS,IAATA,GAAiB,QAARC,EAATD,EAAWG,cAAM,IAAAF,GAAS,QAATC,EAAjBD,EAAmBG,eAAO,IAAAF,OAAjB,EAATA,EAA4BN,YAAa,MACvCpB,EAAMqB,YAC5Bf,GAAQ,GACRN,EAAMkB,cAAcC,EAAAA,EAAAA,eAAyB,CAACC,UAAWpB,EAAMqB,YAEnE,GAEAQ,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAYC,IAAAA,UAAiB,eAAgBT,GAC7CU,EAAQD,IAAAA,UAAiB,iBAAkBf,GAC3CR,EAAY,GAYhB,OAXIR,EAAMiC,UAAYjC,EAAMiC,SAASC,OAAS,GAC5ClC,EAAMiC,SAASE,SAAQ,SAACC,GACtB5B,EAAU6B,KAAK,CACbC,aAAcF,EAAYE,aAC1BC,eAAgBH,EAAYG,eAC5BC,OAAQJ,EAAYK,cAAgB,eACpCC,eAAgBN,EAAYM,gBAEhC,IAEFjC,EAAaD,GACN,WACLuB,IAAAA,YAAmBD,GACnBC,IAAAA,YAAmBC,EACrB,CACF,GAAG,KAEHH,EAAAA,EAAAA,YAAU,WACR,IAAIc,EAAmBnC,EACnBR,EAAMiC,UAAYjC,EAAMiC,SAASC,OAAS,GAC5ClC,EAAMiC,SAASE,SAAQ,SAACC,GACtB,IAAIQ,EAAmBpC,EAAUqC,QAAO,SAACC,GACvC,OACEA,EAAUR,eAAiBF,EAAYE,cACvCQ,EAAUP,iBAAmBH,EAAYG,iBACxCO,EAAUL,cAAgB,mBAAqBL,EAAYK,cAAgB,eAEhF,IACKG,GAAgD,IAA5BA,EAAiBV,QACxCS,EAAiBN,KAAK,CACpBC,aAAcF,EAAYE,aAC1BC,eAAgBH,EAAYG,eAC5BC,OAAQJ,EAAYK,cAAgB,eACpCC,eAAgBN,EAAYM,gBAGlC,IAEFjC,EAAakC,EACf,GAAG,CAAC3C,EAAMiC,WAEV,IAAMc,GAAaC,EAAAA,EAAAA,UAAQ,WACzB,IAAIC,EAAyB,KAU7B,OATIzC,GAAaA,EAAU0B,OAAS,IAClCe,EACEC,EAAAA,cAAA,aACEC,SAAUnD,EAAMmD,SAChB9B,UAAWrB,EAAMqB,UAAY,SAC7B+B,UAAWC,KAAKC,UAAU9C,MAK9B0C,EAAAA,cAAAA,EAAAA,SAAA,KACGD,EACDC,EAAAA,cAACK,EAAAA,GAAOC,EAAA,GACFxD,EAAK,CACTK,KAAMA,EACNoD,SAAU/C,EAAWgD,QACrBC,QAAS3C,EACT4C,aAAchD,EACdiD,MAAO7D,EAAM8D,WAEbZ,EAAAA,cAAA,QAAMa,KAAK,aAEbb,EAAAA,cAAA,OAAKjD,IAAKS,GACRwC,EAAAA,cAAA,QAAMa,KAAK,aAInB,GAAG,CAAC/D,EAAOQ,EAAWH,IAEtB,OACE6C,EAAAA,cAAAA,EAAAA,SAAA,KACGH,EAGP,EAEMiB,EAAM,yDAINhE,EAAQ,CACZ,CACE+D,KAAM,OACNE,cAAc,EACdC,KAAM,WAER,CACEH,KAAM,WACNE,aAAc,GACdC,KAAM,UAER,CACEH,KAAM,eACNE,aAAc,CACZnD,SAAU,SACVC,WAAY,QAEdmD,KAAM,UAER,CACEH,KAAM,kBACNE,aAAc,CACZnD,SAAU,MACVC,WAAY,QAEdmD,KAAM,UAER,CACEH,KAAM,KACNE,aAAc,CAAC,EACfC,KAAM,WAKJC,EAAQ,CACZ,CACEJ,KAAM,UACNK,QAAS,KAIPC,GAAmBC,EAAAA,EAAAA,GACvBpB,EAAAA,WAAiBnD,GACjBC,EACA,M,uCChKF,IAAekD,EAAAA,cAAoB,K","sources":["components/mui/basic/Popover.js","../node_modules/react-transition-group/esm/TransitionGroupContext.js"],"sourcesContent":["import React, { useEffect, useMemo, useState, useRef } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport Popover from \"@mui/material/Popover\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\nimport PubSub from 'pubsub-js';\r\n\r\nconst dispatchedEvents = [];\r\n\r\nconst SrsMuiPopover = function (props, ref) {\r\n  const [open, setOpen] = useState(props.open);\r\n  const [relayList, setRelayList] = useState([]);\r\n  const popoverRef = useRef(null);\r\n\r\n  let defaultAnchorOrigin = props.anchororigin || { vertical: \"bottom\", horizontal: \"left\" };\r\n  let defaultTransformOrigin = props.transformorigin || { vertical: \"top\", horizontal: \"left\" };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    props.dispatchEvent(EventAPI.POPOVER_CLOSED, {popoverId: props.elementid});\r\n  };\r\n\r\n  const openPopover = (eventName, eventData) => {\r\n    let targetPopoverId = eventData?.detail?.payload?.popoverId || \"\";\r\n    if (targetPopoverId === props.elementid) {\r\n      setOpen(true);\r\n      props.dispatchEvent(EventAPI.POPOVER_OPENED, {popoverId: props.elementid});\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let openToken = PubSub.subscribe(\"POPOVER_OPEN\", openPopover);\r\n    let token = PubSub.subscribe(\"POPOVER_CLOSED\", handleClose);\r\n    let relayList = [];\r\n    if (props.triggers && props.triggers.length > 0) {\r\n      props.triggers.forEach((triggerItem) => {\r\n        relayList.push({\r\n          source_event: triggerItem.source_event,\r\n          source_element: triggerItem.source_element,\r\n          target: triggerItem.target_event || \"POPOVER_OPEN\",\r\n          add_to_payload: triggerItem.add_to_payload\r\n        });\r\n      });\r\n    }\r\n    setRelayList(relayList);\r\n    return () => {\r\n      PubSub.unsubscribe(openToken);\r\n      PubSub.unsubscribe(token);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let updatedRelayList = relayList;\r\n    if (props.triggers && props.triggers.length > 0) {\r\n      props.triggers.forEach((triggerItem) => {\r\n        let matchedRelayList = relayList.filter((relayItem) => {\r\n          return (\r\n            relayItem.source_event === triggerItem.source_event &&\r\n            relayItem.source_element === triggerItem.source_element &&\r\n            (relayItem.target_event || \"POPOVER_OPEN\") === (triggerItem.target_event || \"POPOVER_OPEN\")\r\n          );\r\n        });\r\n        if (!matchedRelayList || matchedRelayList.length === 0) {\r\n          updatedRelayList.push({\r\n            source_event: triggerItem.source_event,\r\n            source_element: triggerItem.source_element,\r\n            target: triggerItem.target_event || \"POPOVER_OPEN\",\r\n            add_to_payload: triggerItem.add_to_payload\r\n          });\r\n        }\r\n      });\r\n    }\r\n    setRelayList(updatedRelayList);\r\n  }, [props.triggers]);\r\n\r\n  const getPopOver = useMemo(() => {\r\n    let triggerActionhandlerEl = null;\r\n    if (relayList && relayList.length > 0) {\r\n      triggerActionhandlerEl = (\r\n        <srs-relay\r\n          widgetid={props.widgetid}\r\n          elementid={props.elementid + \"_relay\"}\r\n          relaylist={JSON.stringify(relayList)}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        {triggerActionhandlerEl}\r\n        <Popover\r\n          {...props} \r\n          open={open}\r\n          anchorEl={popoverRef.current}\r\n          onClose={handleClose}\r\n          anchorOrigin={defaultAnchorOrigin}\r\n          theme={props.muiTheme}\r\n        >\r\n          <slot name=\"content\" />\r\n        </Popover>\r\n        <div ref={popoverRef}>\r\n          <slot name=\"trigger\" />\r\n        </div>\r\n      </>\r\n    );\r\n  }, [props, relayList, open]);\r\n\r\n  return (\r\n    <>\r\n      {getPopOver}\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = `\r\n  /* Custom styles for the MuiPopover component */\r\n`;\r\n\r\nconst props = [\r\n  {\r\n    name: \"open\",\r\n    defaultValue: false,\r\n    type: \"boolean\",\r\n  },\r\n  {\r\n    name: \"triggers\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n  },\r\n  {\r\n    name: \"anchororigin\",\r\n    defaultValue: {\r\n      vertical: \"bottom\",\r\n      horizontal: \"left\",\r\n    },\r\n    type: \"object\",\r\n  },\r\n  {\r\n    name: \"transformorigin\",\r\n    defaultValue: {\r\n      vertical: \"top\",\r\n      horizontal: \"left\",\r\n    },\r\n    type: \"object\",\r\n  },\r\n  {\r\n    name: \"sx\",\r\n    defaultValue: {},\r\n    type: \"object\"\r\n  }\r\n  // Add other props specific to Popover if needed\r\n];\r\n\r\nconst slots = [\r\n  {\r\n    name: \"default\",\r\n    allowed: [],\r\n  },\r\n];\r\n\r\nconst WrappedComponent = wrapper(\r\n  React.forwardRef(SrsMuiPopover),\r\n  props,\r\n  \"mui\"\r\n);\r\n\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\n","import React from 'react';\nexport default React.createContext(null);"],"names":["dispatchedEvents","SrsMuiPopover","props","ref","_useState2","_slicedToArray","useState","open","setOpen","_useState4","relayList","setRelayList","popoverRef","useRef","defaultAnchorOrigin","anchororigin","vertical","horizontal","handleClose","transformorigin","dispatchEvent","EventAPI","popoverId","elementid","openPopover","eventName","eventData","_eventData$detail","_eventData$detail$pay","detail","payload","useEffect","openToken","PubSub","token","triggers","length","forEach","triggerItem","push","source_event","source_element","target","target_event","add_to_payload","updatedRelayList","matchedRelayList","filter","relayItem","getPopOver","useMemo","triggerActionhandlerEl","React","widgetid","relaylist","JSON","stringify","Popover","_extends","anchorEl","current","onClose","anchorOrigin","theme","muiTheme","name","styles","defaultValue","type","slots","allowed","WrappedComponent","wrapper"],"sourceRoot":""}