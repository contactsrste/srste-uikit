{"version":3,"file":"static/js/basic-Relay.48cc63c8.chunk.js","mappings":"qIAAO,IAAMA,EAAoB,WAC7B,IACAC,EAAqCC,EAAQ,OAArCC,EAAaF,EAAbE,cAMR,MAAO,CACHC,OAHW,IAAIC,EAJaJ,EAATI,WACD,IAAIF,EAAc,CACpCG,OAHmB,yDAU3B,C,2mCCPA,IAAMC,EAAmB,GAKnBC,EAAW,SAAUC,EAAOC,GAC9B,IAAMC,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,EAAa,SAACC,GAChB,OAAO,SAACC,GACJA,EAAIC,kBACJD,EAAIE,iBACJR,EAAMS,cAAcJ,E,+VAAMK,CAAA,GAAMJ,EAAIK,QACxC,CACJ,EACMC,EAAY,CAAC,EAiBnB,OAhBAC,EAAAA,EAAAA,YAAU,WAON,OANGX,EAASY,SAAWd,EAAMe,WAAaf,EAAMe,UAAUC,OAAS,GAC/DhB,EAAMe,UAAUE,KAAI,SAACC,GACjBN,EAAUM,EAAUC,QAAUf,EAAWc,EAAUb,QACnDH,EAASY,QAAQM,iBAAiBF,EAAUC,OAAQP,EAAUM,EAAUC,QAC5E,IAEG,WACAjB,EAASY,SAAWd,EAAMe,WAAaf,EAAMe,UAAUC,OAAS,GAC/DhB,EAAMe,UAAUE,KAAI,SAACC,GACjBhB,EAASY,QAAQO,oBAAoBH,EAAUC,OAAQP,EAAUM,EAAUC,QAC/E,GAER,CACJ,GAAG,CAACnB,EAAMe,YAEFO,EAAAA,cAAA,OAAKrB,IAAKC,GAAUoB,EAAAA,cAAA,aAChC,EAEMC,EAAM,KAENvB,EAAQ,CAAC,CACXwB,KAAM,YACNC,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQP,EAAAA,WAAiBvB,GAAWC,E","sources":["commons/ExternalAPIUtil.js","components/basic/Relay.js"],"sourcesContent":["export const getAdditionalAPIs = () => {\r\n    const OPENAI_API_KEY = \"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\";\r\n    const { Configuration, OpenAIApi } = require(\"openai\");\r\n    const configuration = new Configuration({\r\n        apiKey: OPENAI_API_KEY,\r\n    });\r\n    const openai = new OpenAIApi(configuration);\r\n\r\n    return {\r\n        openai\r\n    }\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { getAdditionalAPIs } from \"../../commons/ExternalAPIUtil\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-relay relaylist=[{source: \"XYZ\", target: \"LML\"}]/>\r\n*/\r\nconst SrsRelay = function (props, ref) {\r\n    const innerRef = useRef(null);\r\n\r\n    const redispatch = (target) => {\r\n        return (evt) => {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n            props.dispatchEvent(target, {...evt.detail});\r\n        }\r\n    }\r\n    const listeners = {};\r\n    useEffect(() => {\r\n        if(innerRef.current && props.relaylist && props.relaylist.length > 0) {\r\n            props.relaylist.map((relayItem) => {\r\n                listeners[relayItem.source] = redispatch(relayItem.target);\r\n                innerRef.current.addEventListener(relayItem.source, listeners[relayItem.source]);\r\n            });\r\n        }\r\n        return () => {\r\n            if(innerRef.current && props.relaylist && props.relaylist.length > 0) {\r\n                props.relaylist.map((relayItem) => {\r\n                    innerRef.current.removeEventListener(relayItem.source, listeners[relayItem.source]);\r\n                });\r\n            }\r\n        }\r\n    }, [props.relaylist]);\r\n\r\n    return (<div ref={innerRef}><slot/></div>);\r\n}\r\n\r\nconst styles = `\r\n`\r\nconst props = [{\r\n    name: \"relaylist\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsRelay), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["getAdditionalAPIs","_require","require","Configuration","openai","OpenAIApi","apiKey","dispatchedEvents","SrsRelay","props","ref","innerRef","useRef","redispatch","target","evt","stopPropagation","preventDefault","dispatchEvent","_objectSpread","detail","listeners","useEffect","current","relaylist","length","map","relayItem","source","addEventListener","removeEventListener","React","styles","name","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}