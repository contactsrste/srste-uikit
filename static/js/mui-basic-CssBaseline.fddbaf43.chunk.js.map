{"version":3,"file":"static/js/mui-basic-CssBaseline.fddbaf43.chunk.js","mappings":"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","sources":["components/mui/basic/CssBaseline.js","../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js","../node_modules/@mui/material/styles/defaultTheme.js","../node_modules/@mui/material/styles/useThemeProps.js","../node_modules/@mui/system/esm/useTheme.js","../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js","../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js","../node_modules/@mui/utils/esm/resolveProps.js"],"sourcesContent":["import React from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\nconst SrsMuiCssBaseline = function (props, ref) {\r\n  return <CssBaseline {...props} theme={props.muiTheme}>{props.content}</CssBaseline>;\r\n};\r\n\r\nconst styles = `\r\n  /* Custom styles for the MuiCssBaseline component */\r\n`;\r\n\r\nconst props = [\r\n  {\r\n    name: \"content\",\r\n    defaultValue: null,\r\n    type: \"string\",\r\n  },\r\n  {\r\n    name: \"sx\",\r\n    defaultValue: {},\r\n    type: \"object\"\r\n  }\r\n];\r\n\r\nconst slots = [\r\n  {\r\n    name: \"default\",\r\n    allowed: [],\r\n  },\r\n];\r\n\r\nconst WrappedComponent = wrapper(\r\n  React.forwardRef(SrsMuiCssBaseline),\r\n  props,\r\n  \"mui\"\r\n);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\n","var isBrowser = \"object\" !== 'undefined';\nfunction getRegisteredStyles(registered, registeredStyles, classNames) {\n  var rawClassName = '';\n  classNames.split(' ').forEach(function (className) {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(registered[className] + \";\");\n    } else {\n      rawClassName += className + \" \";\n    }\n  });\n  return rawClassName;\n}\nvar registerStyles = function registerStyles(cache, serialized, isStringTag) {\n  var className = cache.key + \"-\" + serialized.name;\n\n  if ( // we only need to add the styles to the registered cache if the\n  // class name could be used further down\n  // the tree but if it's a string tag, we know it won't\n  // so we don't have to add it to registered cache.\n  // this improves memory usage since we can avoid storing the whole style string\n  (isStringTag === false || // we need to always store it if we're in compat mode and\n  // in node since emotion-server relies on whether a style is in\n  // the registered cache to know whether a style is global or not\n  // also, note that this check will be dead code eliminated in the browser\n  isBrowser === false ) && cache.registered[className] === undefined) {\n    cache.registered[className] = serialized.styles;\n  }\n};\nvar insertStyles = function insertStyles(cache, serialized, isStringTag) {\n  registerStyles(cache, serialized, isStringTag);\n  var className = cache.key + \"-\" + serialized.name;\n\n  if (cache.inserted[serialized.name] === undefined) {\n    var current = serialized;\n\n    do {\n      var maybeStyles = cache.insert(serialized === current ? \".\" + className : '', current, cache.sheet, true);\n\n      current = current.next;\n    } while (current !== undefined);\n  }\n};\n\nexport { getRegisteredStyles, insertStyles, registerStyles };\n","import createTheme from './createTheme';\nconst defaultTheme = createTheme();\nexport default defaultTheme;","import { useThemeProps as systemUseThemeProps } from '@mui/system';\nimport defaultTheme from './defaultTheme';\nimport THEME_ID from './identifier';\nexport default function useThemeProps({\n  props,\n  name\n}) {\n  return systemUseThemeProps({\n    props,\n    name,\n    defaultTheme,\n    themeId: THEME_ID\n  });\n}","import createTheme from './createTheme';\nimport useThemeWithoutDefault from './useThemeWithoutDefault';\nexport const systemDefaultTheme = createTheme();\nfunction useTheme(defaultTheme = systemDefaultTheme) {\n  return useThemeWithoutDefault(defaultTheme);\n}\nexport default useTheme;","import getThemeProps from './getThemeProps';\nimport useTheme from '../useTheme';\nexport default function useThemeProps({\n  props,\n  name,\n  defaultTheme,\n  themeId\n}) {\n  let theme = useTheme(defaultTheme);\n  if (themeId) {\n    theme = theme[themeId] || theme;\n  }\n  const mergedProps = getThemeProps({\n    theme,\n    name,\n    props\n  });\n  return mergedProps;\n}","import { internal_resolveProps as resolveProps } from '@mui/utils';\nexport default function getThemeProps(params) {\n  const {\n    theme,\n    name,\n    props\n  } = params;\n  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {\n    return props;\n  }\n  return resolveProps(theme.components[name].defaultProps, props);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Add keys, values of `defaultProps` that does not exist in `props`\n * @param {object} defaultProps\n * @param {object} props\n * @returns {object} resolved props\n */\nexport default function resolveProps(defaultProps, props) {\n  const output = _extends({}, props);\n  Object.keys(defaultProps).forEach(propName => {\n    if (propName.toString().match(/^(components|slots)$/)) {\n      output[propName] = _extends({}, defaultProps[propName], output[propName]);\n    } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {\n      const defaultSlotProps = defaultProps[propName] || {};\n      const slotProps = props[propName];\n      output[propName] = {};\n      if (!slotProps || !Object.keys(slotProps)) {\n        // Reduce the iteration if the slot props is empty\n        output[propName] = defaultSlotProps;\n      } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {\n        // Reduce the iteration if the default slot props is empty\n        output[propName] = slotProps;\n      } else {\n        output[propName] = _extends({}, slotProps);\n        Object.keys(defaultSlotProps).forEach(slotPropName => {\n          output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);\n        });\n      }\n    } else if (output[propName] === undefined) {\n      output[propName] = defaultProps[propName];\n    }\n  });\n  return output;\n}"],"names":["dispatchedEvents","SrsMuiCssBaseline","props","ref","React","CssBaseline","_extends","theme","muiTheme","content","styles","name","defaultValue","type","slots","allowed","WrappedComponent","wrapper","getRegisteredStyles","registered","registeredStyles","classNames","rawClassName","split","forEach","className","undefined","push","registerStyles","cache","serialized","isStringTag","key","insertStyles","inserted","current","insert","sheet","next","defaultTheme","createTheme","useThemeProps","_ref","systemUseThemeProps","themeId","THEME_ID","systemDefaultTheme","arguments","length","useThemeWithoutDefault","useTheme","mergedProps","params","components","defaultProps","resolveProps","getThemeProps","output","Object","keys","propName","toString","match","defaultSlotProps","slotProps","slotPropName"],"sourceRoot":""}