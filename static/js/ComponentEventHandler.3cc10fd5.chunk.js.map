{"version":3,"file":"static/js/ComponentEventHandler.3cc10fd5.chunk.js","mappings":"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","sources":["commons/ExternalAPIUtil.js","components/ComponentEventHandler.js"],"sourcesContent":["export const getAdditionalAPIs = () => {\r\n    const OPENAI_API_KEY = \"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\";\r\n    const { Configuration, OpenAIApi } = require(\"openai\");\r\n    const configuration = new Configuration({\r\n        apiKey: OPENAI_API_KEY,\r\n    });\r\n    const openai = new OpenAIApi(configuration);\r\n\r\n    return {\r\n        openai\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { getAdditionalAPIs } from \"../commons/ExternalAPIUtil\";\r\nimport wrapper from \"../commons/WebComponentWrapper\";\r\n\r\nconst dispatchedEvents = [\"PAGE_CONTEXT_REFRESH\", \"PAGE_CONTENTS_REFRESH\"];\r\n\r\nconst EventHandler = function (props, ref) {\r\n  const [eventBinding, setEventBinding] = useState(false);\r\n  const findElement = (key, nestedContents) => {\r\n    for (let element of nestedContents) {\r\n      if (element.elementId === key) {\r\n        return element;\r\n      } else if (element.children) {\r\n        const found = findElement(key, element.children);\r\n        if (found) return found;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const getElement = (contents) => {\r\n    return (elementId) => {\r\n      let contentItems = contents? [...contents]: [];\r\n      return findElement(elementId, contentItems);\r\n    }\r\n  }\r\n\r\n  const replaceElement = (elementId, elementObj, contentsToBeUpdated) => {\r\n    contentsToBeUpdated.forEach((element) => {\r\n      if (element.elementId === elementId) {\r\n        element = elementObj;\r\n      } else if (element.children) {\r\n        replaceElement(elementId, elementObj, element.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  const setElement = (contents) => {\r\n    return (elementId, elementObj) => {\r\n      let contentsToBeUpdated = contents? [...contents]: [];\r\n      replaceElement(elementId, elementObj, contentsToBeUpdated);\r\n      props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: contentsToBeUpdated });\r\n    }\r\n  }\r\n\r\n  const updateContents = (updatedClan) => {\r\n    props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: updatedClan });\r\n  }\r\n\r\n  const handleEvent = (handler) => {\r\n    return (event) => {\r\n      if (handler.type) {\r\n        switch (handler.type) {\r\n          case \"script\":\r\n            const context = { eventPayload: event.detail, context: props.context || {}, clan: props.clan || [], \r\n                              dispatchEvent: props.dispatchEvent, \r\n                              api: {\r\n                                getElement: getElement(props.clan), \r\n                                setElement: setElement(props.clan), \r\n                                updateContents, \r\n                                ...getAdditionalAPIs()\r\n                              } \r\n                            };\r\n\r\n            const scriptFn = new Function(...Object.keys(context), `return (${handler.script})();`);\r\n            let scriptResult = scriptFn(...Object.values(context));\r\n            // console.log(scriptResult);\r\n            if (scriptResult) {\r\n              if (scriptResult.context) {\r\n                props.dispatchEvent(\"PAGE_CONTEXT_REFRESH\", { payload: scriptResult.context });\r\n              }\r\n              if (scriptResult.clan) {\r\n                props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: scriptResult.clan });\r\n              }\r\n            }\r\n            handler.stopPropagation && event.stopPropagation();\r\n            break;\r\n          case \"dispatch\":\r\n            break;\r\n          case \"navigate\":\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const currentNode = ref.current;\r\n    if (!currentNode) return;\r\n\r\n    if (eventBinding) return;\r\n\r\n    let handlers = props.handlers || [];\r\n    if (typeof handlers == \"string\")\r\n      handlers = JSON.parse(handlers);\r\n    if (handlers && handlers.length > 0) {\r\n      handlers.map((handler) => {\r\n        currentNode.addEventListener(handler.eventName, handleEvent(handler));\r\n      });\r\n    }\r\n    setEventBinding(true);\r\n    return () => {\r\n      handlers.map((handler) => {\r\n        ref.current.removeEventListener(handler.eventName, handleEvent(handler));\r\n        eventBinding = false;\r\n      });\r\n        \r\n    };\r\n\r\n  }, [props.elementid]);\r\n\r\n  return view(props, ref);\r\n}\r\n\r\nconst view = (props, ref) => {\r\n  return (<div ref={ref}>\r\n    <slot />\r\n  </div>);\r\n}\r\n\r\nconst styles = `\r\n    div {\r\n    }\r\n`\r\n\r\nconst props = [\r\n  {\r\n    name: \"handlers\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n  }\r\n]\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(EventHandler), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents };"],"names":["getAdditionalAPIs","_require","require","Configuration","openai","OpenAIApi","apiKey","dispatchedEvents","EventHandler","props","ref","_useState2","_slicedToArray","useState","eventBinding","setEventBinding","findElement","key","nestedContents","_step","_iterator","_createForOfIteratorHelper","s","n","done","element","value","elementId","children","found","err","e","f","replaceElement","elementObj","contentsToBeUpdated","forEach","setElement","contents","_toConsumableArray","dispatchEvent","payload","updateContents","updatedClan","handleEvent","handler","event","type","context","eventPayload","detail","clan","api","_objectSpread","getElement","contentItems","scriptResult","_construct","Function","Object","keys","concat","script","apply","values","stopPropagation","useEffect","currentNode","current","handlers","JSON","parse","length","map","addEventListener","eventName","removeEventListener","_readOnlyError","elementid","view","React","styles","name","defaultValue","WrappedComponent","wrapper"],"sourceRoot":""}