{"version":3,"file":"static/js/ComponentEventHandler.b6f2f46c.chunk.js","mappings":"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","sources":["commons/ExternalAPIUtil.js","components/ComponentEventHandler.js","../node_modules/@babel/runtime/helpers/esm/readOnlyError.js"],"sourcesContent":["export const getAdditionalAPIs = () => {\r\n    const OPENAI_API_KEY = \"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\";\r\n    const { Configuration, OpenAIApi } = require(\"openai\");\r\n    const configuration = new Configuration({\r\n        apiKey: OPENAI_API_KEY,\r\n    });\r\n    const openai = new OpenAIApi(configuration);\r\n\r\n    return {\r\n        openai\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { getAdditionalAPIs } from \"../commons/ExternalAPIUtil\";\r\nimport wrapper from \"../commons/WebComponentWrapper\";\r\n\r\nconst dispatchedEvents = [\"PAGE_CONTEXT_REFRESH\", \"PAGE_CONTENTS_REFRESH\"];\r\n\r\nconst EventHandler = function (props, ref) {\r\n  const [eventBinding, setEventBinding] = useState(false);\r\n  const findElement = (key, nestedContents) => {\r\n    for (let element of nestedContents) {\r\n      if (element.elementId === key) {\r\n        return element;\r\n      } else if (element.children) {\r\n        const found = findElement(key, element.children);\r\n        if (found) return found;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const getElement = (contents) => {\r\n    return (elementId) => {\r\n      let contentItems = contents? [...contents]: [];\r\n      return findElement(elementId, contentItems);\r\n    }\r\n  }\r\n\r\n  const replaceElement = (elementId, elementObj, contentsToBeUpdated) => {\r\n    contentsToBeUpdated.forEach((element) => {\r\n      if (element.elementId === elementId) {\r\n        element = elementObj;\r\n      } else if (element.children) {\r\n        replaceElement(elementId, elementObj, element.children);\r\n      }\r\n    });\r\n  }\r\n\r\n  const setElement = (contents) => {\r\n    return (elementId, elementObj) => {\r\n      let contentsToBeUpdated = contents? [...contents]: [];\r\n      replaceElement(elementId, elementObj, contentsToBeUpdated);\r\n      props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: contentsToBeUpdated });\r\n    }\r\n  }\r\n\r\n  const updateContents = (updatedClan) => {\r\n    props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: updatedClan });\r\n  }\r\n\r\n  const handleEvent = (handler) => {\r\n    return (event) => {\r\n      if (handler.type) {\r\n        switch (handler.type) {\r\n          case \"script\":\r\n            const context = { eventPayload: event.detail, context: props.context || {}, clan: props.clan || [], \r\n                              dispatchEvent: props.dispatchEvent, \r\n                              api: {\r\n                                getElement: getElement(props.clan), \r\n                                setElement: setElement(props.clan), \r\n                                updateContents, \r\n                                ...getAdditionalAPIs()\r\n                              } \r\n                            };\r\n\r\n            const scriptFn = new Function(...Object.keys(context), `return (${handler.script})();`);\r\n            let scriptResult = scriptFn(...Object.values(context));\r\n            // console.log(scriptResult);\r\n            if (scriptResult) {\r\n              if (scriptResult.context) {\r\n                props.dispatchEvent(\"PAGE_CONTEXT_REFRESH\", { payload: scriptResult.context });\r\n              }\r\n              if (scriptResult.clan) {\r\n                props.dispatchEvent(\"PAGE_CONTENTS_REFRESH\", { payload: scriptResult.clan });\r\n              }\r\n            }\r\n            handler.stopPropagation && event.stopPropagation();\r\n            break;\r\n          case \"dispatch\":\r\n            break;\r\n          case \"navigate\":\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const currentNode = ref.current;\r\n    if (!currentNode) return;\r\n\r\n    if (eventBinding) return;\r\n\r\n    let handlers = props.handlers || [];\r\n    if (typeof handlers == \"string\")\r\n      handlers = JSON.parse(handlers);\r\n    if (handlers && handlers.length > 0) {\r\n      handlers.map((handler) => {\r\n        currentNode.addEventListener(handler.eventName, handleEvent(handler));\r\n      });\r\n    }\r\n    setEventBinding(true);\r\n    return () => {\r\n      handlers.map((handler) => {\r\n        ref.current.removeEventListener(handler.eventName, handleEvent(handler));\r\n        eventBinding = false;\r\n      });\r\n        \r\n    };\r\n\r\n  }, [props.elementid]);\r\n\r\n  return view(props, ref);\r\n}\r\n\r\nconst view = (props, ref) => {\r\n  return (<div ref={ref}>\r\n    <slot />\r\n  </div>);\r\n}\r\n\r\nconst styles = `\r\n    div {\r\n    }\r\n`\r\n\r\nconst props = [\r\n  {\r\n    name: \"handlers\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n  }\r\n]\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(EventHandler), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents };","export default function _readOnlyError(name) {\n  throw new TypeError(\"\\\"\" + name + \"\\\" is read-only\");\n}"],"names":["getAdditionalAPIs","_require","require","Configuration","openai","OpenAIApi","apiKey","dispatchedEvents","EventHandler","props","ref","_useState","useState","_useState2","_slicedToArray","eventBinding","setEventBinding","findElement","key","nestedContents","_step","_iterator","_createForOfIteratorHelper","s","n","done","element","value","elementId","children","found","err","e","f","getElement","contents","contentItems","_toConsumableArray","replaceElement","elementObj","contentsToBeUpdated","forEach","updateContents","updatedClan","dispatchEvent","payload","handleEvent","handler","event","type","context","eventPayload","detail","clan","api","_objectSpread","setElement","scriptResult","_construct","Function","Object","keys","concat","script","apply","values","stopPropagation","useEffect","currentNode","current","handlers","JSON","parse","length","map","addEventListener","eventName","removeEventListener","_readOnlyError","elementid","view","_jsx","styles","name","defaultValue","WrappedComponent","wrapper","React","TypeError"],"sourceRoot":""}