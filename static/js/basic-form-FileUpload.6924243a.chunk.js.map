{"version":3,"file":"static/js/basic-form-FileUpload.6924243a.chunk.js","mappings":"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","sources":["components/basic/form/FileUpload.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport { Button, FileUploaderDropContainer, FileUploaderItem, ProgressIndicator } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\nimport { CloudUpload } from \"@carbon/icons-react\";\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-fileupload add_file_label=\"Add File\" upload_button_label=\"Upload\"/>\r\n\r\n    Server API could be like below -\r\n    const express = require('express');\r\n    const fileUpload = require('express-fileupload');\r\n\r\n    // enable file upload middleware\r\n    app.use(fileUpload());\r\n\r\n    app.post('/upload', (req, res) => {\r\n        // check if file was uploaded\r\n        if (!req.files || Object.keys(req.files).length === 0) {\r\n            return res.status(400).send('No files were uploaded.');\r\n        }\r\n\r\n        // access uploaded file from request\r\n        const file = req.files.uploadedFile;\r\n\r\n        // do something with the file, e.g. save it to disk or database\r\n        file.mv(`./uploads/${file.name}`, (err) => {\r\n            if (err) {\r\n            return res.status(500).send(err);\r\n            }\r\n\r\n            res.send('File uploaded!');\r\n        });\r\n    });\r\n*/\r\nconst SrsFileUpload = function (props, ref) {\r\n    const [files, setFiles] = useState([]);\r\n    const [progress, setProgress] = useState(0);\r\n    const [inProgress, setInProgress] = useState(false);\r\n    const fileInput = useRef(null);\r\n\r\n    const getProgress = (prevProgress) => {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(prevProgress + 10);\r\n        });\r\n    }\r\n\r\n    const handleUpload = async () => {\r\n        try {\r\n            const formData = new FormData();\r\n            for (const file of files) {\r\n                formData.append('file', file);\r\n            }\r\n\r\n            const config = {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                    setProgress(progress);\r\n                },\r\n            };\r\n\r\n            setInProgress(true);\r\n            props.dispatchEvent(EventAPI.FILE_UPLOADING, { payload: { files, id: props.elementid } });\r\n            //   await axios.post(props.upload_endpoint, formData, config);\r\n            setInProgress(false);\r\n            setProgress(0);\r\n            props.dispatchEvent(EventAPI.FILE_UPLOADED, { payload: { files, id: props.elementid } });\r\n        } catch (error) {\r\n            console.error(error);\r\n            setInProgress(false);\r\n            setProgress(0);\r\n            props.dispatchEvent(EventAPI.FILE_UPLOAD_FAILED, { payload: { files, id: props.elementid } });\r\n        }\r\n    };\r\n\r\n    let extraProps = {};\r\n    if (props.accepted_formats) {\r\n        extraProps.accept = props.accepted_formats;\r\n    }\r\n    return (\r\n        <>\r\n            <p className=\"cds--file--label\">{props.label}</p>\r\n            <p className=\"cds--label-description\">{props.subtitle}</p>\r\n            <div style={{display: \"flex\", flexDirection: \"row\"}}>\r\n                <FileUploaderDropContainer\r\n                    labelText={props.add_files_label}\r\n                    labelDescription={props.add_files_description}\r\n                    name=\"\"\r\n                    tabIndex={0}\r\n                    buttonKind=\"primary\"\r\n                    filenameStatus=\"edit\"\r\n                    multiple\r\n                    onAddFiles={(event, {addedFiles}) => {\r\n                        setFiles(files.concat(addedFiles || []));\r\n                    }}\r\n                    onClick={(event) => {\r\n                        // setFiles([...event.target.files]); \r\n                    }}\r\n                    ref={fileInput}\r\n                    {...extraProps}\r\n                />                \r\n                <Button hasIconOnly={true} iconDescription=\"Upload\" renderIcon={CloudUpload} onClick={handleUpload} size=\"sm\" disabled={!files || files.length === 0}>{props.upload_button_label}</Button>\r\n            </div>\r\n            {\r\n                files.map((file) => (\r\n                    <FileUploaderItem key={file.name} name={file.name} size=\"md\" status=\"uploading\" iconDescription=\"Delete file\" invalid={false}/>\r\n                ))\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst styles = `\r\n    .cds--file-browse-btn {\r\n        max-width: 100% !important;\r\n    }\r\n    .cds--file {\r\n        width: 70% !important;\r\n    }\r\n    .cds--popover-container {\r\n        display: flex !important;\r\n    }\r\n    .cds--file__selected-file {\r\n        max-width: 100% !important;\r\n        width: 70% !important;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"Upload Files\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"subtitle\",\r\n    defaultValue: \"Max file size is 500kb. Supported file types are .jpg and .png.\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"add_files_label\",\r\n    defaultValue: \"Upload Files\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"add_files_description\",\r\n    defaultValue: \"Max file size is 10mb. Only .jpg files are supported.\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"upload_button_label\",\r\n    defaultValue: \"Upload\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"upload_endpoint\",\r\n    defaultValue: \"/upload\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"accepted_formats\",\r\n    defaultValue: [],\r\n    type: []\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsFileUpload), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsFileUpload","props","ref","_useState","useState","_useState2","_slicedToArray","files","setFiles","_useState3","_useState4","setProgress","_useState5","_useState6","setInProgress","fileInput","useRef","handleUpload","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formData","_iterator","_step","file","wrap","_context","prev","next","FormData","_createForOfIteratorHelper","s","n","done","value","append","err","e","f","onUploadProgress","progressEvent","progress","Math","round","loaded","total","dispatchEvent","EventAPI","payload","id","elementid","error","console","stop","apply","arguments","extraProps","accepted_formats","accept","_jsxs","_Fragment","children","_jsx","className","label","subtitle","style","display","flexDirection","FileUploaderDropContainer","_objectSpread","labelText","add_files_label","labelDescription","add_files_description","name","tabIndex","buttonKind","filenameStatus","multiple","onAddFiles","event","_ref2","addedFiles","concat","onClick","Button","hasIconOnly","iconDescription","renderIcon","CloudUpload","size","disabled","length","upload_button_label","map","FileUploaderItem","status","invalid","styles","defaultValue","type","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}