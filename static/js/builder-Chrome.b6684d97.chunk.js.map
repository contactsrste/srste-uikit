{"version":3,"file":"static/js/builder-Chrome.b6684d97.chunk.js","mappings":"2qEAGsC,IAEhCA,EAASC,GACX,SAAAD,EAAYE,EAAMC,EAAOC,I,4FAAQC,CAAA,KAAAL,GAC7BM,KAAKJ,KAAOA,EACZI,KAAKH,MAAQA,EACbG,KAAKF,OAASA,CAClB,IAGEG,EAAS,SAAUC,EAAOC,GAC5B,IAA4DC,EAAAC,GAAdC,EAAAA,EAAAA,UAAS,MAAK,GAArDC,EAAeH,EAAA,GAAEI,EAAkBJ,EAAA,GAEpCK,EAAW,CACb,IAAIf,EAAU,SAAU,IAAK,IAC7B,IAAIA,EAAU,UAAW,IAAK,IAC9B,IAAIA,EAAU,WAAY,GAAI,KAGlC,OAAQgB,EAAAA,cAAA,OAAKP,IAAKA,GACVO,EAAAA,cAACC,EAAAA,SAAQ,CAACF,SAAUA,EAAUG,SAAUJ,IACxCE,EAAAA,cAACG,EAAAA,aAAY,CAACC,QAASP,GAAmBE,EAAS,KAE/D,EAEMM,EAAmB,GACnBb,EAAQ,GAERc,EAAM,OAINC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQT,EAAAA,WAAiBT,GAASC,E,yIClCrDW,EAAe,SAAUX,EAAOC,GAClC,OAAOiB,EAAKlB,EAAOC,EACvB,EAEMiB,EAAO,SAAClB,EAAOC,GACjB,IAAMW,EAAUZ,EAAMY,QACtB,OAAQJ,EAAAA,cAAA,WACJA,EAAAA,cAAA,WACIA,EAAAA,cAAA,WAAK,SAAOI,EAAQlB,MACpBc,EAAAA,cAAA,WAAK,UAAQI,EAAQjB,OACrBa,EAAAA,cAAA,WAAK,WAASI,EAAQhB,SAGlC,EAIMoB,GAAmBC,EAAAA,EAAAA,GAAQT,EAAAA,WAAiBG,GAFpC,G,qICfRF,EAAW,SAAUT,EAAOC,GAC9B,OAAOiB,EAAKlB,EAAOC,EACvB,EAEMiB,EAAO,SAAClB,EAAOC,GACjB,IAAMM,EAAWP,EAAMO,SACvB,OAAQC,EAAAA,cAAA,OAAKP,IAAKA,GACdO,EAAAA,cAAA,UACKD,EAASY,KAAI,SAAAP,GAAO,OACjBJ,EAAAA,cAAA,MAAIY,IAAKR,EAAQlB,KAAM2B,QAAS,kBAAMrB,EAAMU,SAASE,EAAQ,GACxDA,EAAQlB,KACR,KAIrB,EAIMsB,GAAmBC,EAAAA,EAAAA,GAAQT,EAAAA,WAAiBC,GAFpC,G","sources":["components/builder/Chrome.js","components/builder/PropertyGrid.js","components/builder/TreeView.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { PropertyGrid } from \"./PropertyGrid\";\r\nimport { TreeView } from \"./TreeView\";\r\n\r\nclass UIElement {\r\n    constructor(name, width, height) {\r\n        this.name = name;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nconst Chrome = function (props, ref) {\r\n    const [selectedElement, setSelectedElement] = useState(null);\r\n\r\n    const elements = [\r\n        new UIElement('Button', 100, 50),\r\n        new UIElement('Textbox', 200, 30),\r\n        new UIElement('Checkbox', 20, 20),\r\n    ];\r\n\r\n    return (<div ref={ref}>\r\n            <TreeView elements={elements} onSelect={setSelectedElement} />\r\n            <PropertyGrid element={selectedElement || elements[0]} />\r\n        </div>);\r\n}\r\n\r\nconst dispatchedEvents = [];\r\nconst props = [];\r\n\r\nconst styles = `\r\n\r\n`;\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(Chrome), props);\r\nexport { WrappedComponent, props, styles, dispatchedEvents, slots };","import React, { useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\n\r\nconst PropertyGrid = function (props, ref) {\r\n    return view(props, ref);\r\n}\r\n\r\nconst view = (props, ref) => {\r\n    const element = props.element;\r\n    return (<div>\r\n        <div>\r\n            <div>Name: {element.name}</div>\r\n            <div>Width: {element.width}</div>\r\n            <div>Height: {element.height}</div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nconst props = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(PropertyGrid), props);\r\nexport { PropertyGrid, WrappedComponent };","import React, { useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\n\r\nconst TreeView = function (props, ref) {\r\n    return view(props, ref);\r\n}\r\n\r\nconst view = (props, ref) => {\r\n    const elements = props.elements;\r\n    return (<div ref={ref}>\r\n        <ul>\r\n            {elements.map(element => (\r\n                <li key={element.name} onClick={() => props.onSelect(element)}>\r\n                    {element.name}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </div>);\r\n}\r\n\r\nconst props = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(TreeView), props);\r\nexport { TreeView, WrappedComponent };"],"names":["UIElement","_createClass","name","width","height","_classCallCheck","this","Chrome","props","ref","_useState2","_slicedToArray","useState","selectedElement","setSelectedElement","elements","React","TreeView","onSelect","PropertyGrid","element","dispatchedEvents","styles","slots","WrappedComponent","wrapper","view","map","key","onClick"],"sourceRoot":""}