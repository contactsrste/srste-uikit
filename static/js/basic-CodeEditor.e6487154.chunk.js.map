{"version":3,"file":"static/js/basic-CodeEditor.e6487154.chunk.js","mappings":"8UAIMA,EAAmB,GAKnBC,EAAgB,SAAUC,EAAOC,GAEnC,IAAAC,GAA4BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAoExB,OAxCAI,EAAAA,EAAAA,YAAU,WACN,GAAIP,EAAIQ,QAAS,CAEb,IAAIC,EAAQ,UACO,SAAfV,EAAMU,OAAmC,OAAfV,EAAMU,MAChCA,EAAQ,KACc,OAAfV,EAAMU,OAAiC,QAAfV,EAAMU,QACrCA,EAAQ,WAKrB,IAAMC,EAAQC,SAASC,cACtB,6DAEQZ,EAAIQ,QAAQK,YAAYH,EAAMI,WAAU,IACxC,IAAIC,EAAcf,EAAIQ,QAAQI,cAAc,cAC5C,GAAIP,EAeAA,EAAOW,SAASjB,EAAMU,OACtBJ,EAAOY,SAASlB,EAAMmB,WAhBd,CACR,IAAIC,EAAaC,EAAAA,OAAAA,OAAqBL,EAAa,CAC/CM,iBAAiB,EACjBC,SAAUvB,EAAMuB,UAAY,aAC5BJ,MAAOnB,EAAMmB,MACbK,sBAAsB,EACtBC,SAAS,EACTf,MAAOA,IAMXH,EAAUa,EACd,CAKJ,CAEJ,GAAG,CAACpB,EAAMU,MAAOV,EAAMmB,MAAOnB,EAAMuB,YAE5BG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACF5B,EAAM6B,OAAOC,EAAAA,EAAAA,KAAA,SAAOC,MAAM,aAAapB,MAAO,CAACqB,OAAQ,WAAWJ,SAAE5B,EAAM6B,QAAgB,MAC5FC,EAAAA,EAAAA,KAAA,OAAK7B,IAAKA,EAAKU,MAAO,CAAEsB,MAAOjC,EAAMiC,MAAOC,OAAQlC,EAAMkC,OAAQC,OAAQ,sBAAuBC,QAAS,UAAWJ,OAAQ,UAAWK,aAAc,EAAGC,gBAAiB,oBAAqBV,UAC3LE,EAAAA,EAAAA,KAAA,OAAKS,GAAG,kBAGpB,EAEMC,EAAM,qUAWNxC,EAAQ,CAAC,CACXyC,KAAM,QACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,QACNC,aAAc,GACdC,KAAM,UACP,CACCF,KAAM,WACNC,aAAc,aACdC,KAAM,UACP,CACCF,KAAM,SACNC,aAAc,QACdC,KAAM,UACP,CACCF,KAAM,QACNC,aAAc,OACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQC,EAAAA,WAAiBhD,GAAgBC,E","sources":["components/basic/CodeEditor.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport * as monaco from 'monaco-editor';\r\n\r\nconst dispatchedEvents = [];\r\n\r\n/*\r\n    Example: <srs-codeeditor value=\"/>\r\n*/\r\nconst SrsCodeEditor = function (props, ref) {\r\n    \r\n    const [editor, setEditor] = useState(null);\r\n\r\n    const getCompletionItems = () => {\r\n        // Add code for building a content tree of components and its properties\r\n        const components = [{name: \"component1\", props: {prop1: \"test1\", prop2: \"red\"}, children: [{name: \"component2\", props: {prop3: \"test3\", prop4: \"world\"}}]}];\r\n        const completionItems = [];\r\n        components.forEach(component => {\r\n            let children = [];\r\n            if (component.children) {\r\n                children = component.children.map(child => {\r\n                    return {\r\n                        label: child.name,\r\n                        kind: monaco.languages.CompletionItemKind.Class,\r\n                        insertText: child.name,\r\n                        documentation: child.props\r\n                    }\r\n                });\r\n            }\r\n            completionItems.push({\r\n                label: component.name,\r\n                kind: monaco.languages.CompletionItemKind.Class,\r\n                insertText: component.name,\r\n                documentation: component.props,\r\n                children: children\r\n            });\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n\r\n            let theme = \"vs-dark\";\r\n            if (props.theme == \"white\" || props.theme == \"g10\") {\r\n                theme = \"vs\"\r\n            } else if (props.theme == \"g90\" || props.theme == \"g100\") {\r\n                theme = \"vs-dark\";\r\n            }\r\n\r\n            \r\n            // Copy over editor styles\r\n\t\t\tconst style = document.querySelector(\r\n\t\t\t\t\"link[rel='stylesheet'][data-name='vs/editor/editor.main']\"\r\n\t\t\t);\r\n            ref.current.appendChild(style.cloneNode(true));\r\n            let containerEl = ref.current.querySelector(\"#container\");\r\n            if(!editor) {\r\n                let editorNode = monaco.editor.create(containerEl, {\r\n                    automaticLayout: true,\r\n                    language: props.language || \"javascript\",\r\n                    value: props.value,\r\n                    scrollBeyondLastLine: false,\r\n                    minimap: true,\r\n                    theme: theme,\r\n                    // suggest: {\r\n                    //     triggerCharacters: ['.', ':'],\r\n                    //     completionItems: getCompletionItems()\r\n                    // }\r\n                });\r\n                setEditor(editorNode);\r\n            }else {\r\n                editor.setTheme(props.theme);\r\n                editor.setValue(props.value);\r\n                // editor.setLanguage(props.language);\r\n            }\r\n        }\r\n\r\n    }, [props.theme, props.value, props.language]);\r\n\r\n    return (<>\r\n        { props.label? <label class=\"cds--label\" style={{margin: \"5px 0px\"}}>{props.label}</label>: null }\r\n        <div ref={ref} style={{ width: props.width, height: props.height, border: \"1px solid lightgrey\", padding: \"0px 5px\", margin: \"5px 0px\", borderRadius: 5, backgroundColor: \"var(--cds-field)\" }}>\r\n            <div id=\"container\"></div>\r\n        </div>\r\n        </>);\r\n}\r\n\r\nconst styles = `\r\n    #container {\r\n        overflow: hidden; width: 100%; height: 100%;\r\n    }\r\n    .monaco-editor, .decorationsOverviewRuler, .minimap {\r\n        --vscode-editor-background: var(--cds-field) !important;\r\n    }\r\n    .monaco-editor .margin {\r\n        --vscode-editorGutter-background: var(--cds-field) !important;\r\n    }\r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"value\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"language\",\r\n    defaultValue: \"javascript\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"height\",\r\n    defaultValue: \"200px\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"width\",\r\n    defaultValue: \"40vw\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsCodeEditor), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","SrsCodeEditor","props","ref","_useState","useState","_useState2","_slicedToArray","editor","setEditor","useEffect","current","theme","style","document","querySelector","appendChild","cloneNode","containerEl","setTheme","setValue","value","editorNode","monaco","automaticLayout","language","scrollBeyondLastLine","minimap","_jsxs","_Fragment","children","label","_jsx","class","margin","width","height","border","padding","borderRadius","backgroundColor","id","styles","name","defaultValue","type","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}