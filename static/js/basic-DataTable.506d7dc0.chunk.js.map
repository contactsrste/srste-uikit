{"version":3,"file":"static/js/basic-DataTable.506d7dc0.chunk.js","mappings":"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","sources":["components/basic/DataTable.js","components/basic/Icon.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport {\r\n    DataTable, TableContainer, Table, TableToolbar, TableBatchActions, TableBatchAction,\r\n    TableToolbarContent, TableToolbarSearch, TableToolbarMenu, TableToolbarAction, Button,\r\n    TableHead, TableRow, TableSelectAll, TableHeader, TableBody, TableSelectRow, TableCell,\r\n    OverflowMenu, OverflowMenuItem\r\n} from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport SrsIcon from \"./Icon.js\";\r\nimport { Settings } from \"@carbon/icons-react\";\r\n\r\nconst dispatchedEvents = [\"ABOUT#clicked\"];\r\n/*\r\n    Example: <srs-datatable headers=[\"Name\", \"Email\", \"Phone\"] rows=[[\"John Doe\", \"john.doe@example.com\", \"(123) 456-7890\"]]/>\r\n*/\r\nconst SrsDataTable = function (props, ref) {\r\n    const headers = props.headers;\r\n    const [rows, setRows] = useState(props.rows || []);\r\n    const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n    const [sortBy, setSortBy] = useState(\"\");\r\n    const [sortDirection, setSortDirection] = useState(\"\");\r\n    const [filter, setFilter] = useState(\"\");\r\n\r\n    const handleSort = (event) => {\r\n        const { key, direction, inlineSort, dispatchEvent } = event;\r\n\r\n        setSortBy(key);\r\n        setSortDirection(direction);\r\n        if (inlineSort) {\r\n            rows = rows.sort((a, b) => direction == \"ASC\" ? a[key].localeCompare(b[key]) : b[key].localeCompare(a[key]));\r\n            setRows(rows);\r\n        } else {\r\n            dispatchEvent(EventAPI.DATATABLE_SORT_REQUESTED, { payload: { sortBy: key, sortDirection: direction } });\r\n        }\r\n    };\r\n\r\n    // Event listener for row clicks\r\n    const onRowClick = (evt) => {\r\n        // Find the clicked row element\r\n        let target = evt.target;\r\n        while (target.tagName !== 'TR') {\r\n            target = target.parentNode;\r\n            if (!target) {\r\n                return;\r\n            }\r\n        }\r\n        // Ignore clicks on the table header row\r\n        if (target.parentNode.tagName === 'THEAD') {\r\n            return;\r\n        }\r\n        // Select the clicked row\r\n        this.selectedIndex = target.rowIndex - 1;\r\n        props.dispatchEvent(EventAPI.DATATABLE_ROW_CLICKED, { detail: { index: this.selectedIndex } });\r\n    }\r\n\r\n    const handleSelectRow = (row) => {\r\n        const rowIndex = selectedRows.findIndex((r) => r.id === row.id);\r\n        if (rowIndex >= 0) {\r\n            setSelectedRows(selectedRows.filter((r) => r.id !== row.id));\r\n        } else {\r\n            setSelectedRows([...selectedRows, row]);\r\n        }\r\n    };\r\n\r\n    const handleRemoveSelectedRows = () => {\r\n        // remove selected rows from the table\r\n    };\r\n\r\n    const handleFilterChange = (event) => {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    const onInputChange = (evt) => {\r\n        console.log(evt.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setRows(props.rows);\r\n        setSelectedRows(props.selectedRows);\r\n        setSortBy(props.sortBy);\r\n        setSortDirection(props.sortDirection);\r\n        setFilter(props.filter);\r\n    }, [props.ts, props.rows, props.selectedRows, props.sortBy, props.sortDirection, props.filter])\r\n\r\n    return (\r\n        <>\r\n            <TableContainer title={props.list_title} description={props.list_subtitle}>\r\n                <TableToolbar>\r\n                    <TableToolbarContent>\r\n                        <TableToolbarSearch onChange={onInputChange} />\r\n                        <TableToolbarMenu>\r\n                            <TableToolbarAction onClick={handleRemoveSelectedRows} isDelete disabled={!selectedRows || selectedRows.length == 0}>\r\n                                Delete Selected\r\n                            </TableToolbarAction>\r\n                            <TableToolbarAction onClick={handleRemoveSelectedRows} disabled={!selectedRows || selectedRows.length == 0}>\r\n                                Export Selected\r\n                            </TableToolbarAction>\r\n                        </TableToolbarMenu>\r\n                    </TableToolbarContent>\r\n                </TableToolbar>\r\n            {/* <div style={{ display: \"flex\", flexDirection: \"row\", verticalAlign: \"center\" }}>\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"80%\", padding: \"10px 10px 0px 10px\" }}>\r\n                    <p className=\"cds--file--label\">{props.list_title}</p>\r\n                    <p className=\"cds--label-description\">{props.list_subtitle}</p>\r\n                </div>\r\n                <OverflowMenu renderIcon={Settings} ariaLabel=\"overflow-menu\" size=\"lg\">\r\n                    <OverflowMenuItem itemText=\"Delete Selected\" isDelete onClick={handleRemoveSelectedRows} disabled={!selectedRows || selectedRows.length == 0} />\r\n                    <OverflowMenuItem itemText=\"Export Selected\" onClick={handleRemoveSelectedRows} disabled={!selectedRows || selectedRows.length == 0} />\r\n                </OverflowMenu>\r\n            </div> */}\r\n                <Table size=\"lg\" useZebraStyles={true}\r\n                    filter={\r\n                        <label>\r\n                            Filter by name:\r\n                            <input type=\"text\" value={filter} onChange={handleFilterChange} />\r\n                        </label>\r\n                    }>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableHeader id=\"OpenRecord\" key=\"OpenRecord\"></TableHeader>\r\n                            {headers.map((header) => {\r\n                                return typeof header == \"object\" ? (<TableHeader\r\n                                    {...header}\r\n                                    isSortable={header.sortable}\r\n                                    key={header.name}\r\n                                    sortDirection={sortBy === header.name ? sortDirection : null}\r\n                                    onClick={() => handleSort({ key: header.name, direction: sortDirection === \"ASC\" ? \"DESC\" : \"ASC\", inlineSort: header.inline_sort, dispatchEvent: props.dispatchEvent })}>\r\n                                    {header.label}\r\n                                </TableHeader>) : <TableHeader id={header} key={header}>{header}</TableHeader>\r\n                            })\r\n                            }\r\n                            <TableHeader id=\"Actions\" key=\"Actions\">Row Actions</TableHeader>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell>\r\n                                    <Button\r\n                                        kind=\"ghost\"\r\n                                        hasIconOnly\r\n                                        renderIcon={() => {\r\n                                            return (<SrsIcon type=\"fontawesome\" name=\"book-open\" size={20} color={props.theme == \"white\" || props.theme == \"g10\" ? \"black\" : \"white\"} />);\r\n                                        }}\r\n                                        iconDescription=\"Open Record\"\r\n                                        onClick={() => onRowClick(row)}\r\n                                    />\r\n                                </TableCell>\r\n                                {Object.keys(row)\r\n                                    .filter((key) => key !== 'id')\r\n                                    .map((key) => {\r\n                                        return <TableCell key={key}>{row[key]}</TableCell>;\r\n                                    })}\r\n                                <TableCell>\r\n                                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                                        <Button\r\n                                            kind=\"ghost\"\r\n                                            hasIconOnly\r\n                                            renderIcon={() => {\r\n                                                return (<SrsIcon type=\"carbon\" name={selectedRows?.some((r) => r.id === row.id) ? \"CircleFilled\" : \"CircleStroke\"} size={20} color={selectedRows?.some((r) => r.id === row.id) ? \"red\" : \"white\"} />);\r\n                                            }}\r\n                                            iconDescription={selectedRows?.some((r) => r.id === row.id) ? \"Selected\" : \"Click to select\"}\r\n                                            onClick={() => handleSelectRow(row)}\r\n                                        />\r\n                                        <Button\r\n                                            kind=\"ghost\"\r\n                                            hasIconOnly\r\n                                            renderIcon={() => {\r\n                                                return (<SrsIcon elementid={row.id} type=\"fontawesome\" name=\"book-open\" size={20} color={props.theme == \"white\" || props.theme == \"g10\" ? \"black\" : \"white\"} />);\r\n                                            }}\r\n                                            iconDescription=\"Open Record\"\r\n                                            onClick={() => onRowClick(row)}\r\n                                        />\r\n                                        <div style={{ verticalAlign: \"center\" }}>\r\n                                            <OverflowMenu ariaLabel=\"overflow-menu\" size=\"lg\">\r\n                                                <OverflowMenuItem itemText=\"Show Preview\" />\r\n                                                <OverflowMenuItem itemText=\"Delete Record\" isDelete />\r\n                                                <OverflowMenuItem itemText=\"Duplicate Record\" disabled />\r\n                                            </OverflowMenu>\r\n                                        </div>\r\n                                    </div>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"list_title\",\r\n    defaultValue: \"List\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"list_subtitle\",\r\n    defaultValue: \"Below are the rows in the list.\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"rows\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}, {\r\n    name: \"headers\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsDataTable), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/*\r\n    Example: <srs-icon name=\"Add\" description=\"Add an item\"/>\r\n*/\r\n\r\nconst dispatchedEvents = [EventAPI.ICON_CLICKED];\r\n\r\nconst SrsIcon = function (props, ref) {\r\n    const [iconInstance, setIconInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if(!props.type || props.type == \"carbon\") {\r\n            if(props.name) {\r\n                import('@carbon/icons-react').then((iconLibrary)=> {\r\n                    setIconInstance(iconLibrary[props.name]);\r\n                });\r\n            }\r\n        }else if(props.type == \"fontawesome\") {\r\n            import(\"@fortawesome/free-solid-svg-icons\").then((iconLibrary) => {\r\n                let iconNameParts = props.name.split(\"-\");\r\n                iconNameParts = iconNameParts.map((iconNamePart) => iconNamePart[0].toUpperCase() + iconNamePart.substring(1));\r\n                let moduleName = \"fa\" + iconNameParts.join(\"\");\r\n                setIconInstance(iconLibrary[moduleName]);\r\n                library.add(iconLibrary[moduleName]);\r\n            });            \r\n        }\r\n    }, [props.name, props.type]);\r\n    \r\n    let inlineStyles = {\r\n       color: props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\"),\r\n       \"--cds-icon-primary\": props.color ||(props.theme == \"white\" || props.theme == \"g10\"? \"black\": \"white\")\r\n    };\r\n\r\n    const handleClick = (props) => {\r\n        return (evt) => {\r\n            props.dispatchEvent && props.dispatchEvent(EventAPI.ICON_CLICKED, {name: props.name, id: props.elementid})\r\n            if(props.onClick) {\r\n                props.onClick({name: props.name, id: props.elementid});\r\n            }\r\n        }\r\n    }\r\n\r\n    let iconEl = null;\r\n    if(!props.type || props.type == \"carbon\") {\r\n        let IconInstance = iconInstance;\r\n        iconEl = <IconInstance size={props.size || 24} onClick={handleClick(props)}/>;\r\n    }else if(props.type == \"fontawesome\") {\r\n        iconEl = <FontAwesomeIcon style={{cursor: \"pointer\", height: props.height || props.size, width: props.width || props.size, color: props.color}} \r\n                    onClick={handleClick(props)}\r\n                    title={props.description}\r\n                    icon={props.name}/>\r\n    }\r\n\r\n    return iconInstance? <div style={inlineStyles}>\r\n            { iconEl } \r\n        </div>: <div/>\r\n}\r\n\r\nconst styles = `\r\n\r\n`\r\nconst props = [{\r\n    name: \"name\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"description\",\r\n    defaultValue: true,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"size\",\r\n    defaultValue: 24,\r\n    type: \"number\"\r\n}, {\r\n    name: \"color\",\r\n    defaultValue: \"\",\r\n    type: \"string\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsIcon), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };\r\nexport default SrsIcon;"],"names":["dispatchedEvents","SrsDataTable","props","ref","_this","headers","_useState2","_slicedToArray","useState","rows","setRows","_useState4","selectedRows","setSelectedRows","_useState6","sortBy","setSortBy","_useState8","sortDirection","setSortDirection","_useState10","filter","setFilter","handleSort","event","key","direction","inlineSort","dispatchEvent","sort","a","b","localeCompare","_readOnlyError","EventAPI","payload","onRowClick","evt","target","tagName","parentNode","selectedIndex","rowIndex","detail","index","handleRemoveSelectedRows","useEffect","ts","React","TableContainer","title","list_title","description","list_subtitle","TableToolbar","TableToolbarContent","TableToolbarSearch","onChange","console","log","value","TableToolbarMenu","TableToolbarAction","onClick","isDelete","disabled","length","Table","size","useZebraStyles","type","TableHead","TableRow","TableHeader","id","map","header","_typeof","_extends","isSortable","sortable","name","inline_sort","label","TableBody","row","TableCell","Button","kind","hasIconOnly","renderIcon","SrsIcon","color","theme","iconDescription","Object","keys","style","display","flexDirection","some","r","findIndex","concat","_toConsumableArray","handleSelectRow","elementid","verticalAlign","OverflowMenu","ariaLabel","OverflowMenuItem","itemText","styles","defaultValue","slots","WrappedComponent","wrapper","iconInstance","setIconInstance","then","iconLibrary","iconNameParts","split","moduleName","iconNamePart","toUpperCase","substring","join","library","inlineStyles","handleClick","iconEl","FontAwesomeIcon","cursor","height","width","icon","IconInstance"],"sourceRoot":""}