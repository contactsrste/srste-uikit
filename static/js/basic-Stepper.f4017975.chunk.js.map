{"version":3,"file":"static/js/basic-Stepper.f4017975.chunk.js","mappings":"k2CAKA,IAAMA,EAAmB,CAACC,EAAAA,EAAAA,oBAA8BA,EAAAA,EAAAA,mBAKlDC,EAAa,SAAUC,EAAOC,GAChC,IAAiDC,EAAAC,GAAXC,EAAAA,EAAAA,UAAS,GAAE,GAA1CC,EAAWH,EAAA,GAAEI,EAAcJ,EAAA,GACwBK,EAAAJ,GAA9BC,EAAAA,EAAAA,UAASJ,EAAMQ,gBAAe,GAAnDC,EAAMF,EAAA,GACwCG,GAD7BH,EAAA,GAC6BJ,GAA3BC,EAAAA,EAAAA,UAASJ,EAAMW,OAAS,IAAG,IAA9CA,EAAKD,EAAA,GAAUA,EAAA,GAgCtB,OACIE,EAAAA,cAAA,WACIA,EAAAA,cAACC,EAAAA,IAAiB,CAACC,aAAcT,GAb9BM,EAAMI,KAAI,SAACC,EAAMC,GAAK,OACzBL,EAAAA,cAACM,EAAAA,IAAY,CACTC,IAAG,QAAAC,OAAUH,GACbI,MAAOL,EAAKK,MACZC,YAAaN,EAAKM,YAClBC,SAAUN,EAAQZ,EAClBmB,QAASP,IAAUZ,GACrB,KASFO,EAAAA,cAACa,EAAAA,IAAI,KACCd,EAAMI,KAAI,SAACC,EAAMC,GACZA,GAASZ,IACPqB,EAAAA,IAAsBV,EAAKK,MACvBM,EAAAA,IAESX,EAAKY,KACJnB,EAAOO,EAAKY,MAMnC,IAEAhB,EAAAA,cAAA,WACIA,EAAAA,cAACiB,EAAAA,IAAM,CAACC,KAAK,YAAYC,QArClB,WACnBzB,EAAeD,EAAc,EACjC,EAmCkE2B,SAA0B,IAAhB3B,GAAmB,YAG/EO,EAAAA,cAACiB,EAAAA,IAAM,CAACC,KAAK,UAAUC,QAjDhB,WACC,IAAhB1B,EACAL,EAAMiC,cAAcnC,EAAAA,EAAAA,kBAA4B,CAAEoC,QAAS,CAAEC,MAAO1B,EAAQ2B,GAAIpC,EAAMqC,cAEtFrC,EAAMiC,cAAcnC,EAAAA,EAAAA,oBAA8B,CAAEoC,QAAS,CAAEC,MAAO9B,EAAc,EAAG+B,GAAIpC,EAAMqC,aACjG/B,EAAeD,EAAc,GAErC,GA2CqC,IAAhBA,EAAoB,SAAW,UAMxD,EAEMiC,EAAM,WAGNtC,EAAQ,CAAC,CACX4B,KAAM,iBACNW,aAAc,CAAC,EACfC,KAAM,UACP,CACCZ,KAAM,QACNW,aAAc,GACdC,KAAM,WAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQ/B,EAAAA,WAAiBb,GAAaC,E","sources":["components/basic/Stepper.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../commons/WebComponentWrapper\";\r\nimport { Button, Form, FormGroup, NumberInput, ProgressIndicator, ProgressStep, } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.STEPPER_STEPCHANGED, EventAPI.STEPPER_SUBMITTED];\r\n\r\n/*\r\n    Example: <srs-stepper initial_values={step1: 1, step2: 2} steps=[{name: \"step1\", label: \"Step 1\", description: \"Step 1\"}, {name: \"step2\", label: \"Step 2\", description: \"Step 2\"}]/>\r\n*/\r\nconst SrsStepper = function (props, ref) {\r\n    const [currentStep, setCurrentStep] = useState(0);\r\n    const [values, setValues] = useState(props.initial_values);\r\n    const [steps, setSteps] = useState(props.steps || []);\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setValues({ ...values, [name]: value });\r\n    };\r\n\r\n    const handleNextStep = () => {\r\n        if (currentStep === 2) {\r\n            props.dispatchEvent(EventAPI.STEPPER_SUBMITTED, { payload: { value: values, id: props.elementid } });\r\n        } else {\r\n            props.dispatchEvent(EventAPI.STEPPER_STEPCHANGED, { payload: { value: currentStep + 1, id: props.elementid } });\r\n            setCurrentStep(currentStep + 1);\r\n        }\r\n    };\r\n\r\n    const handlePrevStep = () => {\r\n        setCurrentStep(currentStep - 1);\r\n    };\r\n\r\n    const getProgressSteps = () => {\r\n        return steps.map((step, index) => (\r\n            <ProgressStep\r\n                key={`step-${index}`}\r\n                label={step.label}\r\n                description={step.description}\r\n                complete={index < currentStep}\r\n                current={index === currentStep}\r\n            />\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ProgressIndicator currentIndex={currentStep}>\r\n                {getProgressSteps()}\r\n            </ProgressIndicator>\r\n            <Form>\r\n                { steps.map((step, index) => {\r\n                    if(index == currentStep) {\r\n                        <FormGroup legendText={step.label}>\r\n                            <NumberInput\r\n                                id={\"step\" + currentStep + \"-input\"}\r\n                                name={step.name}\r\n                                value={values[step.name]}\r\n                                onChange={handleInputChange}\r\n                            >\r\n                            </NumberInput>\r\n                        </FormGroup>\r\n                    }\r\n                })}\r\n\r\n                <div>\r\n                    <Button kind=\"secondary\" onClick={handlePrevStep} disabled={currentStep === 0}>\r\n                        Previous\r\n                    </Button>\r\n                    <Button kind=\"primary\" onClick={handleNextStep}>\r\n                        {currentStep === 2 ? 'Submit' : 'Next'}\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"initial_values\",\r\n    defaultValue: {},\r\n    type: \"object\"\r\n}, {\r\n    name: \"steps\",\r\n    defaultValue: [],\r\n    type: \"object\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsStepper), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots };"],"names":["dispatchedEvents","EventAPI","SrsStepper","props","ref","_useState2","_slicedToArray","useState","currentStep","setCurrentStep","_useState4","initial_values","values","_useState6","steps","React","ProgressIndicator","currentIndex","map","step","index","ProgressStep","key","concat","label","description","complete","current","Form","FormGroup","NumberInput","name","Button","kind","onClick","disabled","dispatchEvent","payload","value","id","elementid","styles","defaultValue","type","slots","WrappedComponent","wrapper"],"sourceRoot":""}