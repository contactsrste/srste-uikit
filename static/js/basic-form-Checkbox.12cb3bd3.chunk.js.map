{"version":3,"file":"static/js/basic-form-Checkbox.12cb3bd3.chunk.js","mappings":"yVAKMA,EAAmB,CAACC,EAAAA,EAAAA,kBAKpBC,EAAc,SAAUC,EAAOC,GACjC,IAAAC,GAAkCC,EAAAA,EAAAA,UAASH,EAAMI,SAAWJ,EAAMK,QAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA1EM,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAM9B,OAJAI,EAAAA,EAAAA,YAAU,WACND,EAAaT,EAAMI,SAAWJ,EAAMK,QAAS,GAC7CL,EAAMW,SAASX,EAAMI,SAAWJ,EAAMK,QAAS,EACnD,GAAG,CAACL,IACGA,EAAMY,WACXC,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,CACPC,UAAWf,EAAMgB,MACjBZ,QAASI,EACTS,GAAIjB,EAAMY,UACVM,SAAU,SAACC,EAAKC,GACZX,EAAaW,EAAQhB,SACrBJ,EAAMW,SAASS,EAAQhB,SACpBJ,EAAMkB,SACLlB,EAAMkB,SAASE,EAAQhB,SAEvBJ,EAAMqB,cAAcvB,EAAAA,EAAAA,iBAA2B,CAACsB,QAAS,CAAEf,MAAOe,EAAQhB,QAASa,GAAIjB,EAAMY,YAErG,IAED,IACP,EAEMU,EAAM,WAGNtB,EAAQ,CAAC,CACXuB,KAAM,QACNC,aAAc,QACdC,KAAM,UACP,CACCF,KAAM,UACNC,cAAc,EACdC,KAAM,WACP,CACCF,KAAM,QACNC,cAAc,EACdC,KAAM,YAGJC,EAAQ,GAERC,GAAmBC,EAAAA,EAAAA,GAAQC,EAAAA,WAAiB9B,GAAcC,E","sources":["components/basic/form/Checkbox.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport wrapper from \"../../../commons/WebComponentWrapper\";\r\nimport { Checkbox  } from \"carbon-components-react\";\r\nimport { EventAPI } from \"../../../commons/EventAPI\";\r\n\r\nconst dispatchedEvents = [EventAPI.CHECKBOX_CHANGED];\r\n\r\n/*\r\n    Example: <srs-checkbox label=\"Label\" checked=\"true\"/>\r\n*/\r\nconst SrsCheckbox = function (props, ref) {\r\n    const [isChecked, setIsChecked] = useState(props.checked || props.value || false);\r\n\r\n    useEffect(() => {\r\n        setIsChecked(props.checked || props.value || false);\r\n        props.setValue(props.checked || props.value || false)\r\n    }, [props]);\r\n    return props.elementid? (\r\n      <Checkbox \r\n        labelText={props.label}\r\n        checked={isChecked}\r\n        id={props.elementid}\r\n        onChange={(evt, payload) => {\r\n            setIsChecked(payload.checked);\r\n            props.setValue(payload.checked);\r\n            if(props.onChange) {\r\n                props.onChange(payload.checked);\r\n            }else {\r\n                props.dispatchEvent(EventAPI.CHECKBOX_CHANGED, {payload: { value: payload.checked, id: props.elementid }});\r\n            }\r\n        }}\r\n      />\r\n    ): null;\r\n}\r\n\r\nconst styles = `\r\n    \r\n`\r\nconst props = [{\r\n    name: \"label\",\r\n    defaultValue: \"label\",\r\n    type: \"string\"\r\n}, {\r\n    name: \"checked\",\r\n    defaultValue: false,\r\n    type: \"boolean\"\r\n}, {\r\n    name: \"value\",\r\n    defaultValue: false,\r\n    type: \"boolean\"\r\n}]\r\n\r\nconst slots = [];\r\n\r\nconst WrappedComponent = wrapper(React.forwardRef(SrsCheckbox), props);\r\nexport { WrappedComponent, styles, props, dispatchedEvents, slots};"],"names":["dispatchedEvents","EventAPI","SrsCheckbox","props","ref","_useState","useState","checked","value","_useState2","_slicedToArray","isChecked","setIsChecked","useEffect","setValue","elementid","_jsx","Checkbox","labelText","label","id","onChange","evt","payload","dispatchEvent","styles","name","defaultValue","type","slots","WrappedComponent","wrapper","React"],"sourceRoot":""}